Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> opt_module decl_list
Rule 2     opt_module -> module_decl
Rule 3     opt_module -> empty
Rule 4     decl_list -> decl_list decl
Rule 5     decl_list -> decl
Rule 6     decl -> class_def
Rule 7     decl -> struct_def
Rule 8     decl -> enum_def
Rule 9     decl -> join_def
Rule 10    decl -> implement_decl
Rule 11    decl -> function
Rule 12    decl -> import_decl
Rule 13    decl -> python_import
Rule 14    decl -> pyfn_decl
Rule 15    decl -> pytype_decl
Rule 16    module_decl -> MODULE IDENT SEMI
Rule 17    struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE
Rule 18    enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE
Rule 19    join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
Rule 20    field_decl_list -> field_decl_list field_decl
Rule 21    field_decl_list -> field_decl
Rule 22    field_decl_list -> empty
Rule 23    field_decl -> IDENT COLON type_expr opt_comma
Rule 24    enum_variant_list -> enum_variant_list COMMA IDENT
Rule 25    enum_variant_list -> IDENT
Rule 26    enum_variant_list -> empty
Rule 27    primary -> IDENT LBRACE field_assign_list RBRACE
Rule 28    field_assign_list -> field_assign_list field_assign
Rule 29    field_assign_list -> field_assign
Rule 30    field_assign_list -> empty
Rule 31    field_assign -> IDENT COLON expression opt_comma
Rule 32    opt_comma -> COMMA
Rule 33    opt_comma -> empty
Rule 34    class_def -> CLASS IDENT LBRACE class_body RBRACE
Rule 35    class_body -> class_body class_member
Rule 36    class_body -> class_member
Rule 37    class_member -> PUBLIC IDENT COLON type_expr SEMI
Rule 38    class_member -> LET IDENT COLON type_expr SEMI
Rule 39    class_member -> function
Rule 40    function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block
Rule 41    parameters_opt -> parameters
Rule 42    parameters_opt -> empty
Rule 43    parameters -> parameters COMMA parameter
Rule 44    parameters -> parameter
Rule 45    parameter -> IDENT COLON type_expr
Rule 46    return_opt -> ARROW type_expr
Rule 47    return_opt -> empty
Rule 48    type_expr -> simple_type_expr array_spec_opt
Rule 49    simple_type_expr -> IDENT type_access_opt
Rule 50    array_spec_opt -> LBRACKET NUMBER RBRACKET
Rule 51    array_spec_opt -> empty
Rule 52    type_access_opt -> type_access_opt_part
Rule 53    type_access_opt -> empty
Rule 54    type_access_opt_part -> DOT IDENT
Rule 55    type_access_opt_part -> DDCOLON IDENT
Rule 56    block -> LBRACE statement_list RBRACE
Rule 57    statement_list -> statement_list statement
Rule 58    statement_list -> empty
Rule 59    statement -> var_decl
Rule 60    statement -> assignment_statement
Rule 61    statement -> return_statement
Rule 62    statement -> expr_statement
Rule 63    statement -> if_statement
Rule 64    statement -> while_stmt
Rule 65    statement -> for_stmt
Rule 66    var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI
Rule 67    var_decl -> LET IDENT COLON type_expr SEMI
Rule 68    return_statement -> RETURN expression SEMI
Rule 69    expr_statement -> expression SEMI
Rule 70    expression -> call_expr
Rule 71    expression -> expression PLUS expression
Rule 72    expression -> expression MINUS expression
Rule 73    expression -> expression TIMES expression
Rule 74    expression -> expression DIVIDE expression
Rule 75    expression -> expression MOD expression
Rule 76    expression -> expression LE expression
Rule 77    expression -> expression LT expression
Rule 78    expression -> expression GE expression
Rule 79    expression -> expression GT expression
Rule 80    expression -> expression EQ expression
Rule 81    expression -> expression NE expression
Rule 82    call_expr -> call_expr call_suffix
Rule 83    call_expr -> primary
Rule 84    call_suffix -> LPAREN arg_list_opt RPAREN
Rule 85    call_suffix -> DOT IDENT
Rule 86    call_suffix -> DDCOLON IDENT
Rule 87    call_suffix -> ARROW IDENT
Rule 88    call_suffix -> LBRACKET expression RBRACKET
Rule 89    arg_list_opt -> arg_list
Rule 90    arg_list_opt -> empty
Rule 91    arg_list -> arg_list COMMA argument
Rule 92    arg_list -> argument
Rule 93    argument -> IDENT COLON expression
Rule 94    argument -> expression
Rule 95    primary -> LPAREN expression RPAREN
Rule 96    primary -> LBRACKET expr_list_opt RBRACKET
Rule 97    expr_list_opt -> expr_list
Rule 98    expr_list_opt -> empty
Rule 99    expr_list -> expr_list COMMA expression
Rule 100   expr_list -> expression
Rule 101   primary -> NUMBER
Rule 102   primary -> STRING
Rule 103   primary -> IDENT
Rule 104   primary -> TRUE
Rule 105   primary -> FALSE
Rule 106   primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN
Rule 107   primary -> NEW qualified_identifier
Rule 108   primary -> FN LPAREN parameters_opt RPAREN return_opt block
Rule 109   empty -> <empty>
Rule 110   if_statement -> IF expression block else_clause_opt
Rule 111   else_clause_opt -> ELSE if_statement
Rule 112   else_clause_opt -> ELSE block
Rule 113   else_clause_opt -> empty
Rule 114   implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
Rule 115   method_list -> method_list function
Rule 116   method_list -> function
Rule 117   assignment_statement -> assignment SEMI
Rule 118   assignment -> call_expr EQUAL expression
Rule 119   import_decl -> IMPORT STRING SEMI
Rule 120   qualified_identifier -> IDENT DDCOLON IDENT
Rule 121   qualified_identifier -> IDENT
Rule 122   expression -> MINUS expression
Rule 123   while_stmt -> WHILE expression block
Rule 124   for_stmt -> FOR IDENT COLON type_expr IN expression block
Rule 125   python_import -> PYTHON IMPORT IDENT SEMI
Rule 126   pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block
Rule 127   code_block -> LBRACE CODE_STRING RBRACE
Rule 128   pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI

Terminals, with rules where they appear

AND                  : 19
ARROW                : 46 87 126
AS                   : 19
CLASS                : 34
CODE_STRING          : 127 128
COLON                : 23 31 37 38 45 66 67 93 124
COMMA                : 24 32 43 91 99
DDCOLON              : 55 86 120
DIVIDE               : 74
DOT                  : 54 85
ELSE                 : 111 112
ENUM                 : 18
EQ                   : 80
EQUAL                : 66 118 128
FALSE                : 105
FN                   : 40 108
FOR                  : 124
GE                   : 78
GT                   : 79
IDENT                : 16 17 18 19 19 19 23 24 25 27 31 34 37 38 40 45 49 54 55 66 67 85 86 87 93 103 114 114 120 120 121 124 125 126 128
IF                   : 110
IMPLEMENT            : 114
IMPORT               : 119 125
IN                   : 124
JOIN                 : 19
LBRACE               : 17 18 19 27 34 56 114 127
LBRACKET             : 50 88 96
LE                   : 76
LET                  : 38 66 67
LPAREN               : 40 84 95 106 108 126
LT                   : 77
MINUS                : 72 122
MOD                  : 75
MODULE               : 16
NE                   : 81
NEW                  : 106 107
NUMBER               : 50 101
PLUS                 : 71
PUBLIC               : 37
PYFN                 : 126
PYTHON               : 125
PYTYPE               : 128
RBRACE               : 17 18 19 27 34 56 114 127
RBRACKET             : 50 88 96
RETURN               : 68
RPAREN               : 40 84 95 106 108 126
SEMI                 : 16 37 38 66 67 68 69 117 119 125 128
STRING               : 102 119
STRUCT               : 17
TIMES                : 73
TRUE                 : 104
USES                 : 114
WHILE                : 123
error                : 

Nonterminals, with rules where they appear

arg_list             : 89 91
arg_list_opt         : 84 106
argument             : 91 92
array_spec_opt       : 48
assignment           : 117
assignment_statement : 60
block                : 40 108 110 112 123 124
call_expr            : 70 82 118
call_suffix          : 82
class_body           : 34 35
class_def            : 6
class_member         : 35 36
code_block           : 126
decl                 : 4 5
decl_list            : 1 4
else_clause_opt      : 110
empty                : 3 22 26 30 33 42 47 51 53 58 90 98 113
enum_def             : 8
enum_variant_list    : 18 24
expr_list            : 97 99
expr_list_opt        : 96
expr_statement       : 62
expression           : 31 66 68 69 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 88 93 94 95 99 100 110 118 122 123 124
field_assign         : 28 29
field_assign_list    : 27 28
field_decl           : 20 21
field_decl_list      : 17 19 20
for_stmt             : 65
function             : 11 39 115 116
if_statement         : 63 111
implement_decl       : 10
import_decl          : 12
join_def             : 9
method_list          : 114 115
module_decl          : 2
opt_comma            : 23 31
opt_module           : 1
parameter            : 43 44
parameters           : 41 43
parameters_opt       : 40 108 126
primary              : 83
program              : 0
pyfn_decl            : 14
python_import        : 13
pytype_decl          : 15
qualified_identifier : 106 107
return_opt           : 40 108
return_statement     : 61
simple_type_expr     : 48
statement            : 57
statement_list       : 56 57
struct_def           : 7
type_access_opt      : 49
type_access_opt_part : 52
type_expr            : 23 37 38 45 46 66 67 124 126
var_decl             : 59
while_stmt           : 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . opt_module decl_list
    (2) opt_module -> . module_decl
    (3) opt_module -> . empty
    (16) module_decl -> . MODULE IDENT SEMI
    (109) empty -> .

    MODULE          shift and go to state 5
    CLASS           reduce using rule 109 (empty -> .)
    STRUCT          reduce using rule 109 (empty -> .)
    ENUM            reduce using rule 109 (empty -> .)
    JOIN            reduce using rule 109 (empty -> .)
    IMPLEMENT       reduce using rule 109 (empty -> .)
    FN              reduce using rule 109 (empty -> .)
    IMPORT          reduce using rule 109 (empty -> .)
    PYTHON          reduce using rule 109 (empty -> .)
    PYFN            reduce using rule 109 (empty -> .)
    PYTYPE          reduce using rule 109 (empty -> .)

    program                        shift and go to state 1
    opt_module                     shift and go to state 2
    module_decl                    shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> opt_module . decl_list
    (4) decl_list -> . decl_list decl
    (5) decl_list -> . decl
    (6) decl -> . class_def
    (7) decl -> . struct_def
    (8) decl -> . enum_def
    (9) decl -> . join_def
    (10) decl -> . implement_decl
    (11) decl -> . function
    (12) decl -> . import_decl
    (13) decl -> . python_import
    (14) decl -> . pyfn_decl
    (15) decl -> . pytype_decl
    (34) class_def -> . CLASS IDENT LBRACE class_body RBRACE
    (17) struct_def -> . STRUCT IDENT LBRACE field_decl_list RBRACE
    (18) enum_def -> . ENUM IDENT LBRACE enum_variant_list RBRACE
    (19) join_def -> . JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
    (114) implement_decl -> . IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block
    (119) import_decl -> . IMPORT STRING SEMI
    (125) python_import -> . PYTHON IMPORT IDENT SEMI
    (126) pyfn_decl -> . PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block
    (128) pytype_decl -> . PYTYPE IDENT EQUAL CODE_STRING SEMI

    CLASS           shift and go to state 18
    STRUCT          shift and go to state 19
    ENUM            shift and go to state 20
    JOIN            shift and go to state 21
    IMPLEMENT       shift and go to state 22
    FN              shift and go to state 23
    IMPORT          shift and go to state 24
    PYTHON          shift and go to state 25
    PYFN            shift and go to state 26
    PYTYPE          shift and go to state 27

    decl_list                      shift and go to state 6
    decl                           shift and go to state 7
    class_def                      shift and go to state 8
    struct_def                     shift and go to state 9
    enum_def                       shift and go to state 10
    join_def                       shift and go to state 11
    implement_decl                 shift and go to state 12
    function                       shift and go to state 13
    import_decl                    shift and go to state 14
    python_import                  shift and go to state 15
    pyfn_decl                      shift and go to state 16
    pytype_decl                    shift and go to state 17

state 3

    (2) opt_module -> module_decl .

    CLASS           reduce using rule 2 (opt_module -> module_decl .)
    STRUCT          reduce using rule 2 (opt_module -> module_decl .)
    ENUM            reduce using rule 2 (opt_module -> module_decl .)
    JOIN            reduce using rule 2 (opt_module -> module_decl .)
    IMPLEMENT       reduce using rule 2 (opt_module -> module_decl .)
    FN              reduce using rule 2 (opt_module -> module_decl .)
    IMPORT          reduce using rule 2 (opt_module -> module_decl .)
    PYTHON          reduce using rule 2 (opt_module -> module_decl .)
    PYFN            reduce using rule 2 (opt_module -> module_decl .)
    PYTYPE          reduce using rule 2 (opt_module -> module_decl .)


state 4

    (3) opt_module -> empty .

    CLASS           reduce using rule 3 (opt_module -> empty .)
    STRUCT          reduce using rule 3 (opt_module -> empty .)
    ENUM            reduce using rule 3 (opt_module -> empty .)
    JOIN            reduce using rule 3 (opt_module -> empty .)
    IMPLEMENT       reduce using rule 3 (opt_module -> empty .)
    FN              reduce using rule 3 (opt_module -> empty .)
    IMPORT          reduce using rule 3 (opt_module -> empty .)
    PYTHON          reduce using rule 3 (opt_module -> empty .)
    PYFN            reduce using rule 3 (opt_module -> empty .)
    PYTYPE          reduce using rule 3 (opt_module -> empty .)


state 5

    (16) module_decl -> MODULE . IDENT SEMI

    IDENT           shift and go to state 28


state 6

    (1) program -> opt_module decl_list .
    (4) decl_list -> decl_list . decl
    (6) decl -> . class_def
    (7) decl -> . struct_def
    (8) decl -> . enum_def
    (9) decl -> . join_def
    (10) decl -> . implement_decl
    (11) decl -> . function
    (12) decl -> . import_decl
    (13) decl -> . python_import
    (14) decl -> . pyfn_decl
    (15) decl -> . pytype_decl
    (34) class_def -> . CLASS IDENT LBRACE class_body RBRACE
    (17) struct_def -> . STRUCT IDENT LBRACE field_decl_list RBRACE
    (18) enum_def -> . ENUM IDENT LBRACE enum_variant_list RBRACE
    (19) join_def -> . JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
    (114) implement_decl -> . IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block
    (119) import_decl -> . IMPORT STRING SEMI
    (125) python_import -> . PYTHON IMPORT IDENT SEMI
    (126) pyfn_decl -> . PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block
    (128) pytype_decl -> . PYTYPE IDENT EQUAL CODE_STRING SEMI

    $end            reduce using rule 1 (program -> opt_module decl_list .)
    CLASS           shift and go to state 18
    STRUCT          shift and go to state 19
    ENUM            shift and go to state 20
    JOIN            shift and go to state 21
    IMPLEMENT       shift and go to state 22
    FN              shift and go to state 23
    IMPORT          shift and go to state 24
    PYTHON          shift and go to state 25
    PYFN            shift and go to state 26
    PYTYPE          shift and go to state 27

    decl                           shift and go to state 29
    class_def                      shift and go to state 8
    struct_def                     shift and go to state 9
    enum_def                       shift and go to state 10
    join_def                       shift and go to state 11
    implement_decl                 shift and go to state 12
    function                       shift and go to state 13
    import_decl                    shift and go to state 14
    python_import                  shift and go to state 15
    pyfn_decl                      shift and go to state 16
    pytype_decl                    shift and go to state 17

state 7

    (5) decl_list -> decl .

    CLASS           reduce using rule 5 (decl_list -> decl .)
    STRUCT          reduce using rule 5 (decl_list -> decl .)
    ENUM            reduce using rule 5 (decl_list -> decl .)
    JOIN            reduce using rule 5 (decl_list -> decl .)
    IMPLEMENT       reduce using rule 5 (decl_list -> decl .)
    FN              reduce using rule 5 (decl_list -> decl .)
    IMPORT          reduce using rule 5 (decl_list -> decl .)
    PYTHON          reduce using rule 5 (decl_list -> decl .)
    PYFN            reduce using rule 5 (decl_list -> decl .)
    PYTYPE          reduce using rule 5 (decl_list -> decl .)
    $end            reduce using rule 5 (decl_list -> decl .)


state 8

    (6) decl -> class_def .

    CLASS           reduce using rule 6 (decl -> class_def .)
    STRUCT          reduce using rule 6 (decl -> class_def .)
    ENUM            reduce using rule 6 (decl -> class_def .)
    JOIN            reduce using rule 6 (decl -> class_def .)
    IMPLEMENT       reduce using rule 6 (decl -> class_def .)
    FN              reduce using rule 6 (decl -> class_def .)
    IMPORT          reduce using rule 6 (decl -> class_def .)
    PYTHON          reduce using rule 6 (decl -> class_def .)
    PYFN            reduce using rule 6 (decl -> class_def .)
    PYTYPE          reduce using rule 6 (decl -> class_def .)
    $end            reduce using rule 6 (decl -> class_def .)


state 9

    (7) decl -> struct_def .

    CLASS           reduce using rule 7 (decl -> struct_def .)
    STRUCT          reduce using rule 7 (decl -> struct_def .)
    ENUM            reduce using rule 7 (decl -> struct_def .)
    JOIN            reduce using rule 7 (decl -> struct_def .)
    IMPLEMENT       reduce using rule 7 (decl -> struct_def .)
    FN              reduce using rule 7 (decl -> struct_def .)
    IMPORT          reduce using rule 7 (decl -> struct_def .)
    PYTHON          reduce using rule 7 (decl -> struct_def .)
    PYFN            reduce using rule 7 (decl -> struct_def .)
    PYTYPE          reduce using rule 7 (decl -> struct_def .)
    $end            reduce using rule 7 (decl -> struct_def .)


state 10

    (8) decl -> enum_def .

    CLASS           reduce using rule 8 (decl -> enum_def .)
    STRUCT          reduce using rule 8 (decl -> enum_def .)
    ENUM            reduce using rule 8 (decl -> enum_def .)
    JOIN            reduce using rule 8 (decl -> enum_def .)
    IMPLEMENT       reduce using rule 8 (decl -> enum_def .)
    FN              reduce using rule 8 (decl -> enum_def .)
    IMPORT          reduce using rule 8 (decl -> enum_def .)
    PYTHON          reduce using rule 8 (decl -> enum_def .)
    PYFN            reduce using rule 8 (decl -> enum_def .)
    PYTYPE          reduce using rule 8 (decl -> enum_def .)
    $end            reduce using rule 8 (decl -> enum_def .)


state 11

    (9) decl -> join_def .

    CLASS           reduce using rule 9 (decl -> join_def .)
    STRUCT          reduce using rule 9 (decl -> join_def .)
    ENUM            reduce using rule 9 (decl -> join_def .)
    JOIN            reduce using rule 9 (decl -> join_def .)
    IMPLEMENT       reduce using rule 9 (decl -> join_def .)
    FN              reduce using rule 9 (decl -> join_def .)
    IMPORT          reduce using rule 9 (decl -> join_def .)
    PYTHON          reduce using rule 9 (decl -> join_def .)
    PYFN            reduce using rule 9 (decl -> join_def .)
    PYTYPE          reduce using rule 9 (decl -> join_def .)
    $end            reduce using rule 9 (decl -> join_def .)


state 12

    (10) decl -> implement_decl .

    CLASS           reduce using rule 10 (decl -> implement_decl .)
    STRUCT          reduce using rule 10 (decl -> implement_decl .)
    ENUM            reduce using rule 10 (decl -> implement_decl .)
    JOIN            reduce using rule 10 (decl -> implement_decl .)
    IMPLEMENT       reduce using rule 10 (decl -> implement_decl .)
    FN              reduce using rule 10 (decl -> implement_decl .)
    IMPORT          reduce using rule 10 (decl -> implement_decl .)
    PYTHON          reduce using rule 10 (decl -> implement_decl .)
    PYFN            reduce using rule 10 (decl -> implement_decl .)
    PYTYPE          reduce using rule 10 (decl -> implement_decl .)
    $end            reduce using rule 10 (decl -> implement_decl .)


state 13

    (11) decl -> function .

    CLASS           reduce using rule 11 (decl -> function .)
    STRUCT          reduce using rule 11 (decl -> function .)
    ENUM            reduce using rule 11 (decl -> function .)
    JOIN            reduce using rule 11 (decl -> function .)
    IMPLEMENT       reduce using rule 11 (decl -> function .)
    FN              reduce using rule 11 (decl -> function .)
    IMPORT          reduce using rule 11 (decl -> function .)
    PYTHON          reduce using rule 11 (decl -> function .)
    PYFN            reduce using rule 11 (decl -> function .)
    PYTYPE          reduce using rule 11 (decl -> function .)
    $end            reduce using rule 11 (decl -> function .)


state 14

    (12) decl -> import_decl .

    CLASS           reduce using rule 12 (decl -> import_decl .)
    STRUCT          reduce using rule 12 (decl -> import_decl .)
    ENUM            reduce using rule 12 (decl -> import_decl .)
    JOIN            reduce using rule 12 (decl -> import_decl .)
    IMPLEMENT       reduce using rule 12 (decl -> import_decl .)
    FN              reduce using rule 12 (decl -> import_decl .)
    IMPORT          reduce using rule 12 (decl -> import_decl .)
    PYTHON          reduce using rule 12 (decl -> import_decl .)
    PYFN            reduce using rule 12 (decl -> import_decl .)
    PYTYPE          reduce using rule 12 (decl -> import_decl .)
    $end            reduce using rule 12 (decl -> import_decl .)


state 15

    (13) decl -> python_import .

    CLASS           reduce using rule 13 (decl -> python_import .)
    STRUCT          reduce using rule 13 (decl -> python_import .)
    ENUM            reduce using rule 13 (decl -> python_import .)
    JOIN            reduce using rule 13 (decl -> python_import .)
    IMPLEMENT       reduce using rule 13 (decl -> python_import .)
    FN              reduce using rule 13 (decl -> python_import .)
    IMPORT          reduce using rule 13 (decl -> python_import .)
    PYTHON          reduce using rule 13 (decl -> python_import .)
    PYFN            reduce using rule 13 (decl -> python_import .)
    PYTYPE          reduce using rule 13 (decl -> python_import .)
    $end            reduce using rule 13 (decl -> python_import .)


state 16

    (14) decl -> pyfn_decl .

    CLASS           reduce using rule 14 (decl -> pyfn_decl .)
    STRUCT          reduce using rule 14 (decl -> pyfn_decl .)
    ENUM            reduce using rule 14 (decl -> pyfn_decl .)
    JOIN            reduce using rule 14 (decl -> pyfn_decl .)
    IMPLEMENT       reduce using rule 14 (decl -> pyfn_decl .)
    FN              reduce using rule 14 (decl -> pyfn_decl .)
    IMPORT          reduce using rule 14 (decl -> pyfn_decl .)
    PYTHON          reduce using rule 14 (decl -> pyfn_decl .)
    PYFN            reduce using rule 14 (decl -> pyfn_decl .)
    PYTYPE          reduce using rule 14 (decl -> pyfn_decl .)
    $end            reduce using rule 14 (decl -> pyfn_decl .)


state 17

    (15) decl -> pytype_decl .

    CLASS           reduce using rule 15 (decl -> pytype_decl .)
    STRUCT          reduce using rule 15 (decl -> pytype_decl .)
    ENUM            reduce using rule 15 (decl -> pytype_decl .)
    JOIN            reduce using rule 15 (decl -> pytype_decl .)
    IMPLEMENT       reduce using rule 15 (decl -> pytype_decl .)
    FN              reduce using rule 15 (decl -> pytype_decl .)
    IMPORT          reduce using rule 15 (decl -> pytype_decl .)
    PYTHON          reduce using rule 15 (decl -> pytype_decl .)
    PYFN            reduce using rule 15 (decl -> pytype_decl .)
    PYTYPE          reduce using rule 15 (decl -> pytype_decl .)
    $end            reduce using rule 15 (decl -> pytype_decl .)


state 18

    (34) class_def -> CLASS . IDENT LBRACE class_body RBRACE

    IDENT           shift and go to state 30


state 19

    (17) struct_def -> STRUCT . IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 31


state 20

    (18) enum_def -> ENUM . IDENT LBRACE enum_variant_list RBRACE

    IDENT           shift and go to state 32


state 21

    (19) join_def -> JOIN . IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 33


state 22

    (114) implement_decl -> IMPLEMENT . IDENT USES IDENT LBRACE method_list RBRACE

    IDENT           shift and go to state 34


state 23

    (40) function -> FN . IDENT LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 35


state 24

    (119) import_decl -> IMPORT . STRING SEMI

    STRING          shift and go to state 36


state 25

    (125) python_import -> PYTHON . IMPORT IDENT SEMI

    IMPORT          shift and go to state 37


state 26

    (126) pyfn_decl -> PYFN . IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block

    IDENT           shift and go to state 38


state 27

    (128) pytype_decl -> PYTYPE . IDENT EQUAL CODE_STRING SEMI

    IDENT           shift and go to state 39


state 28

    (16) module_decl -> MODULE IDENT . SEMI

    SEMI            shift and go to state 40


state 29

    (4) decl_list -> decl_list decl .

    CLASS           reduce using rule 4 (decl_list -> decl_list decl .)
    STRUCT          reduce using rule 4 (decl_list -> decl_list decl .)
    ENUM            reduce using rule 4 (decl_list -> decl_list decl .)
    JOIN            reduce using rule 4 (decl_list -> decl_list decl .)
    IMPLEMENT       reduce using rule 4 (decl_list -> decl_list decl .)
    FN              reduce using rule 4 (decl_list -> decl_list decl .)
    IMPORT          reduce using rule 4 (decl_list -> decl_list decl .)
    PYTHON          reduce using rule 4 (decl_list -> decl_list decl .)
    PYFN            reduce using rule 4 (decl_list -> decl_list decl .)
    PYTYPE          reduce using rule 4 (decl_list -> decl_list decl .)
    $end            reduce using rule 4 (decl_list -> decl_list decl .)


state 30

    (34) class_def -> CLASS IDENT . LBRACE class_body RBRACE

    LBRACE          shift and go to state 41


state 31

    (17) struct_def -> STRUCT IDENT . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 42


state 32

    (18) enum_def -> ENUM IDENT . LBRACE enum_variant_list RBRACE

    LBRACE          shift and go to state 43


state 33

    (19) join_def -> JOIN IDENT . AND IDENT AS IDENT LBRACE field_decl_list RBRACE

    AND             shift and go to state 44


state 34

    (114) implement_decl -> IMPLEMENT IDENT . USES IDENT LBRACE method_list RBRACE

    USES            shift and go to state 45


state 35

    (40) function -> FN IDENT . LPAREN parameters_opt RPAREN return_opt block

    LPAREN          shift and go to state 46


state 36

    (119) import_decl -> IMPORT STRING . SEMI

    SEMI            shift and go to state 47


state 37

    (125) python_import -> PYTHON IMPORT . IDENT SEMI

    IDENT           shift and go to state 48


state 38

    (126) pyfn_decl -> PYFN IDENT . LPAREN parameters_opt RPAREN ARROW type_expr code_block

    LPAREN          shift and go to state 49


state 39

    (128) pytype_decl -> PYTYPE IDENT . EQUAL CODE_STRING SEMI

    EQUAL           shift and go to state 50


state 40

    (16) module_decl -> MODULE IDENT SEMI .

    CLASS           reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    STRUCT          reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    ENUM            reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    JOIN            reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    IMPLEMENT       reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    FN              reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    IMPORT          reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    PYTHON          reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    PYFN            reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    PYTYPE          reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)


state 41

    (34) class_def -> CLASS IDENT LBRACE . class_body RBRACE
    (35) class_body -> . class_body class_member
    (36) class_body -> . class_member
    (37) class_member -> . PUBLIC IDENT COLON type_expr SEMI
    (38) class_member -> . LET IDENT COLON type_expr SEMI
    (39) class_member -> . function
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    PUBLIC          shift and go to state 53
    LET             shift and go to state 54
    FN              shift and go to state 23

    class_body                     shift and go to state 51
    class_member                   shift and go to state 52
    function                       shift and go to state 55

state 42

    (17) struct_def -> STRUCT IDENT LBRACE . field_decl_list RBRACE
    (20) field_decl_list -> . field_decl_list field_decl
    (21) field_decl_list -> . field_decl
    (22) field_decl_list -> . empty
    (23) field_decl -> . IDENT COLON type_expr opt_comma
    (109) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 56
    RBRACE          reduce using rule 109 (empty -> .)

  ! IDENT           [ reduce using rule 109 (empty -> .) ]

    field_decl_list                shift and go to state 57
    field_decl                     shift and go to state 58
    empty                          shift and go to state 59

state 43

    (18) enum_def -> ENUM IDENT LBRACE . enum_variant_list RBRACE
    (24) enum_variant_list -> . enum_variant_list COMMA IDENT
    (25) enum_variant_list -> . IDENT
    (26) enum_variant_list -> . empty
    (109) empty -> .

    IDENT           shift and go to state 60
    RBRACE          reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)

    enum_variant_list              shift and go to state 61
    empty                          shift and go to state 62

state 44

    (19) join_def -> JOIN IDENT AND . IDENT AS IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 63


state 45

    (114) implement_decl -> IMPLEMENT IDENT USES . IDENT LBRACE method_list RBRACE

    IDENT           shift and go to state 64


state 46

    (40) function -> FN IDENT LPAREN . parameters_opt RPAREN return_opt block
    (41) parameters_opt -> . parameters
    (42) parameters_opt -> . empty
    (43) parameters -> . parameters COMMA parameter
    (44) parameters -> . parameter
    (109) empty -> .
    (45) parameter -> . IDENT COLON type_expr

    RPAREN          reduce using rule 109 (empty -> .)
    IDENT           shift and go to state 65

    parameters_opt                 shift and go to state 66
    parameters                     shift and go to state 67
    empty                          shift and go to state 68
    parameter                      shift and go to state 69

state 47

    (119) import_decl -> IMPORT STRING SEMI .

    CLASS           reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    STRUCT          reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    ENUM            reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    JOIN            reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    IMPLEMENT       reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    FN              reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    IMPORT          reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    PYTHON          reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    PYFN            reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    PYTYPE          reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)
    $end            reduce using rule 119 (import_decl -> IMPORT STRING SEMI .)


state 48

    (125) python_import -> PYTHON IMPORT IDENT . SEMI

    SEMI            shift and go to state 70


state 49

    (126) pyfn_decl -> PYFN IDENT LPAREN . parameters_opt RPAREN ARROW type_expr code_block
    (41) parameters_opt -> . parameters
    (42) parameters_opt -> . empty
    (43) parameters -> . parameters COMMA parameter
    (44) parameters -> . parameter
    (109) empty -> .
    (45) parameter -> . IDENT COLON type_expr

    RPAREN          reduce using rule 109 (empty -> .)
    IDENT           shift and go to state 65

    parameters_opt                 shift and go to state 71
    parameters                     shift and go to state 67
    empty                          shift and go to state 68
    parameter                      shift and go to state 69

state 50

    (128) pytype_decl -> PYTYPE IDENT EQUAL . CODE_STRING SEMI

    CODE_STRING     shift and go to state 72


state 51

    (34) class_def -> CLASS IDENT LBRACE class_body . RBRACE
    (35) class_body -> class_body . class_member
    (37) class_member -> . PUBLIC IDENT COLON type_expr SEMI
    (38) class_member -> . LET IDENT COLON type_expr SEMI
    (39) class_member -> . function
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 73
    PUBLIC          shift and go to state 53
    LET             shift and go to state 54
    FN              shift and go to state 23

    class_member                   shift and go to state 74
    function                       shift and go to state 55

state 52

    (36) class_body -> class_member .

    RBRACE          reduce using rule 36 (class_body -> class_member .)
    PUBLIC          reduce using rule 36 (class_body -> class_member .)
    LET             reduce using rule 36 (class_body -> class_member .)
    FN              reduce using rule 36 (class_body -> class_member .)


state 53

    (37) class_member -> PUBLIC . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 75


state 54

    (38) class_member -> LET . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 76


state 55

    (39) class_member -> function .

    RBRACE          reduce using rule 39 (class_member -> function .)
    PUBLIC          reduce using rule 39 (class_member -> function .)
    LET             reduce using rule 39 (class_member -> function .)
    FN              reduce using rule 39 (class_member -> function .)


state 56

    (23) field_decl -> IDENT . COLON type_expr opt_comma

    COLON           shift and go to state 77


state 57

    (17) struct_def -> STRUCT IDENT LBRACE field_decl_list . RBRACE
    (20) field_decl_list -> field_decl_list . field_decl
    (23) field_decl -> . IDENT COLON type_expr opt_comma

    RBRACE          shift and go to state 78
    IDENT           shift and go to state 56

    field_decl                     shift and go to state 79

state 58

    (21) field_decl_list -> field_decl .

    RBRACE          reduce using rule 21 (field_decl_list -> field_decl .)
    IDENT           reduce using rule 21 (field_decl_list -> field_decl .)


state 59

    (22) field_decl_list -> empty .

    RBRACE          reduce using rule 22 (field_decl_list -> empty .)
    IDENT           reduce using rule 22 (field_decl_list -> empty .)


state 60

    (25) enum_variant_list -> IDENT .

    RBRACE          reduce using rule 25 (enum_variant_list -> IDENT .)
    COMMA           reduce using rule 25 (enum_variant_list -> IDENT .)


state 61

    (18) enum_def -> ENUM IDENT LBRACE enum_variant_list . RBRACE
    (24) enum_variant_list -> enum_variant_list . COMMA IDENT

    RBRACE          shift and go to state 80
    COMMA           shift and go to state 81


state 62

    (26) enum_variant_list -> empty .

    RBRACE          reduce using rule 26 (enum_variant_list -> empty .)
    COMMA           reduce using rule 26 (enum_variant_list -> empty .)


state 63

    (19) join_def -> JOIN IDENT AND IDENT . AS IDENT LBRACE field_decl_list RBRACE

    AS              shift and go to state 82


state 64

    (114) implement_decl -> IMPLEMENT IDENT USES IDENT . LBRACE method_list RBRACE

    LBRACE          shift and go to state 83


state 65

    (45) parameter -> IDENT . COLON type_expr

    COLON           shift and go to state 84


state 66

    (40) function -> FN IDENT LPAREN parameters_opt . RPAREN return_opt block

    RPAREN          shift and go to state 85


state 67

    (41) parameters_opt -> parameters .
    (43) parameters -> parameters . COMMA parameter

    RPAREN          reduce using rule 41 (parameters_opt -> parameters .)
    COMMA           shift and go to state 86


state 68

    (42) parameters_opt -> empty .

    RPAREN          reduce using rule 42 (parameters_opt -> empty .)


state 69

    (44) parameters -> parameter .

    COMMA           reduce using rule 44 (parameters -> parameter .)
    RPAREN          reduce using rule 44 (parameters -> parameter .)


state 70

    (125) python_import -> PYTHON IMPORT IDENT SEMI .

    CLASS           reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    STRUCT          reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    ENUM            reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    JOIN            reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    IMPLEMENT       reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    FN              reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    IMPORT          reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    PYTHON          reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    PYFN            reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    PYTYPE          reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)
    $end            reduce using rule 125 (python_import -> PYTHON IMPORT IDENT SEMI .)


state 71

    (126) pyfn_decl -> PYFN IDENT LPAREN parameters_opt . RPAREN ARROW type_expr code_block

    RPAREN          shift and go to state 87


state 72

    (128) pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING . SEMI

    SEMI            shift and go to state 88


state 73

    (34) class_def -> CLASS IDENT LBRACE class_body RBRACE .

    CLASS           reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    STRUCT          reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    ENUM            reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    JOIN            reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    IMPLEMENT       reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    FN              reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    IMPORT          reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    PYTHON          reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    PYFN            reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    PYTYPE          reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    $end            reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)


state 74

    (35) class_body -> class_body class_member .

    RBRACE          reduce using rule 35 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 35 (class_body -> class_body class_member .)
    LET             reduce using rule 35 (class_body -> class_body class_member .)
    FN              reduce using rule 35 (class_body -> class_body class_member .)


state 75

    (37) class_member -> PUBLIC IDENT . COLON type_expr SEMI

    COLON           shift and go to state 89


state 76

    (38) class_member -> LET IDENT . COLON type_expr SEMI

    COLON           shift and go to state 90


state 77

    (23) field_decl -> IDENT COLON . type_expr opt_comma
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 92
    simple_type_expr               shift and go to state 93

state 78

    (17) struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .

    CLASS           reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    STRUCT          reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    ENUM            reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    JOIN            reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    IMPLEMENT       reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    FN              reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    IMPORT          reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    PYTHON          reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    PYFN            reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    PYTYPE          reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    $end            reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)


state 79

    (20) field_decl_list -> field_decl_list field_decl .

    RBRACE          reduce using rule 20 (field_decl_list -> field_decl_list field_decl .)
    IDENT           reduce using rule 20 (field_decl_list -> field_decl_list field_decl .)


state 80

    (18) enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .

    CLASS           reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    STRUCT          reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    ENUM            reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    JOIN            reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    IMPLEMENT       reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    FN              reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    IMPORT          reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    PYTHON          reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    PYFN            reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    PYTYPE          reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    $end            reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)


state 81

    (24) enum_variant_list -> enum_variant_list COMMA . IDENT

    IDENT           shift and go to state 94


state 82

    (19) join_def -> JOIN IDENT AND IDENT AS . IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 95


state 83

    (114) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE . method_list RBRACE
    (115) method_list -> . method_list function
    (116) method_list -> . function
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    FN              shift and go to state 23

    method_list                    shift and go to state 96
    function                       shift and go to state 97

state 84

    (45) parameter -> IDENT COLON . type_expr
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 98
    simple_type_expr               shift and go to state 93

state 85

    (40) function -> FN IDENT LPAREN parameters_opt RPAREN . return_opt block
    (46) return_opt -> . ARROW type_expr
    (47) return_opt -> . empty
    (109) empty -> .

    ARROW           shift and go to state 100
    LBRACE          reduce using rule 109 (empty -> .)

    return_opt                     shift and go to state 99
    empty                          shift and go to state 101

state 86

    (43) parameters -> parameters COMMA . parameter
    (45) parameter -> . IDENT COLON type_expr

    IDENT           shift and go to state 65

    parameter                      shift and go to state 102

state 87

    (126) pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN . ARROW type_expr code_block

    ARROW           shift and go to state 103


state 88

    (128) pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .

    CLASS           reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    STRUCT          reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    ENUM            reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    JOIN            reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    IMPLEMENT       reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    FN              reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    IMPORT          reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    PYTHON          reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    PYFN            reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    PYTYPE          reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    $end            reduce using rule 128 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)


state 89

    (37) class_member -> PUBLIC IDENT COLON . type_expr SEMI
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 104
    simple_type_expr               shift and go to state 93

state 90

    (38) class_member -> LET IDENT COLON . type_expr SEMI
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 105
    simple_type_expr               shift and go to state 93

state 91

    (49) simple_type_expr -> IDENT . type_access_opt
    (52) type_access_opt -> . type_access_opt_part
    (53) type_access_opt -> . empty
    (54) type_access_opt_part -> . DOT IDENT
    (55) type_access_opt_part -> . DDCOLON IDENT
    (109) empty -> .

    DOT             shift and go to state 109
    DDCOLON         shift and go to state 110
    LBRACKET        reduce using rule 109 (empty -> .)
    COMMA           reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    IDENT           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    SEMI            reduce using rule 109 (empty -> .)
    LBRACE          reduce using rule 109 (empty -> .)
    EQUAL           reduce using rule 109 (empty -> .)
    IN              reduce using rule 109 (empty -> .)

    type_access_opt                shift and go to state 106
    type_access_opt_part           shift and go to state 107
    empty                          shift and go to state 108

state 92

    (23) field_decl -> IDENT COLON type_expr . opt_comma
    (32) opt_comma -> . COMMA
    (33) opt_comma -> . empty
    (109) empty -> .

    COMMA           shift and go to state 112
    RBRACE          reduce using rule 109 (empty -> .)
    IDENT           reduce using rule 109 (empty -> .)

    opt_comma                      shift and go to state 111
    empty                          shift and go to state 113

state 93

    (48) type_expr -> simple_type_expr . array_spec_opt
    (50) array_spec_opt -> . LBRACKET NUMBER RBRACKET
    (51) array_spec_opt -> . empty
    (109) empty -> .

    LBRACKET        shift and go to state 115
    COMMA           reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    IDENT           reduce using rule 109 (empty -> .)
    RPAREN          reduce using rule 109 (empty -> .)
    SEMI            reduce using rule 109 (empty -> .)
    LBRACE          reduce using rule 109 (empty -> .)
    EQUAL           reduce using rule 109 (empty -> .)
    IN              reduce using rule 109 (empty -> .)

    array_spec_opt                 shift and go to state 114
    empty                          shift and go to state 116

state 94

    (24) enum_variant_list -> enum_variant_list COMMA IDENT .

    RBRACE          reduce using rule 24 (enum_variant_list -> enum_variant_list COMMA IDENT .)
    COMMA           reduce using rule 24 (enum_variant_list -> enum_variant_list COMMA IDENT .)


state 95

    (19) join_def -> JOIN IDENT AND IDENT AS IDENT . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 117


state 96

    (114) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list . RBRACE
    (115) method_list -> method_list . function
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 118
    FN              shift and go to state 23

    function                       shift and go to state 119

state 97

    (116) method_list -> function .

    RBRACE          reduce using rule 116 (method_list -> function .)
    FN              reduce using rule 116 (method_list -> function .)


state 98

    (45) parameter -> IDENT COLON type_expr .

    COMMA           reduce using rule 45 (parameter -> IDENT COLON type_expr .)
    RPAREN          reduce using rule 45 (parameter -> IDENT COLON type_expr .)


state 99

    (40) function -> FN IDENT LPAREN parameters_opt RPAREN return_opt . block
    (56) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 121

    block                          shift and go to state 120

state 100

    (46) return_opt -> ARROW . type_expr
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 122
    simple_type_expr               shift and go to state 93

state 101

    (47) return_opt -> empty .

    LBRACE          reduce using rule 47 (return_opt -> empty .)


state 102

    (43) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 43 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 43 (parameters -> parameters COMMA parameter .)


state 103

    (126) pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW . type_expr code_block
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 123
    simple_type_expr               shift and go to state 93

state 104

    (37) class_member -> PUBLIC IDENT COLON type_expr . SEMI

    SEMI            shift and go to state 124


state 105

    (38) class_member -> LET IDENT COLON type_expr . SEMI

    SEMI            shift and go to state 125


state 106

    (49) simple_type_expr -> IDENT type_access_opt .

    LBRACKET        reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    COMMA           reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    RBRACE          reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    IDENT           reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    RPAREN          reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    SEMI            reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    LBRACE          reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    EQUAL           reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    IN              reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)


state 107

    (52) type_access_opt -> type_access_opt_part .

    LBRACKET        reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    COMMA           reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    RBRACE          reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    IDENT           reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    RPAREN          reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    SEMI            reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    LBRACE          reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    EQUAL           reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    IN              reduce using rule 52 (type_access_opt -> type_access_opt_part .)


state 108

    (53) type_access_opt -> empty .

    LBRACKET        reduce using rule 53 (type_access_opt -> empty .)
    COMMA           reduce using rule 53 (type_access_opt -> empty .)
    RBRACE          reduce using rule 53 (type_access_opt -> empty .)
    IDENT           reduce using rule 53 (type_access_opt -> empty .)
    RPAREN          reduce using rule 53 (type_access_opt -> empty .)
    SEMI            reduce using rule 53 (type_access_opt -> empty .)
    LBRACE          reduce using rule 53 (type_access_opt -> empty .)
    EQUAL           reduce using rule 53 (type_access_opt -> empty .)
    IN              reduce using rule 53 (type_access_opt -> empty .)


state 109

    (54) type_access_opt_part -> DOT . IDENT

    IDENT           shift and go to state 126


state 110

    (55) type_access_opt_part -> DDCOLON . IDENT

    IDENT           shift and go to state 127


state 111

    (23) field_decl -> IDENT COLON type_expr opt_comma .

    RBRACE          reduce using rule 23 (field_decl -> IDENT COLON type_expr opt_comma .)
    IDENT           reduce using rule 23 (field_decl -> IDENT COLON type_expr opt_comma .)


state 112

    (32) opt_comma -> COMMA .

    RBRACE          reduce using rule 32 (opt_comma -> COMMA .)
    IDENT           reduce using rule 32 (opt_comma -> COMMA .)


state 113

    (33) opt_comma -> empty .

    RBRACE          reduce using rule 33 (opt_comma -> empty .)
    IDENT           reduce using rule 33 (opt_comma -> empty .)


state 114

    (48) type_expr -> simple_type_expr array_spec_opt .

    COMMA           reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    RBRACE          reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    IDENT           reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    RPAREN          reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    SEMI            reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    LBRACE          reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    EQUAL           reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    IN              reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)


state 115

    (50) array_spec_opt -> LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 128


state 116

    (51) array_spec_opt -> empty .

    COMMA           reduce using rule 51 (array_spec_opt -> empty .)
    RBRACE          reduce using rule 51 (array_spec_opt -> empty .)
    IDENT           reduce using rule 51 (array_spec_opt -> empty .)
    RPAREN          reduce using rule 51 (array_spec_opt -> empty .)
    SEMI            reduce using rule 51 (array_spec_opt -> empty .)
    LBRACE          reduce using rule 51 (array_spec_opt -> empty .)
    EQUAL           reduce using rule 51 (array_spec_opt -> empty .)
    IN              reduce using rule 51 (array_spec_opt -> empty .)


state 117

    (19) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE . field_decl_list RBRACE
    (20) field_decl_list -> . field_decl_list field_decl
    (21) field_decl_list -> . field_decl
    (22) field_decl_list -> . empty
    (23) field_decl -> . IDENT COLON type_expr opt_comma
    (109) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 56
    RBRACE          reduce using rule 109 (empty -> .)

  ! IDENT           [ reduce using rule 109 (empty -> .) ]

    field_decl_list                shift and go to state 129
    field_decl                     shift and go to state 58
    empty                          shift and go to state 59

state 118

    (114) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .

    CLASS           reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    STRUCT          reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    ENUM            reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    JOIN            reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    IMPLEMENT       reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    FN              reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    IMPORT          reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    PYTHON          reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    PYFN            reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    PYTYPE          reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    $end            reduce using rule 114 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)


state 119

    (115) method_list -> method_list function .

    RBRACE          reduce using rule 115 (method_list -> method_list function .)
    FN              reduce using rule 115 (method_list -> method_list function .)


state 120

    (40) function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .

    CLASS           reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    STRUCT          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    ENUM            reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    JOIN            reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    IMPLEMENT       reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    FN              reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    IMPORT          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PYTHON          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PYFN            reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PYTYPE          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    $end            reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    RBRACE          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PUBLIC          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    LET             reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)


state 121

    (56) block -> LBRACE . statement_list RBRACE
    (57) statement_list -> . statement_list statement
    (58) statement_list -> . empty
    (109) empty -> .

    RBRACE          reduce using rule 109 (empty -> .)
    LET             reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    MINUS           reduce using rule 109 (empty -> .)
    IDENT           reduce using rule 109 (empty -> .)
    LPAREN          reduce using rule 109 (empty -> .)
    LBRACKET        reduce using rule 109 (empty -> .)
    NUMBER          reduce using rule 109 (empty -> .)
    STRING          reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    NEW             reduce using rule 109 (empty -> .)
    FN              reduce using rule 109 (empty -> .)

    statement_list                 shift and go to state 130
    empty                          shift and go to state 131

state 122

    (46) return_opt -> ARROW type_expr .

    LBRACE          reduce using rule 46 (return_opt -> ARROW type_expr .)


state 123

    (126) pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr . code_block
    (127) code_block -> . LBRACE CODE_STRING RBRACE

    LBRACE          shift and go to state 133

    code_block                     shift and go to state 132

state 124

    (37) class_member -> PUBLIC IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 37 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    PUBLIC          reduce using rule 37 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    LET             reduce using rule 37 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    FN              reduce using rule 37 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)


state 125

    (38) class_member -> LET IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 38 (class_member -> LET IDENT COLON type_expr SEMI .)
    PUBLIC          reduce using rule 38 (class_member -> LET IDENT COLON type_expr SEMI .)
    LET             reduce using rule 38 (class_member -> LET IDENT COLON type_expr SEMI .)
    FN              reduce using rule 38 (class_member -> LET IDENT COLON type_expr SEMI .)


state 126

    (54) type_access_opt_part -> DOT IDENT .

    LBRACKET        reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    COMMA           reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    RBRACE          reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    IDENT           reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    RPAREN          reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    SEMI            reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    LBRACE          reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    EQUAL           reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    IN              reduce using rule 54 (type_access_opt_part -> DOT IDENT .)


state 127

    (55) type_access_opt_part -> DDCOLON IDENT .

    LBRACKET        reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    COMMA           reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    RBRACE          reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    IDENT           reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    RPAREN          reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    SEMI            reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    LBRACE          reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    EQUAL           reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    IN              reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)


state 128

    (50) array_spec_opt -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 134


state 129

    (19) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list . RBRACE
    (20) field_decl_list -> field_decl_list . field_decl
    (23) field_decl -> . IDENT COLON type_expr opt_comma

    RBRACE          shift and go to state 135
    IDENT           shift and go to state 56

    field_decl                     shift and go to state 79

state 130

    (56) block -> LBRACE statement_list . RBRACE
    (57) statement_list -> statement_list . statement
    (59) statement -> . var_decl
    (60) statement -> . assignment_statement
    (61) statement -> . return_statement
    (62) statement -> . expr_statement
    (63) statement -> . if_statement
    (64) statement -> . while_stmt
    (65) statement -> . for_stmt
    (66) var_decl -> . LET IDENT COLON type_expr EQUAL expression SEMI
    (67) var_decl -> . LET IDENT COLON type_expr SEMI
    (117) assignment_statement -> . assignment SEMI
    (68) return_statement -> . RETURN expression SEMI
    (69) expr_statement -> . expression SEMI
    (110) if_statement -> . IF expression block else_clause_opt
    (123) while_stmt -> . WHILE expression block
    (124) for_stmt -> . FOR IDENT COLON type_expr IN expression block
    (118) assignment -> . call_expr EQUAL expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 136
    LET             shift and go to state 145
    RETURN          shift and go to state 149
    IF              shift and go to state 150
    WHILE           shift and go to state 151
    FOR             shift and go to state 152
    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    statement                      shift and go to state 137
    var_decl                       shift and go to state 138
    assignment_statement           shift and go to state 139
    return_statement               shift and go to state 140
    expr_statement                 shift and go to state 141
    if_statement                   shift and go to state 142
    while_stmt                     shift and go to state 143
    for_stmt                       shift and go to state 144
    expression                     shift and go to state 147
    assignment                     shift and go to state 148
    call_expr                      shift and go to state 153
    primary                        shift and go to state 155

state 131

    (58) statement_list -> empty .

    RBRACE          reduce using rule 58 (statement_list -> empty .)
    LET             reduce using rule 58 (statement_list -> empty .)
    RETURN          reduce using rule 58 (statement_list -> empty .)
    IF              reduce using rule 58 (statement_list -> empty .)
    WHILE           reduce using rule 58 (statement_list -> empty .)
    FOR             reduce using rule 58 (statement_list -> empty .)
    MINUS           reduce using rule 58 (statement_list -> empty .)
    IDENT           reduce using rule 58 (statement_list -> empty .)
    LPAREN          reduce using rule 58 (statement_list -> empty .)
    LBRACKET        reduce using rule 58 (statement_list -> empty .)
    NUMBER          reduce using rule 58 (statement_list -> empty .)
    STRING          reduce using rule 58 (statement_list -> empty .)
    TRUE            reduce using rule 58 (statement_list -> empty .)
    FALSE           reduce using rule 58 (statement_list -> empty .)
    NEW             reduce using rule 58 (statement_list -> empty .)
    FN              reduce using rule 58 (statement_list -> empty .)


state 132

    (126) pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .

    CLASS           reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    STRUCT          reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    ENUM            reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    JOIN            reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    IMPLEMENT       reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    FN              reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    IMPORT          reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    PYTHON          reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    PYFN            reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    PYTYPE          reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    $end            reduce using rule 126 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)


state 133

    (127) code_block -> LBRACE . CODE_STRING RBRACE

    CODE_STRING     shift and go to state 164


state 134

    (50) array_spec_opt -> LBRACKET NUMBER RBRACKET .

    COMMA           reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    IDENT           reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    SEMI            reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    LBRACE          reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    IN              reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)


state 135

    (19) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .

    CLASS           reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    STRUCT          reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    ENUM            reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    JOIN            reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    IMPLEMENT       reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    FN              reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    IMPORT          reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    PYTHON          reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    PYFN            reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    PYTYPE          reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    $end            reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)


state 136

    (56) block -> LBRACE statement_list RBRACE .

    CLASS           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    STRUCT          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    ENUM            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    JOIN            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    IMPLEMENT       reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    FN              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PYTHON          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PYFN            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PYTYPE          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PUBLIC          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LET             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    IDENT           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    NEW             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    EQUAL           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    DOT             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    DDCOLON         reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    ARROW           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    MOD             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 56 (block -> LBRACE statement_list RBRACE .)


state 137

    (57) statement_list -> statement_list statement .

    RBRACE          reduce using rule 57 (statement_list -> statement_list statement .)
    LET             reduce using rule 57 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 57 (statement_list -> statement_list statement .)
    IF              reduce using rule 57 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 57 (statement_list -> statement_list statement .)
    FOR             reduce using rule 57 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 57 (statement_list -> statement_list statement .)
    IDENT           reduce using rule 57 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 57 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 57 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 57 (statement_list -> statement_list statement .)
    STRING          reduce using rule 57 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 57 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 57 (statement_list -> statement_list statement .)
    NEW             reduce using rule 57 (statement_list -> statement_list statement .)
    FN              reduce using rule 57 (statement_list -> statement_list statement .)


state 138

    (59) statement -> var_decl .

    RBRACE          reduce using rule 59 (statement -> var_decl .)
    LET             reduce using rule 59 (statement -> var_decl .)
    RETURN          reduce using rule 59 (statement -> var_decl .)
    IF              reduce using rule 59 (statement -> var_decl .)
    WHILE           reduce using rule 59 (statement -> var_decl .)
    FOR             reduce using rule 59 (statement -> var_decl .)
    MINUS           reduce using rule 59 (statement -> var_decl .)
    IDENT           reduce using rule 59 (statement -> var_decl .)
    LPAREN          reduce using rule 59 (statement -> var_decl .)
    LBRACKET        reduce using rule 59 (statement -> var_decl .)
    NUMBER          reduce using rule 59 (statement -> var_decl .)
    STRING          reduce using rule 59 (statement -> var_decl .)
    TRUE            reduce using rule 59 (statement -> var_decl .)
    FALSE           reduce using rule 59 (statement -> var_decl .)
    NEW             reduce using rule 59 (statement -> var_decl .)
    FN              reduce using rule 59 (statement -> var_decl .)


state 139

    (60) statement -> assignment_statement .

    RBRACE          reduce using rule 60 (statement -> assignment_statement .)
    LET             reduce using rule 60 (statement -> assignment_statement .)
    RETURN          reduce using rule 60 (statement -> assignment_statement .)
    IF              reduce using rule 60 (statement -> assignment_statement .)
    WHILE           reduce using rule 60 (statement -> assignment_statement .)
    FOR             reduce using rule 60 (statement -> assignment_statement .)
    MINUS           reduce using rule 60 (statement -> assignment_statement .)
    IDENT           reduce using rule 60 (statement -> assignment_statement .)
    LPAREN          reduce using rule 60 (statement -> assignment_statement .)
    LBRACKET        reduce using rule 60 (statement -> assignment_statement .)
    NUMBER          reduce using rule 60 (statement -> assignment_statement .)
    STRING          reduce using rule 60 (statement -> assignment_statement .)
    TRUE            reduce using rule 60 (statement -> assignment_statement .)
    FALSE           reduce using rule 60 (statement -> assignment_statement .)
    NEW             reduce using rule 60 (statement -> assignment_statement .)
    FN              reduce using rule 60 (statement -> assignment_statement .)


state 140

    (61) statement -> return_statement .

    RBRACE          reduce using rule 61 (statement -> return_statement .)
    LET             reduce using rule 61 (statement -> return_statement .)
    RETURN          reduce using rule 61 (statement -> return_statement .)
    IF              reduce using rule 61 (statement -> return_statement .)
    WHILE           reduce using rule 61 (statement -> return_statement .)
    FOR             reduce using rule 61 (statement -> return_statement .)
    MINUS           reduce using rule 61 (statement -> return_statement .)
    IDENT           reduce using rule 61 (statement -> return_statement .)
    LPAREN          reduce using rule 61 (statement -> return_statement .)
    LBRACKET        reduce using rule 61 (statement -> return_statement .)
    NUMBER          reduce using rule 61 (statement -> return_statement .)
    STRING          reduce using rule 61 (statement -> return_statement .)
    TRUE            reduce using rule 61 (statement -> return_statement .)
    FALSE           reduce using rule 61 (statement -> return_statement .)
    NEW             reduce using rule 61 (statement -> return_statement .)
    FN              reduce using rule 61 (statement -> return_statement .)


state 141

    (62) statement -> expr_statement .

    RBRACE          reduce using rule 62 (statement -> expr_statement .)
    LET             reduce using rule 62 (statement -> expr_statement .)
    RETURN          reduce using rule 62 (statement -> expr_statement .)
    IF              reduce using rule 62 (statement -> expr_statement .)
    WHILE           reduce using rule 62 (statement -> expr_statement .)
    FOR             reduce using rule 62 (statement -> expr_statement .)
    MINUS           reduce using rule 62 (statement -> expr_statement .)
    IDENT           reduce using rule 62 (statement -> expr_statement .)
    LPAREN          reduce using rule 62 (statement -> expr_statement .)
    LBRACKET        reduce using rule 62 (statement -> expr_statement .)
    NUMBER          reduce using rule 62 (statement -> expr_statement .)
    STRING          reduce using rule 62 (statement -> expr_statement .)
    TRUE            reduce using rule 62 (statement -> expr_statement .)
    FALSE           reduce using rule 62 (statement -> expr_statement .)
    NEW             reduce using rule 62 (statement -> expr_statement .)
    FN              reduce using rule 62 (statement -> expr_statement .)


state 142

    (63) statement -> if_statement .

    RBRACE          reduce using rule 63 (statement -> if_statement .)
    LET             reduce using rule 63 (statement -> if_statement .)
    RETURN          reduce using rule 63 (statement -> if_statement .)
    IF              reduce using rule 63 (statement -> if_statement .)
    WHILE           reduce using rule 63 (statement -> if_statement .)
    FOR             reduce using rule 63 (statement -> if_statement .)
    MINUS           reduce using rule 63 (statement -> if_statement .)
    IDENT           reduce using rule 63 (statement -> if_statement .)
    LPAREN          reduce using rule 63 (statement -> if_statement .)
    LBRACKET        reduce using rule 63 (statement -> if_statement .)
    NUMBER          reduce using rule 63 (statement -> if_statement .)
    STRING          reduce using rule 63 (statement -> if_statement .)
    TRUE            reduce using rule 63 (statement -> if_statement .)
    FALSE           reduce using rule 63 (statement -> if_statement .)
    NEW             reduce using rule 63 (statement -> if_statement .)
    FN              reduce using rule 63 (statement -> if_statement .)


state 143

    (64) statement -> while_stmt .

    RBRACE          reduce using rule 64 (statement -> while_stmt .)
    LET             reduce using rule 64 (statement -> while_stmt .)
    RETURN          reduce using rule 64 (statement -> while_stmt .)
    IF              reduce using rule 64 (statement -> while_stmt .)
    WHILE           reduce using rule 64 (statement -> while_stmt .)
    FOR             reduce using rule 64 (statement -> while_stmt .)
    MINUS           reduce using rule 64 (statement -> while_stmt .)
    IDENT           reduce using rule 64 (statement -> while_stmt .)
    LPAREN          reduce using rule 64 (statement -> while_stmt .)
    LBRACKET        reduce using rule 64 (statement -> while_stmt .)
    NUMBER          reduce using rule 64 (statement -> while_stmt .)
    STRING          reduce using rule 64 (statement -> while_stmt .)
    TRUE            reduce using rule 64 (statement -> while_stmt .)
    FALSE           reduce using rule 64 (statement -> while_stmt .)
    NEW             reduce using rule 64 (statement -> while_stmt .)
    FN              reduce using rule 64 (statement -> while_stmt .)


state 144

    (65) statement -> for_stmt .

    RBRACE          reduce using rule 65 (statement -> for_stmt .)
    LET             reduce using rule 65 (statement -> for_stmt .)
    RETURN          reduce using rule 65 (statement -> for_stmt .)
    IF              reduce using rule 65 (statement -> for_stmt .)
    WHILE           reduce using rule 65 (statement -> for_stmt .)
    FOR             reduce using rule 65 (statement -> for_stmt .)
    MINUS           reduce using rule 65 (statement -> for_stmt .)
    IDENT           reduce using rule 65 (statement -> for_stmt .)
    LPAREN          reduce using rule 65 (statement -> for_stmt .)
    LBRACKET        reduce using rule 65 (statement -> for_stmt .)
    NUMBER          reduce using rule 65 (statement -> for_stmt .)
    STRING          reduce using rule 65 (statement -> for_stmt .)
    TRUE            reduce using rule 65 (statement -> for_stmt .)
    FALSE           reduce using rule 65 (statement -> for_stmt .)
    NEW             reduce using rule 65 (statement -> for_stmt .)
    FN              reduce using rule 65 (statement -> for_stmt .)


state 145

    (66) var_decl -> LET . IDENT COLON type_expr EQUAL expression SEMI
    (67) var_decl -> LET . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 165


state 146

    (27) primary -> IDENT . LBRACE field_assign_list RBRACE
    (103) primary -> IDENT .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 166
    EQUAL           reduce using rule 103 (primary -> IDENT .)
    LPAREN          reduce using rule 103 (primary -> IDENT .)
    DOT             reduce using rule 103 (primary -> IDENT .)
    DDCOLON         reduce using rule 103 (primary -> IDENT .)
    ARROW           reduce using rule 103 (primary -> IDENT .)
    LBRACKET        reduce using rule 103 (primary -> IDENT .)
    SEMI            reduce using rule 103 (primary -> IDENT .)
    PLUS            reduce using rule 103 (primary -> IDENT .)
    MINUS           reduce using rule 103 (primary -> IDENT .)
    TIMES           reduce using rule 103 (primary -> IDENT .)
    DIVIDE          reduce using rule 103 (primary -> IDENT .)
    MOD             reduce using rule 103 (primary -> IDENT .)
    LE              reduce using rule 103 (primary -> IDENT .)
    LT              reduce using rule 103 (primary -> IDENT .)
    GE              reduce using rule 103 (primary -> IDENT .)
    GT              reduce using rule 103 (primary -> IDENT .)
    EQ              reduce using rule 103 (primary -> IDENT .)
    NE              reduce using rule 103 (primary -> IDENT .)
    RPAREN          reduce using rule 103 (primary -> IDENT .)
    COMMA           reduce using rule 103 (primary -> IDENT .)
    RBRACKET        reduce using rule 103 (primary -> IDENT .)
    RBRACE          reduce using rule 103 (primary -> IDENT .)
    IDENT           reduce using rule 103 (primary -> IDENT .)

  ! LBRACE          [ reduce using rule 103 (primary -> IDENT .) ]


state 147

    (69) expr_statement -> expression . SEMI
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            shift and go to state 167
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 148

    (117) assignment_statement -> assignment . SEMI

    SEMI            shift and go to state 179


state 149

    (68) return_statement -> RETURN . expression SEMI
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 180
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 150

    (110) if_statement -> IF . expression block else_clause_opt
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 182
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 151

    (123) while_stmt -> WHILE . expression block
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 183
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 152

    (124) for_stmt -> FOR . IDENT COLON type_expr IN expression block

    IDENT           shift and go to state 184


state 153

    (118) assignment -> call_expr . EQUAL expression
    (70) expression -> call_expr .
    (82) call_expr -> call_expr . call_suffix
    (84) call_suffix -> . LPAREN arg_list_opt RPAREN
    (85) call_suffix -> . DOT IDENT
    (86) call_suffix -> . DDCOLON IDENT
    (87) call_suffix -> . ARROW IDENT
    (88) call_suffix -> . LBRACKET expression RBRACKET

    EQUAL           shift and go to state 185
    SEMI            reduce using rule 70 (expression -> call_expr .)
    PLUS            reduce using rule 70 (expression -> call_expr .)
    MINUS           reduce using rule 70 (expression -> call_expr .)
    TIMES           reduce using rule 70 (expression -> call_expr .)
    DIVIDE          reduce using rule 70 (expression -> call_expr .)
    MOD             reduce using rule 70 (expression -> call_expr .)
    LE              reduce using rule 70 (expression -> call_expr .)
    LT              reduce using rule 70 (expression -> call_expr .)
    GE              reduce using rule 70 (expression -> call_expr .)
    GT              reduce using rule 70 (expression -> call_expr .)
    EQ              reduce using rule 70 (expression -> call_expr .)
    NE              reduce using rule 70 (expression -> call_expr .)
    LPAREN          shift and go to state 187
    DOT             shift and go to state 188
    DDCOLON         shift and go to state 189
    ARROW           shift and go to state 190
    LBRACKET        shift and go to state 191

    call_suffix                    shift and go to state 186

state 154

    (122) expression -> MINUS . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 192
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 155

    (83) call_expr -> primary .

    EQUAL           reduce using rule 83 (call_expr -> primary .)
    LPAREN          reduce using rule 83 (call_expr -> primary .)
    DOT             reduce using rule 83 (call_expr -> primary .)
    DDCOLON         reduce using rule 83 (call_expr -> primary .)
    ARROW           reduce using rule 83 (call_expr -> primary .)
    LBRACKET        reduce using rule 83 (call_expr -> primary .)
    SEMI            reduce using rule 83 (call_expr -> primary .)
    PLUS            reduce using rule 83 (call_expr -> primary .)
    MINUS           reduce using rule 83 (call_expr -> primary .)
    TIMES           reduce using rule 83 (call_expr -> primary .)
    DIVIDE          reduce using rule 83 (call_expr -> primary .)
    MOD             reduce using rule 83 (call_expr -> primary .)
    LE              reduce using rule 83 (call_expr -> primary .)
    LT              reduce using rule 83 (call_expr -> primary .)
    GE              reduce using rule 83 (call_expr -> primary .)
    GT              reduce using rule 83 (call_expr -> primary .)
    EQ              reduce using rule 83 (call_expr -> primary .)
    NE              reduce using rule 83 (call_expr -> primary .)
    LBRACE          reduce using rule 83 (call_expr -> primary .)
    RPAREN          reduce using rule 83 (call_expr -> primary .)
    COMMA           reduce using rule 83 (call_expr -> primary .)
    RBRACKET        reduce using rule 83 (call_expr -> primary .)
    RBRACE          reduce using rule 83 (call_expr -> primary .)
    IDENT           reduce using rule 83 (call_expr -> primary .)


state 156

    (95) primary -> LPAREN . expression RPAREN
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 193
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 157

    (96) primary -> LBRACKET . expr_list_opt RBRACKET
    (97) expr_list_opt -> . expr_list
    (98) expr_list_opt -> . empty
    (99) expr_list -> . expr_list COMMA expression
    (100) expr_list -> . expression
    (109) empty -> .
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RBRACKET        reduce using rule 109 (empty -> .)
    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expr_list_opt                  shift and go to state 194
    expr_list                      shift and go to state 195
    empty                          shift and go to state 196
    expression                     shift and go to state 197
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 158

    (101) primary -> NUMBER .

    EQUAL           reduce using rule 101 (primary -> NUMBER .)
    LPAREN          reduce using rule 101 (primary -> NUMBER .)
    DOT             reduce using rule 101 (primary -> NUMBER .)
    DDCOLON         reduce using rule 101 (primary -> NUMBER .)
    ARROW           reduce using rule 101 (primary -> NUMBER .)
    LBRACKET        reduce using rule 101 (primary -> NUMBER .)
    SEMI            reduce using rule 101 (primary -> NUMBER .)
    PLUS            reduce using rule 101 (primary -> NUMBER .)
    MINUS           reduce using rule 101 (primary -> NUMBER .)
    TIMES           reduce using rule 101 (primary -> NUMBER .)
    DIVIDE          reduce using rule 101 (primary -> NUMBER .)
    MOD             reduce using rule 101 (primary -> NUMBER .)
    LE              reduce using rule 101 (primary -> NUMBER .)
    LT              reduce using rule 101 (primary -> NUMBER .)
    GE              reduce using rule 101 (primary -> NUMBER .)
    GT              reduce using rule 101 (primary -> NUMBER .)
    EQ              reduce using rule 101 (primary -> NUMBER .)
    NE              reduce using rule 101 (primary -> NUMBER .)
    LBRACE          reduce using rule 101 (primary -> NUMBER .)
    RPAREN          reduce using rule 101 (primary -> NUMBER .)
    COMMA           reduce using rule 101 (primary -> NUMBER .)
    RBRACKET        reduce using rule 101 (primary -> NUMBER .)
    RBRACE          reduce using rule 101 (primary -> NUMBER .)
    IDENT           reduce using rule 101 (primary -> NUMBER .)


state 159

    (102) primary -> STRING .

    EQUAL           reduce using rule 102 (primary -> STRING .)
    LPAREN          reduce using rule 102 (primary -> STRING .)
    DOT             reduce using rule 102 (primary -> STRING .)
    DDCOLON         reduce using rule 102 (primary -> STRING .)
    ARROW           reduce using rule 102 (primary -> STRING .)
    LBRACKET        reduce using rule 102 (primary -> STRING .)
    SEMI            reduce using rule 102 (primary -> STRING .)
    PLUS            reduce using rule 102 (primary -> STRING .)
    MINUS           reduce using rule 102 (primary -> STRING .)
    TIMES           reduce using rule 102 (primary -> STRING .)
    DIVIDE          reduce using rule 102 (primary -> STRING .)
    MOD             reduce using rule 102 (primary -> STRING .)
    LE              reduce using rule 102 (primary -> STRING .)
    LT              reduce using rule 102 (primary -> STRING .)
    GE              reduce using rule 102 (primary -> STRING .)
    GT              reduce using rule 102 (primary -> STRING .)
    EQ              reduce using rule 102 (primary -> STRING .)
    NE              reduce using rule 102 (primary -> STRING .)
    LBRACE          reduce using rule 102 (primary -> STRING .)
    RPAREN          reduce using rule 102 (primary -> STRING .)
    COMMA           reduce using rule 102 (primary -> STRING .)
    RBRACKET        reduce using rule 102 (primary -> STRING .)
    RBRACE          reduce using rule 102 (primary -> STRING .)
    IDENT           reduce using rule 102 (primary -> STRING .)


state 160

    (104) primary -> TRUE .

    EQUAL           reduce using rule 104 (primary -> TRUE .)
    LPAREN          reduce using rule 104 (primary -> TRUE .)
    DOT             reduce using rule 104 (primary -> TRUE .)
    DDCOLON         reduce using rule 104 (primary -> TRUE .)
    ARROW           reduce using rule 104 (primary -> TRUE .)
    LBRACKET        reduce using rule 104 (primary -> TRUE .)
    SEMI            reduce using rule 104 (primary -> TRUE .)
    PLUS            reduce using rule 104 (primary -> TRUE .)
    MINUS           reduce using rule 104 (primary -> TRUE .)
    TIMES           reduce using rule 104 (primary -> TRUE .)
    DIVIDE          reduce using rule 104 (primary -> TRUE .)
    MOD             reduce using rule 104 (primary -> TRUE .)
    LE              reduce using rule 104 (primary -> TRUE .)
    LT              reduce using rule 104 (primary -> TRUE .)
    GE              reduce using rule 104 (primary -> TRUE .)
    GT              reduce using rule 104 (primary -> TRUE .)
    EQ              reduce using rule 104 (primary -> TRUE .)
    NE              reduce using rule 104 (primary -> TRUE .)
    LBRACE          reduce using rule 104 (primary -> TRUE .)
    RPAREN          reduce using rule 104 (primary -> TRUE .)
    COMMA           reduce using rule 104 (primary -> TRUE .)
    RBRACKET        reduce using rule 104 (primary -> TRUE .)
    RBRACE          reduce using rule 104 (primary -> TRUE .)
    IDENT           reduce using rule 104 (primary -> TRUE .)


state 161

    (105) primary -> FALSE .

    EQUAL           reduce using rule 105 (primary -> FALSE .)
    LPAREN          reduce using rule 105 (primary -> FALSE .)
    DOT             reduce using rule 105 (primary -> FALSE .)
    DDCOLON         reduce using rule 105 (primary -> FALSE .)
    ARROW           reduce using rule 105 (primary -> FALSE .)
    LBRACKET        reduce using rule 105 (primary -> FALSE .)
    SEMI            reduce using rule 105 (primary -> FALSE .)
    PLUS            reduce using rule 105 (primary -> FALSE .)
    MINUS           reduce using rule 105 (primary -> FALSE .)
    TIMES           reduce using rule 105 (primary -> FALSE .)
    DIVIDE          reduce using rule 105 (primary -> FALSE .)
    MOD             reduce using rule 105 (primary -> FALSE .)
    LE              reduce using rule 105 (primary -> FALSE .)
    LT              reduce using rule 105 (primary -> FALSE .)
    GE              reduce using rule 105 (primary -> FALSE .)
    GT              reduce using rule 105 (primary -> FALSE .)
    EQ              reduce using rule 105 (primary -> FALSE .)
    NE              reduce using rule 105 (primary -> FALSE .)
    LBRACE          reduce using rule 105 (primary -> FALSE .)
    RPAREN          reduce using rule 105 (primary -> FALSE .)
    COMMA           reduce using rule 105 (primary -> FALSE .)
    RBRACKET        reduce using rule 105 (primary -> FALSE .)
    RBRACE          reduce using rule 105 (primary -> FALSE .)
    IDENT           reduce using rule 105 (primary -> FALSE .)


state 162

    (106) primary -> NEW . qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> NEW . qualified_identifier
    (120) qualified_identifier -> . IDENT DDCOLON IDENT
    (121) qualified_identifier -> . IDENT

    IDENT           shift and go to state 199

    qualified_identifier           shift and go to state 198

state 163

    (108) primary -> FN . LPAREN parameters_opt RPAREN return_opt block

    LPAREN          shift and go to state 200


state 164

    (127) code_block -> LBRACE CODE_STRING . RBRACE

    RBRACE          shift and go to state 201


state 165

    (66) var_decl -> LET IDENT . COLON type_expr EQUAL expression SEMI
    (67) var_decl -> LET IDENT . COLON type_expr SEMI

    COLON           shift and go to state 202


state 166

    (27) primary -> IDENT LBRACE . field_assign_list RBRACE
    (28) field_assign_list -> . field_assign_list field_assign
    (29) field_assign_list -> . field_assign
    (30) field_assign_list -> . empty
    (31) field_assign -> . IDENT COLON expression opt_comma
    (109) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 203
    RBRACE          reduce using rule 109 (empty -> .)

  ! IDENT           [ reduce using rule 109 (empty -> .) ]

    field_assign_list              shift and go to state 204
    field_assign                   shift and go to state 205
    empty                          shift and go to state 206

state 167

    (69) expr_statement -> expression SEMI .

    RBRACE          reduce using rule 69 (expr_statement -> expression SEMI .)
    LET             reduce using rule 69 (expr_statement -> expression SEMI .)
    RETURN          reduce using rule 69 (expr_statement -> expression SEMI .)
    IF              reduce using rule 69 (expr_statement -> expression SEMI .)
    WHILE           reduce using rule 69 (expr_statement -> expression SEMI .)
    FOR             reduce using rule 69 (expr_statement -> expression SEMI .)
    MINUS           reduce using rule 69 (expr_statement -> expression SEMI .)
    IDENT           reduce using rule 69 (expr_statement -> expression SEMI .)
    LPAREN          reduce using rule 69 (expr_statement -> expression SEMI .)
    LBRACKET        reduce using rule 69 (expr_statement -> expression SEMI .)
    NUMBER          reduce using rule 69 (expr_statement -> expression SEMI .)
    STRING          reduce using rule 69 (expr_statement -> expression SEMI .)
    TRUE            reduce using rule 69 (expr_statement -> expression SEMI .)
    FALSE           reduce using rule 69 (expr_statement -> expression SEMI .)
    NEW             reduce using rule 69 (expr_statement -> expression SEMI .)
    FN              reduce using rule 69 (expr_statement -> expression SEMI .)


state 168

    (71) expression -> expression PLUS . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 207
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 169

    (72) expression -> expression MINUS . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 208
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 170

    (73) expression -> expression TIMES . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 209
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 171

    (74) expression -> expression DIVIDE . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 210
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 172

    (75) expression -> expression MOD . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 211
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 173

    (76) expression -> expression LE . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 212
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 174

    (77) expression -> expression LT . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 213
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 175

    (78) expression -> expression GE . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 214
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 176

    (79) expression -> expression GT . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 215
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 177

    (80) expression -> expression EQ . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 216
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 178

    (81) expression -> expression NE . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 217
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 179

    (117) assignment_statement -> assignment SEMI .

    RBRACE          reduce using rule 117 (assignment_statement -> assignment SEMI .)
    LET             reduce using rule 117 (assignment_statement -> assignment SEMI .)
    RETURN          reduce using rule 117 (assignment_statement -> assignment SEMI .)
    IF              reduce using rule 117 (assignment_statement -> assignment SEMI .)
    WHILE           reduce using rule 117 (assignment_statement -> assignment SEMI .)
    FOR             reduce using rule 117 (assignment_statement -> assignment SEMI .)
    MINUS           reduce using rule 117 (assignment_statement -> assignment SEMI .)
    IDENT           reduce using rule 117 (assignment_statement -> assignment SEMI .)
    LPAREN          reduce using rule 117 (assignment_statement -> assignment SEMI .)
    LBRACKET        reduce using rule 117 (assignment_statement -> assignment SEMI .)
    NUMBER          reduce using rule 117 (assignment_statement -> assignment SEMI .)
    STRING          reduce using rule 117 (assignment_statement -> assignment SEMI .)
    TRUE            reduce using rule 117 (assignment_statement -> assignment SEMI .)
    FALSE           reduce using rule 117 (assignment_statement -> assignment SEMI .)
    NEW             reduce using rule 117 (assignment_statement -> assignment SEMI .)
    FN              reduce using rule 117 (assignment_statement -> assignment SEMI .)


state 180

    (68) return_statement -> RETURN expression . SEMI
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            shift and go to state 218
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 181

    (70) expression -> call_expr .
    (82) call_expr -> call_expr . call_suffix
    (84) call_suffix -> . LPAREN arg_list_opt RPAREN
    (85) call_suffix -> . DOT IDENT
    (86) call_suffix -> . DDCOLON IDENT
    (87) call_suffix -> . ARROW IDENT
    (88) call_suffix -> . LBRACKET expression RBRACKET

    SEMI            reduce using rule 70 (expression -> call_expr .)
    PLUS            reduce using rule 70 (expression -> call_expr .)
    MINUS           reduce using rule 70 (expression -> call_expr .)
    TIMES           reduce using rule 70 (expression -> call_expr .)
    DIVIDE          reduce using rule 70 (expression -> call_expr .)
    MOD             reduce using rule 70 (expression -> call_expr .)
    LE              reduce using rule 70 (expression -> call_expr .)
    LT              reduce using rule 70 (expression -> call_expr .)
    GE              reduce using rule 70 (expression -> call_expr .)
    GT              reduce using rule 70 (expression -> call_expr .)
    EQ              reduce using rule 70 (expression -> call_expr .)
    NE              reduce using rule 70 (expression -> call_expr .)
    LBRACE          reduce using rule 70 (expression -> call_expr .)
    RPAREN          reduce using rule 70 (expression -> call_expr .)
    COMMA           reduce using rule 70 (expression -> call_expr .)
    RBRACKET        reduce using rule 70 (expression -> call_expr .)
    RBRACE          reduce using rule 70 (expression -> call_expr .)
    IDENT           reduce using rule 70 (expression -> call_expr .)
    LPAREN          shift and go to state 187
    DOT             shift and go to state 188
    DDCOLON         shift and go to state 189
    ARROW           shift and go to state 190
    LBRACKET        shift and go to state 191

    call_suffix                    shift and go to state 186

state 182

    (110) if_statement -> IF expression . block else_clause_opt
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression
    (56) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178
    LBRACE          shift and go to state 121

    block                          shift and go to state 219

state 183

    (123) while_stmt -> WHILE expression . block
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression
    (56) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178
    LBRACE          shift and go to state 121

    block                          shift and go to state 220

state 184

    (124) for_stmt -> FOR IDENT . COLON type_expr IN expression block

    COLON           shift and go to state 221


state 185

    (118) assignment -> call_expr EQUAL . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    call_expr                      shift and go to state 181
    expression                     shift and go to state 222
    primary                        shift and go to state 155

state 186

    (82) call_expr -> call_expr call_suffix .

    EQUAL           reduce using rule 82 (call_expr -> call_expr call_suffix .)
    LPAREN          reduce using rule 82 (call_expr -> call_expr call_suffix .)
    DOT             reduce using rule 82 (call_expr -> call_expr call_suffix .)
    DDCOLON         reduce using rule 82 (call_expr -> call_expr call_suffix .)
    ARROW           reduce using rule 82 (call_expr -> call_expr call_suffix .)
    LBRACKET        reduce using rule 82 (call_expr -> call_expr call_suffix .)
    SEMI            reduce using rule 82 (call_expr -> call_expr call_suffix .)
    PLUS            reduce using rule 82 (call_expr -> call_expr call_suffix .)
    MINUS           reduce using rule 82 (call_expr -> call_expr call_suffix .)
    TIMES           reduce using rule 82 (call_expr -> call_expr call_suffix .)
    DIVIDE          reduce using rule 82 (call_expr -> call_expr call_suffix .)
    MOD             reduce using rule 82 (call_expr -> call_expr call_suffix .)
    LE              reduce using rule 82 (call_expr -> call_expr call_suffix .)
    LT              reduce using rule 82 (call_expr -> call_expr call_suffix .)
    GE              reduce using rule 82 (call_expr -> call_expr call_suffix .)
    GT              reduce using rule 82 (call_expr -> call_expr call_suffix .)
    EQ              reduce using rule 82 (call_expr -> call_expr call_suffix .)
    NE              reduce using rule 82 (call_expr -> call_expr call_suffix .)
    LBRACE          reduce using rule 82 (call_expr -> call_expr call_suffix .)
    RPAREN          reduce using rule 82 (call_expr -> call_expr call_suffix .)
    COMMA           reduce using rule 82 (call_expr -> call_expr call_suffix .)
    RBRACKET        reduce using rule 82 (call_expr -> call_expr call_suffix .)
    RBRACE          reduce using rule 82 (call_expr -> call_expr call_suffix .)
    IDENT           reduce using rule 82 (call_expr -> call_expr call_suffix .)


state 187

    (84) call_suffix -> LPAREN . arg_list_opt RPAREN
    (89) arg_list_opt -> . arg_list
    (90) arg_list_opt -> . empty
    (91) arg_list -> . arg_list COMMA argument
    (92) arg_list -> . argument
    (109) empty -> .
    (93) argument -> . IDENT COLON expression
    (94) argument -> . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RPAREN          reduce using rule 109 (empty -> .)
    IDENT           shift and go to state 227
    MINUS           shift and go to state 154
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    arg_list_opt                   shift and go to state 223
    arg_list                       shift and go to state 224
    empty                          shift and go to state 225
    argument                       shift and go to state 226
    expression                     shift and go to state 228
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 188

    (85) call_suffix -> DOT . IDENT

    IDENT           shift and go to state 229


state 189

    (86) call_suffix -> DDCOLON . IDENT

    IDENT           shift and go to state 230


state 190

    (87) call_suffix -> ARROW . IDENT

    IDENT           shift and go to state 231


state 191

    (88) call_suffix -> LBRACKET . expression RBRACKET
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 232
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 192

    (122) expression -> MINUS expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 122 (expression -> MINUS expression .)
    LBRACE          reduce using rule 122 (expression -> MINUS expression .)
    RPAREN          reduce using rule 122 (expression -> MINUS expression .)
    COMMA           reduce using rule 122 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 122 (expression -> MINUS expression .)
    RBRACE          reduce using rule 122 (expression -> MINUS expression .)
    IDENT           reduce using rule 122 (expression -> MINUS expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178

  ! PLUS            [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! TIMES           [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! MOD             [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! LE              [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! LT              [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! GE              [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! GT              [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 122 (expression -> MINUS expression .) ]
  ! NE              [ reduce using rule 122 (expression -> MINUS expression .) ]


state 193

    (95) primary -> LPAREN expression . RPAREN
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    RPAREN          shift and go to state 233
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 194

    (96) primary -> LBRACKET expr_list_opt . RBRACKET

    RBRACKET        shift and go to state 234


state 195

    (97) expr_list_opt -> expr_list .
    (99) expr_list -> expr_list . COMMA expression

    RBRACKET        reduce using rule 97 (expr_list_opt -> expr_list .)
    COMMA           shift and go to state 235


state 196

    (98) expr_list_opt -> empty .

    RBRACKET        reduce using rule 98 (expr_list_opt -> empty .)


state 197

    (100) expr_list -> expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    COMMA           reduce using rule 100 (expr_list -> expression .)
    RBRACKET        reduce using rule 100 (expr_list -> expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 198

    (106) primary -> NEW qualified_identifier . LPAREN arg_list_opt RPAREN
    (107) primary -> NEW qualified_identifier .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 236
    EQUAL           reduce using rule 107 (primary -> NEW qualified_identifier .)
    DOT             reduce using rule 107 (primary -> NEW qualified_identifier .)
    DDCOLON         reduce using rule 107 (primary -> NEW qualified_identifier .)
    ARROW           reduce using rule 107 (primary -> NEW qualified_identifier .)
    LBRACKET        reduce using rule 107 (primary -> NEW qualified_identifier .)
    SEMI            reduce using rule 107 (primary -> NEW qualified_identifier .)
    PLUS            reduce using rule 107 (primary -> NEW qualified_identifier .)
    MINUS           reduce using rule 107 (primary -> NEW qualified_identifier .)
    TIMES           reduce using rule 107 (primary -> NEW qualified_identifier .)
    DIVIDE          reduce using rule 107 (primary -> NEW qualified_identifier .)
    MOD             reduce using rule 107 (primary -> NEW qualified_identifier .)
    LE              reduce using rule 107 (primary -> NEW qualified_identifier .)
    LT              reduce using rule 107 (primary -> NEW qualified_identifier .)
    GE              reduce using rule 107 (primary -> NEW qualified_identifier .)
    GT              reduce using rule 107 (primary -> NEW qualified_identifier .)
    EQ              reduce using rule 107 (primary -> NEW qualified_identifier .)
    NE              reduce using rule 107 (primary -> NEW qualified_identifier .)
    LBRACE          reduce using rule 107 (primary -> NEW qualified_identifier .)
    RPAREN          reduce using rule 107 (primary -> NEW qualified_identifier .)
    COMMA           reduce using rule 107 (primary -> NEW qualified_identifier .)
    RBRACKET        reduce using rule 107 (primary -> NEW qualified_identifier .)
    RBRACE          reduce using rule 107 (primary -> NEW qualified_identifier .)
    IDENT           reduce using rule 107 (primary -> NEW qualified_identifier .)

  ! LPAREN          [ reduce using rule 107 (primary -> NEW qualified_identifier .) ]


state 199

    (120) qualified_identifier -> IDENT . DDCOLON IDENT
    (121) qualified_identifier -> IDENT .

  ! shift/reduce conflict for DDCOLON resolved as shift
    DDCOLON         shift and go to state 237
    LPAREN          reduce using rule 121 (qualified_identifier -> IDENT .)
    EQUAL           reduce using rule 121 (qualified_identifier -> IDENT .)
    DOT             reduce using rule 121 (qualified_identifier -> IDENT .)
    ARROW           reduce using rule 121 (qualified_identifier -> IDENT .)
    LBRACKET        reduce using rule 121 (qualified_identifier -> IDENT .)
    SEMI            reduce using rule 121 (qualified_identifier -> IDENT .)
    PLUS            reduce using rule 121 (qualified_identifier -> IDENT .)
    MINUS           reduce using rule 121 (qualified_identifier -> IDENT .)
    TIMES           reduce using rule 121 (qualified_identifier -> IDENT .)
    DIVIDE          reduce using rule 121 (qualified_identifier -> IDENT .)
    MOD             reduce using rule 121 (qualified_identifier -> IDENT .)
    LE              reduce using rule 121 (qualified_identifier -> IDENT .)
    LT              reduce using rule 121 (qualified_identifier -> IDENT .)
    GE              reduce using rule 121 (qualified_identifier -> IDENT .)
    GT              reduce using rule 121 (qualified_identifier -> IDENT .)
    EQ              reduce using rule 121 (qualified_identifier -> IDENT .)
    NE              reduce using rule 121 (qualified_identifier -> IDENT .)
    LBRACE          reduce using rule 121 (qualified_identifier -> IDENT .)
    RPAREN          reduce using rule 121 (qualified_identifier -> IDENT .)
    COMMA           reduce using rule 121 (qualified_identifier -> IDENT .)
    RBRACKET        reduce using rule 121 (qualified_identifier -> IDENT .)
    RBRACE          reduce using rule 121 (qualified_identifier -> IDENT .)
    IDENT           reduce using rule 121 (qualified_identifier -> IDENT .)

  ! DDCOLON         [ reduce using rule 121 (qualified_identifier -> IDENT .) ]


state 200

    (108) primary -> FN LPAREN . parameters_opt RPAREN return_opt block
    (41) parameters_opt -> . parameters
    (42) parameters_opt -> . empty
    (43) parameters -> . parameters COMMA parameter
    (44) parameters -> . parameter
    (109) empty -> .
    (45) parameter -> . IDENT COLON type_expr

    RPAREN          reduce using rule 109 (empty -> .)
    IDENT           shift and go to state 65

    parameters_opt                 shift and go to state 238
    parameters                     shift and go to state 67
    empty                          shift and go to state 68
    parameter                      shift and go to state 69

state 201

    (127) code_block -> LBRACE CODE_STRING RBRACE .

    CLASS           reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    STRUCT          reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    ENUM            reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    JOIN            reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    IMPLEMENT       reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    FN              reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    IMPORT          reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    PYTHON          reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    PYFN            reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    PYTYPE          reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)
    $end            reduce using rule 127 (code_block -> LBRACE CODE_STRING RBRACE .)


state 202

    (66) var_decl -> LET IDENT COLON . type_expr EQUAL expression SEMI
    (67) var_decl -> LET IDENT COLON . type_expr SEMI
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 239
    simple_type_expr               shift and go to state 93

state 203

    (31) field_assign -> IDENT . COLON expression opt_comma

    COLON           shift and go to state 240


state 204

    (27) primary -> IDENT LBRACE field_assign_list . RBRACE
    (28) field_assign_list -> field_assign_list . field_assign
    (31) field_assign -> . IDENT COLON expression opt_comma

    RBRACE          shift and go to state 241
    IDENT           shift and go to state 203

    field_assign                   shift and go to state 242

state 205

    (29) field_assign_list -> field_assign .

    RBRACE          reduce using rule 29 (field_assign_list -> field_assign .)
    IDENT           reduce using rule 29 (field_assign_list -> field_assign .)


state 206

    (30) field_assign_list -> empty .

    RBRACE          reduce using rule 30 (field_assign_list -> empty .)
    IDENT           reduce using rule 30 (field_assign_list -> empty .)


state 207

    (71) expression -> expression PLUS expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 71 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 71 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 71 (expression -> expression PLUS expression .)
    LE              reduce using rule 71 (expression -> expression PLUS expression .)
    LT              reduce using rule 71 (expression -> expression PLUS expression .)
    GE              reduce using rule 71 (expression -> expression PLUS expression .)
    GT              reduce using rule 71 (expression -> expression PLUS expression .)
    EQ              reduce using rule 71 (expression -> expression PLUS expression .)
    NE              reduce using rule 71 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 71 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 71 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 71 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 71 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 71 (expression -> expression PLUS expression .)
    IDENT           reduce using rule 71 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172

  ! TIMES           [ reduce using rule 71 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 168 ]
  ! MINUS           [ shift and go to state 169 ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 208

    (72) expression -> expression MINUS expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 72 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 72 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 72 (expression -> expression MINUS expression .)
    LE              reduce using rule 72 (expression -> expression MINUS expression .)
    LT              reduce using rule 72 (expression -> expression MINUS expression .)
    GE              reduce using rule 72 (expression -> expression MINUS expression .)
    GT              reduce using rule 72 (expression -> expression MINUS expression .)
    EQ              reduce using rule 72 (expression -> expression MINUS expression .)
    NE              reduce using rule 72 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 72 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 72 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 72 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 72 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 72 (expression -> expression MINUS expression .)
    IDENT           reduce using rule 72 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172

  ! TIMES           [ reduce using rule 72 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 168 ]
  ! MINUS           [ shift and go to state 169 ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 209

    (73) expression -> expression TIMES expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 73 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 73 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 73 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 73 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 73 (expression -> expression TIMES expression .)
    MOD             reduce using rule 73 (expression -> expression TIMES expression .)
    LE              reduce using rule 73 (expression -> expression TIMES expression .)
    LT              reduce using rule 73 (expression -> expression TIMES expression .)
    GE              reduce using rule 73 (expression -> expression TIMES expression .)
    GT              reduce using rule 73 (expression -> expression TIMES expression .)
    EQ              reduce using rule 73 (expression -> expression TIMES expression .)
    NE              reduce using rule 73 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 73 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 73 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 73 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 73 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 73 (expression -> expression TIMES expression .)
    IDENT           reduce using rule 73 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 168 ]
  ! MINUS           [ shift and go to state 169 ]
  ! TIMES           [ shift and go to state 170 ]
  ! DIVIDE          [ shift and go to state 171 ]
  ! MOD             [ shift and go to state 172 ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 210

    (74) expression -> expression DIVIDE expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 74 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 74 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 74 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 74 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 74 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 74 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 74 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 74 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 74 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 74 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 74 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 74 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 74 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 74 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 74 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 74 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 74 (expression -> expression DIVIDE expression .)
    IDENT           reduce using rule 74 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 168 ]
  ! MINUS           [ shift and go to state 169 ]
  ! TIMES           [ shift and go to state 170 ]
  ! DIVIDE          [ shift and go to state 171 ]
  ! MOD             [ shift and go to state 172 ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 211

    (75) expression -> expression MOD expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 75 (expression -> expression MOD expression .)
    PLUS            reduce using rule 75 (expression -> expression MOD expression .)
    MINUS           reduce using rule 75 (expression -> expression MOD expression .)
    TIMES           reduce using rule 75 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 75 (expression -> expression MOD expression .)
    MOD             reduce using rule 75 (expression -> expression MOD expression .)
    LE              reduce using rule 75 (expression -> expression MOD expression .)
    LT              reduce using rule 75 (expression -> expression MOD expression .)
    GE              reduce using rule 75 (expression -> expression MOD expression .)
    GT              reduce using rule 75 (expression -> expression MOD expression .)
    EQ              reduce using rule 75 (expression -> expression MOD expression .)
    NE              reduce using rule 75 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 75 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 75 (expression -> expression MOD expression .)
    COMMA           reduce using rule 75 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 75 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 75 (expression -> expression MOD expression .)
    IDENT           reduce using rule 75 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 168 ]
  ! MINUS           [ shift and go to state 169 ]
  ! TIMES           [ shift and go to state 170 ]
  ! DIVIDE          [ shift and go to state 171 ]
  ! MOD             [ shift and go to state 172 ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 212

    (76) expression -> expression LE expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 76 (expression -> expression LE expression .)
    LE              reduce using rule 76 (expression -> expression LE expression .)
    LT              reduce using rule 76 (expression -> expression LE expression .)
    GE              reduce using rule 76 (expression -> expression LE expression .)
    GT              reduce using rule 76 (expression -> expression LE expression .)
    EQ              reduce using rule 76 (expression -> expression LE expression .)
    NE              reduce using rule 76 (expression -> expression LE expression .)
    LBRACE          reduce using rule 76 (expression -> expression LE expression .)
    RPAREN          reduce using rule 76 (expression -> expression LE expression .)
    COMMA           reduce using rule 76 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 76 (expression -> expression LE expression .)
    RBRACE          reduce using rule 76 (expression -> expression LE expression .)
    IDENT           reduce using rule 76 (expression -> expression LE expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172

  ! PLUS            [ reduce using rule 76 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 76 (expression -> expression LE expression .) ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 213

    (77) expression -> expression LT expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 77 (expression -> expression LT expression .)
    LE              reduce using rule 77 (expression -> expression LT expression .)
    LT              reduce using rule 77 (expression -> expression LT expression .)
    GE              reduce using rule 77 (expression -> expression LT expression .)
    GT              reduce using rule 77 (expression -> expression LT expression .)
    EQ              reduce using rule 77 (expression -> expression LT expression .)
    NE              reduce using rule 77 (expression -> expression LT expression .)
    LBRACE          reduce using rule 77 (expression -> expression LT expression .)
    RPAREN          reduce using rule 77 (expression -> expression LT expression .)
    COMMA           reduce using rule 77 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 77 (expression -> expression LT expression .)
    RBRACE          reduce using rule 77 (expression -> expression LT expression .)
    IDENT           reduce using rule 77 (expression -> expression LT expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172

  ! PLUS            [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 77 (expression -> expression LT expression .) ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 214

    (78) expression -> expression GE expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 78 (expression -> expression GE expression .)
    LE              reduce using rule 78 (expression -> expression GE expression .)
    LT              reduce using rule 78 (expression -> expression GE expression .)
    GE              reduce using rule 78 (expression -> expression GE expression .)
    GT              reduce using rule 78 (expression -> expression GE expression .)
    EQ              reduce using rule 78 (expression -> expression GE expression .)
    NE              reduce using rule 78 (expression -> expression GE expression .)
    LBRACE          reduce using rule 78 (expression -> expression GE expression .)
    RPAREN          reduce using rule 78 (expression -> expression GE expression .)
    COMMA           reduce using rule 78 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 78 (expression -> expression GE expression .)
    RBRACE          reduce using rule 78 (expression -> expression GE expression .)
    IDENT           reduce using rule 78 (expression -> expression GE expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172

  ! PLUS            [ reduce using rule 78 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 78 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 78 (expression -> expression GE expression .) ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 215

    (79) expression -> expression GT expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 79 (expression -> expression GT expression .)
    LE              reduce using rule 79 (expression -> expression GT expression .)
    LT              reduce using rule 79 (expression -> expression GT expression .)
    GE              reduce using rule 79 (expression -> expression GT expression .)
    GT              reduce using rule 79 (expression -> expression GT expression .)
    EQ              reduce using rule 79 (expression -> expression GT expression .)
    NE              reduce using rule 79 (expression -> expression GT expression .)
    LBRACE          reduce using rule 79 (expression -> expression GT expression .)
    RPAREN          reduce using rule 79 (expression -> expression GT expression .)
    COMMA           reduce using rule 79 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 79 (expression -> expression GT expression .)
    RBRACE          reduce using rule 79 (expression -> expression GT expression .)
    IDENT           reduce using rule 79 (expression -> expression GT expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172

  ! PLUS            [ reduce using rule 79 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 79 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 79 (expression -> expression GT expression .) ]
  ! LE              [ shift and go to state 173 ]
  ! LT              [ shift and go to state 174 ]
  ! GE              [ shift and go to state 175 ]
  ! GT              [ shift and go to state 176 ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 216

    (80) expression -> expression EQ expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 80 (expression -> expression EQ expression .)
    EQ              reduce using rule 80 (expression -> expression EQ expression .)
    NE              reduce using rule 80 (expression -> expression EQ expression .)
    LBRACE          reduce using rule 80 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 80 (expression -> expression EQ expression .)
    COMMA           reduce using rule 80 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 80 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 80 (expression -> expression EQ expression .)
    IDENT           reduce using rule 80 (expression -> expression EQ expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176

  ! PLUS            [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 80 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 217

    (81) expression -> expression NE expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 81 (expression -> expression NE expression .)
    EQ              reduce using rule 81 (expression -> expression NE expression .)
    NE              reduce using rule 81 (expression -> expression NE expression .)
    LBRACE          reduce using rule 81 (expression -> expression NE expression .)
    RPAREN          reduce using rule 81 (expression -> expression NE expression .)
    COMMA           reduce using rule 81 (expression -> expression NE expression .)
    RBRACKET        reduce using rule 81 (expression -> expression NE expression .)
    RBRACE          reduce using rule 81 (expression -> expression NE expression .)
    IDENT           reduce using rule 81 (expression -> expression NE expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176

  ! PLUS            [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 81 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 177 ]
  ! NE              [ shift and go to state 178 ]


state 218

    (68) return_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    LET             reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    IF              reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    IDENT           reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    LBRACKET        reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    TRUE            reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    FALSE           reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    NEW             reduce using rule 68 (return_statement -> RETURN expression SEMI .)
    FN              reduce using rule 68 (return_statement -> RETURN expression SEMI .)


state 219

    (110) if_statement -> IF expression block . else_clause_opt
    (111) else_clause_opt -> . ELSE if_statement
    (112) else_clause_opt -> . ELSE block
    (113) else_clause_opt -> . empty
    (109) empty -> .

    ELSE            shift and go to state 244
    RBRACE          reduce using rule 109 (empty -> .)
    LET             reduce using rule 109 (empty -> .)
    RETURN          reduce using rule 109 (empty -> .)
    IF              reduce using rule 109 (empty -> .)
    WHILE           reduce using rule 109 (empty -> .)
    FOR             reduce using rule 109 (empty -> .)
    MINUS           reduce using rule 109 (empty -> .)
    IDENT           reduce using rule 109 (empty -> .)
    LPAREN          reduce using rule 109 (empty -> .)
    LBRACKET        reduce using rule 109 (empty -> .)
    NUMBER          reduce using rule 109 (empty -> .)
    STRING          reduce using rule 109 (empty -> .)
    TRUE            reduce using rule 109 (empty -> .)
    FALSE           reduce using rule 109 (empty -> .)
    NEW             reduce using rule 109 (empty -> .)
    FN              reduce using rule 109 (empty -> .)

    else_clause_opt                shift and go to state 243
    empty                          shift and go to state 245

state 220

    (123) while_stmt -> WHILE expression block .

    RBRACE          reduce using rule 123 (while_stmt -> WHILE expression block .)
    LET             reduce using rule 123 (while_stmt -> WHILE expression block .)
    RETURN          reduce using rule 123 (while_stmt -> WHILE expression block .)
    IF              reduce using rule 123 (while_stmt -> WHILE expression block .)
    WHILE           reduce using rule 123 (while_stmt -> WHILE expression block .)
    FOR             reduce using rule 123 (while_stmt -> WHILE expression block .)
    MINUS           reduce using rule 123 (while_stmt -> WHILE expression block .)
    IDENT           reduce using rule 123 (while_stmt -> WHILE expression block .)
    LPAREN          reduce using rule 123 (while_stmt -> WHILE expression block .)
    LBRACKET        reduce using rule 123 (while_stmt -> WHILE expression block .)
    NUMBER          reduce using rule 123 (while_stmt -> WHILE expression block .)
    STRING          reduce using rule 123 (while_stmt -> WHILE expression block .)
    TRUE            reduce using rule 123 (while_stmt -> WHILE expression block .)
    FALSE           reduce using rule 123 (while_stmt -> WHILE expression block .)
    NEW             reduce using rule 123 (while_stmt -> WHILE expression block .)
    FN              reduce using rule 123 (while_stmt -> WHILE expression block .)


state 221

    (124) for_stmt -> FOR IDENT COLON . type_expr IN expression block
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 246
    simple_type_expr               shift and go to state 93

state 222

    (118) assignment -> call_expr EQUAL expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            reduce using rule 118 (assignment -> call_expr EQUAL expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 223

    (84) call_suffix -> LPAREN arg_list_opt . RPAREN

    RPAREN          shift and go to state 247


state 224

    (89) arg_list_opt -> arg_list .
    (91) arg_list -> arg_list . COMMA argument

    RPAREN          reduce using rule 89 (arg_list_opt -> arg_list .)
    COMMA           shift and go to state 248


state 225

    (90) arg_list_opt -> empty .

    RPAREN          reduce using rule 90 (arg_list_opt -> empty .)


state 226

    (92) arg_list -> argument .

    COMMA           reduce using rule 92 (arg_list -> argument .)
    RPAREN          reduce using rule 92 (arg_list -> argument .)


state 227

    (93) argument -> IDENT . COLON expression
    (27) primary -> IDENT . LBRACE field_assign_list RBRACE
    (103) primary -> IDENT .

    COLON           shift and go to state 249
    LBRACE          shift and go to state 166
    LPAREN          reduce using rule 103 (primary -> IDENT .)
    DOT             reduce using rule 103 (primary -> IDENT .)
    DDCOLON         reduce using rule 103 (primary -> IDENT .)
    ARROW           reduce using rule 103 (primary -> IDENT .)
    LBRACKET        reduce using rule 103 (primary -> IDENT .)
    PLUS            reduce using rule 103 (primary -> IDENT .)
    MINUS           reduce using rule 103 (primary -> IDENT .)
    TIMES           reduce using rule 103 (primary -> IDENT .)
    DIVIDE          reduce using rule 103 (primary -> IDENT .)
    MOD             reduce using rule 103 (primary -> IDENT .)
    LE              reduce using rule 103 (primary -> IDENT .)
    LT              reduce using rule 103 (primary -> IDENT .)
    GE              reduce using rule 103 (primary -> IDENT .)
    GT              reduce using rule 103 (primary -> IDENT .)
    EQ              reduce using rule 103 (primary -> IDENT .)
    NE              reduce using rule 103 (primary -> IDENT .)
    COMMA           reduce using rule 103 (primary -> IDENT .)
    RPAREN          reduce using rule 103 (primary -> IDENT .)


state 228

    (94) argument -> expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    COMMA           reduce using rule 94 (argument -> expression .)
    RPAREN          reduce using rule 94 (argument -> expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 229

    (85) call_suffix -> DOT IDENT .

    EQUAL           reduce using rule 85 (call_suffix -> DOT IDENT .)
    LPAREN          reduce using rule 85 (call_suffix -> DOT IDENT .)
    DOT             reduce using rule 85 (call_suffix -> DOT IDENT .)
    DDCOLON         reduce using rule 85 (call_suffix -> DOT IDENT .)
    ARROW           reduce using rule 85 (call_suffix -> DOT IDENT .)
    LBRACKET        reduce using rule 85 (call_suffix -> DOT IDENT .)
    SEMI            reduce using rule 85 (call_suffix -> DOT IDENT .)
    PLUS            reduce using rule 85 (call_suffix -> DOT IDENT .)
    MINUS           reduce using rule 85 (call_suffix -> DOT IDENT .)
    TIMES           reduce using rule 85 (call_suffix -> DOT IDENT .)
    DIVIDE          reduce using rule 85 (call_suffix -> DOT IDENT .)
    MOD             reduce using rule 85 (call_suffix -> DOT IDENT .)
    LE              reduce using rule 85 (call_suffix -> DOT IDENT .)
    LT              reduce using rule 85 (call_suffix -> DOT IDENT .)
    GE              reduce using rule 85 (call_suffix -> DOT IDENT .)
    GT              reduce using rule 85 (call_suffix -> DOT IDENT .)
    EQ              reduce using rule 85 (call_suffix -> DOT IDENT .)
    NE              reduce using rule 85 (call_suffix -> DOT IDENT .)
    LBRACE          reduce using rule 85 (call_suffix -> DOT IDENT .)
    RPAREN          reduce using rule 85 (call_suffix -> DOT IDENT .)
    COMMA           reduce using rule 85 (call_suffix -> DOT IDENT .)
    RBRACKET        reduce using rule 85 (call_suffix -> DOT IDENT .)
    RBRACE          reduce using rule 85 (call_suffix -> DOT IDENT .)
    IDENT           reduce using rule 85 (call_suffix -> DOT IDENT .)


state 230

    (86) call_suffix -> DDCOLON IDENT .

    EQUAL           reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    LPAREN          reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    DOT             reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    DDCOLON         reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    ARROW           reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    LBRACKET        reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    SEMI            reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    PLUS            reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    MINUS           reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    TIMES           reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    DIVIDE          reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    MOD             reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    LE              reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    LT              reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    GE              reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    GT              reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    EQ              reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    NE              reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    LBRACE          reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    RPAREN          reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    COMMA           reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    RBRACKET        reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    RBRACE          reduce using rule 86 (call_suffix -> DDCOLON IDENT .)
    IDENT           reduce using rule 86 (call_suffix -> DDCOLON IDENT .)


state 231

    (87) call_suffix -> ARROW IDENT .

    EQUAL           reduce using rule 87 (call_suffix -> ARROW IDENT .)
    LPAREN          reduce using rule 87 (call_suffix -> ARROW IDENT .)
    DOT             reduce using rule 87 (call_suffix -> ARROW IDENT .)
    DDCOLON         reduce using rule 87 (call_suffix -> ARROW IDENT .)
    ARROW           reduce using rule 87 (call_suffix -> ARROW IDENT .)
    LBRACKET        reduce using rule 87 (call_suffix -> ARROW IDENT .)
    SEMI            reduce using rule 87 (call_suffix -> ARROW IDENT .)
    PLUS            reduce using rule 87 (call_suffix -> ARROW IDENT .)
    MINUS           reduce using rule 87 (call_suffix -> ARROW IDENT .)
    TIMES           reduce using rule 87 (call_suffix -> ARROW IDENT .)
    DIVIDE          reduce using rule 87 (call_suffix -> ARROW IDENT .)
    MOD             reduce using rule 87 (call_suffix -> ARROW IDENT .)
    LE              reduce using rule 87 (call_suffix -> ARROW IDENT .)
    LT              reduce using rule 87 (call_suffix -> ARROW IDENT .)
    GE              reduce using rule 87 (call_suffix -> ARROW IDENT .)
    GT              reduce using rule 87 (call_suffix -> ARROW IDENT .)
    EQ              reduce using rule 87 (call_suffix -> ARROW IDENT .)
    NE              reduce using rule 87 (call_suffix -> ARROW IDENT .)
    LBRACE          reduce using rule 87 (call_suffix -> ARROW IDENT .)
    RPAREN          reduce using rule 87 (call_suffix -> ARROW IDENT .)
    COMMA           reduce using rule 87 (call_suffix -> ARROW IDENT .)
    RBRACKET        reduce using rule 87 (call_suffix -> ARROW IDENT .)
    RBRACE          reduce using rule 87 (call_suffix -> ARROW IDENT .)
    IDENT           reduce using rule 87 (call_suffix -> ARROW IDENT .)


state 232

    (88) call_suffix -> LBRACKET expression . RBRACKET
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    RBRACKET        shift and go to state 250
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 233

    (95) primary -> LPAREN expression RPAREN .

    EQUAL           reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    DOT             reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    DDCOLON         reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    MOD             reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    LE              reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    LT              reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    GE              reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    GT              reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    EQ              reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    NE              reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 95 (primary -> LPAREN expression RPAREN .)
    IDENT           reduce using rule 95 (primary -> LPAREN expression RPAREN .)


state 234

    (96) primary -> LBRACKET expr_list_opt RBRACKET .

    EQUAL           reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LPAREN          reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DOT             reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DDCOLON         reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    ARROW           reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LBRACKET        reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    SEMI            reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    PLUS            reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    MINUS           reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    TIMES           reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DIVIDE          reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    MOD             reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LE              reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LT              reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    GE              reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    GT              reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    EQ              reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    NE              reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LBRACE          reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RPAREN          reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    COMMA           reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RBRACKET        reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RBRACE          reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)
    IDENT           reduce using rule 96 (primary -> LBRACKET expr_list_opt RBRACKET .)


state 235

    (99) expr_list -> expr_list COMMA . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 251
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 236

    (106) primary -> NEW qualified_identifier LPAREN . arg_list_opt RPAREN
    (89) arg_list_opt -> . arg_list
    (90) arg_list_opt -> . empty
    (91) arg_list -> . arg_list COMMA argument
    (92) arg_list -> . argument
    (109) empty -> .
    (93) argument -> . IDENT COLON expression
    (94) argument -> . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RPAREN          reduce using rule 109 (empty -> .)
    IDENT           shift and go to state 227
    MINUS           shift and go to state 154
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    arg_list_opt                   shift and go to state 252
    arg_list                       shift and go to state 224
    empty                          shift and go to state 225
    argument                       shift and go to state 226
    expression                     shift and go to state 228
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 237

    (120) qualified_identifier -> IDENT DDCOLON . IDENT

    IDENT           shift and go to state 253


state 238

    (108) primary -> FN LPAREN parameters_opt . RPAREN return_opt block

    RPAREN          shift and go to state 254


state 239

    (66) var_decl -> LET IDENT COLON type_expr . EQUAL expression SEMI
    (67) var_decl -> LET IDENT COLON type_expr . SEMI

    EQUAL           shift and go to state 255
    SEMI            shift and go to state 256


state 240

    (31) field_assign -> IDENT COLON . expression opt_comma
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 257
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 241

    (27) primary -> IDENT LBRACE field_assign_list RBRACE .

    EQUAL           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LPAREN          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DOT             reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DDCOLON         reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    ARROW           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LBRACKET        reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    SEMI            reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    PLUS            reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    MINUS           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    TIMES           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DIVIDE          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    MOD             reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LE              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LT              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    GE              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    GT              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    EQ              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    NE              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LBRACE          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RPAREN          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    COMMA           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RBRACKET        reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RBRACE          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    IDENT           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)


state 242

    (28) field_assign_list -> field_assign_list field_assign .

    RBRACE          reduce using rule 28 (field_assign_list -> field_assign_list field_assign .)
    IDENT           reduce using rule 28 (field_assign_list -> field_assign_list field_assign .)


state 243

    (110) if_statement -> IF expression block else_clause_opt .

    RBRACE          reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    LET             reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    RETURN          reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    IF              reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    WHILE           reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    FOR             reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    MINUS           reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    IDENT           reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    LPAREN          reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    LBRACKET        reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    NUMBER          reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    STRING          reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    TRUE            reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    FALSE           reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    NEW             reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)
    FN              reduce using rule 110 (if_statement -> IF expression block else_clause_opt .)


state 244

    (111) else_clause_opt -> ELSE . if_statement
    (112) else_clause_opt -> ELSE . block
    (110) if_statement -> . IF expression block else_clause_opt
    (56) block -> . LBRACE statement_list RBRACE

    IF              shift and go to state 150
    LBRACE          shift and go to state 121

    if_statement                   shift and go to state 258
    block                          shift and go to state 259

state 245

    (113) else_clause_opt -> empty .

    RBRACE          reduce using rule 113 (else_clause_opt -> empty .)
    LET             reduce using rule 113 (else_clause_opt -> empty .)
    RETURN          reduce using rule 113 (else_clause_opt -> empty .)
    IF              reduce using rule 113 (else_clause_opt -> empty .)
    WHILE           reduce using rule 113 (else_clause_opt -> empty .)
    FOR             reduce using rule 113 (else_clause_opt -> empty .)
    MINUS           reduce using rule 113 (else_clause_opt -> empty .)
    IDENT           reduce using rule 113 (else_clause_opt -> empty .)
    LPAREN          reduce using rule 113 (else_clause_opt -> empty .)
    LBRACKET        reduce using rule 113 (else_clause_opt -> empty .)
    NUMBER          reduce using rule 113 (else_clause_opt -> empty .)
    STRING          reduce using rule 113 (else_clause_opt -> empty .)
    TRUE            reduce using rule 113 (else_clause_opt -> empty .)
    FALSE           reduce using rule 113 (else_clause_opt -> empty .)
    NEW             reduce using rule 113 (else_clause_opt -> empty .)
    FN              reduce using rule 113 (else_clause_opt -> empty .)


state 246

    (124) for_stmt -> FOR IDENT COLON type_expr . IN expression block

    IN              shift and go to state 260


state 247

    (84) call_suffix -> LPAREN arg_list_opt RPAREN .

    EQUAL           reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LPAREN          reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DOT             reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DDCOLON         reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    ARROW           reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LBRACKET        reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    SEMI            reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    PLUS            reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    MINUS           reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    TIMES           reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DIVIDE          reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    MOD             reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LE              reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LT              reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    GE              reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    GT              reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    EQ              reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    NE              reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LBRACE          reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RPAREN          reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    COMMA           reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RBRACKET        reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RBRACE          reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    IDENT           reduce using rule 84 (call_suffix -> LPAREN arg_list_opt RPAREN .)


state 248

    (91) arg_list -> arg_list COMMA . argument
    (93) argument -> . IDENT COLON expression
    (94) argument -> . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 227
    MINUS           shift and go to state 154
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    argument                       shift and go to state 261
    expression                     shift and go to state 228
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 249

    (93) argument -> IDENT COLON . expression
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 262
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 250

    (88) call_suffix -> LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    DOT             reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    DDCOLON         reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    MOD             reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    LE              reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    LT              reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    GE              reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    GT              reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    EQ              reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    NE              reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)
    IDENT           reduce using rule 88 (call_suffix -> LBRACKET expression RBRACKET .)


state 251

    (99) expr_list -> expr_list COMMA expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    COMMA           reduce using rule 99 (expr_list -> expr_list COMMA expression .)
    RBRACKET        reduce using rule 99 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 252

    (106) primary -> NEW qualified_identifier LPAREN arg_list_opt . RPAREN

    RPAREN          shift and go to state 263


state 253

    (120) qualified_identifier -> IDENT DDCOLON IDENT .

    LPAREN          reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    EQUAL           reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    DOT             reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    DDCOLON         reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    ARROW           reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    LBRACKET        reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    SEMI            reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    PLUS            reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    MINUS           reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    TIMES           reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    DIVIDE          reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    MOD             reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    LE              reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    LT              reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    GE              reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    GT              reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    EQ              reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    NE              reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    LBRACE          reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    RPAREN          reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    COMMA           reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    RBRACKET        reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    RBRACE          reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)
    IDENT           reduce using rule 120 (qualified_identifier -> IDENT DDCOLON IDENT .)


state 254

    (108) primary -> FN LPAREN parameters_opt RPAREN . return_opt block
    (46) return_opt -> . ARROW type_expr
    (47) return_opt -> . empty
    (109) empty -> .

    ARROW           shift and go to state 100
    LBRACE          reduce using rule 109 (empty -> .)

    return_opt                     shift and go to state 264
    empty                          shift and go to state 101

state 255

    (66) var_decl -> LET IDENT COLON type_expr EQUAL . expression SEMI
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 265
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 256

    (67) var_decl -> LET IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LET             reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    RETURN          reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    IF              reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    WHILE           reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    FOR             reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    MINUS           reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    IDENT           reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LPAREN          reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LBRACKET        reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    NUMBER          reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    STRING          reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    TRUE            reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    FALSE           reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    NEW             reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)
    FN              reduce using rule 67 (var_decl -> LET IDENT COLON type_expr SEMI .)


state 257

    (31) field_assign -> IDENT COLON expression . opt_comma
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression
    (32) opt_comma -> . COMMA
    (33) opt_comma -> . empty
    (109) empty -> .

    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178
    COMMA           shift and go to state 112
    RBRACE          reduce using rule 109 (empty -> .)
    IDENT           reduce using rule 109 (empty -> .)

    opt_comma                      shift and go to state 266
    empty                          shift and go to state 113

state 258

    (111) else_clause_opt -> ELSE if_statement .

    RBRACE          reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    LET             reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    RETURN          reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    IF              reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    WHILE           reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    FOR             reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    MINUS           reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    IDENT           reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    LPAREN          reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    LBRACKET        reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    NUMBER          reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    STRING          reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    TRUE            reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    FALSE           reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    NEW             reduce using rule 111 (else_clause_opt -> ELSE if_statement .)
    FN              reduce using rule 111 (else_clause_opt -> ELSE if_statement .)


state 259

    (112) else_clause_opt -> ELSE block .

    RBRACE          reduce using rule 112 (else_clause_opt -> ELSE block .)
    LET             reduce using rule 112 (else_clause_opt -> ELSE block .)
    RETURN          reduce using rule 112 (else_clause_opt -> ELSE block .)
    IF              reduce using rule 112 (else_clause_opt -> ELSE block .)
    WHILE           reduce using rule 112 (else_clause_opt -> ELSE block .)
    FOR             reduce using rule 112 (else_clause_opt -> ELSE block .)
    MINUS           reduce using rule 112 (else_clause_opt -> ELSE block .)
    IDENT           reduce using rule 112 (else_clause_opt -> ELSE block .)
    LPAREN          reduce using rule 112 (else_clause_opt -> ELSE block .)
    LBRACKET        reduce using rule 112 (else_clause_opt -> ELSE block .)
    NUMBER          reduce using rule 112 (else_clause_opt -> ELSE block .)
    STRING          reduce using rule 112 (else_clause_opt -> ELSE block .)
    TRUE            reduce using rule 112 (else_clause_opt -> ELSE block .)
    FALSE           reduce using rule 112 (else_clause_opt -> ELSE block .)
    NEW             reduce using rule 112 (else_clause_opt -> ELSE block .)
    FN              reduce using rule 112 (else_clause_opt -> ELSE block .)


state 260

    (124) for_stmt -> FOR IDENT COLON type_expr IN . expression block
    (70) expression -> . call_expr
    (71) expression -> . expression PLUS expression
    (72) expression -> . expression MINUS expression
    (73) expression -> . expression TIMES expression
    (74) expression -> . expression DIVIDE expression
    (75) expression -> . expression MOD expression
    (76) expression -> . expression LE expression
    (77) expression -> . expression LT expression
    (78) expression -> . expression GE expression
    (79) expression -> . expression GT expression
    (80) expression -> . expression EQ expression
    (81) expression -> . expression NE expression
    (122) expression -> . MINUS expression
    (82) call_expr -> . call_expr call_suffix
    (83) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (95) primary -> . LPAREN expression RPAREN
    (96) primary -> . LBRACKET expr_list_opt RBRACKET
    (101) primary -> . NUMBER
    (102) primary -> . STRING
    (103) primary -> . IDENT
    (104) primary -> . TRUE
    (105) primary -> . FALSE
    (106) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (107) primary -> . NEW qualified_identifier
    (108) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 154
    IDENT           shift and go to state 146
    LPAREN          shift and go to state 156
    LBRACKET        shift and go to state 157
    NUMBER          shift and go to state 158
    STRING          shift and go to state 159
    TRUE            shift and go to state 160
    FALSE           shift and go to state 161
    NEW             shift and go to state 162
    FN              shift and go to state 163

    expression                     shift and go to state 267
    call_expr                      shift and go to state 181
    primary                        shift and go to state 155

state 261

    (91) arg_list -> arg_list COMMA argument .

    COMMA           reduce using rule 91 (arg_list -> arg_list COMMA argument .)
    RPAREN          reduce using rule 91 (arg_list -> arg_list COMMA argument .)


state 262

    (93) argument -> IDENT COLON expression .
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    COMMA           reduce using rule 93 (argument -> IDENT COLON expression .)
    RPAREN          reduce using rule 93 (argument -> IDENT COLON expression .)
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 263

    (106) primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .

    EQUAL           reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LPAREN          reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    DOT             reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    DDCOLON         reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    ARROW           reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LBRACKET        reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    SEMI            reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    PLUS            reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    MINUS           reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    TIMES           reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    DIVIDE          reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    MOD             reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LE              reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LT              reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    GE              reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    GT              reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    EQ              reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    NE              reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LBRACE          reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    RPAREN          reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    COMMA           reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    RBRACKET        reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    RBRACE          reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    IDENT           reduce using rule 106 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)


state 264

    (108) primary -> FN LPAREN parameters_opt RPAREN return_opt . block
    (56) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 121

    block                          shift and go to state 268

state 265

    (66) var_decl -> LET IDENT COLON type_expr EQUAL expression . SEMI
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression

    SEMI            shift and go to state 269
    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178


state 266

    (31) field_assign -> IDENT COLON expression opt_comma .

    RBRACE          reduce using rule 31 (field_assign -> IDENT COLON expression opt_comma .)
    IDENT           reduce using rule 31 (field_assign -> IDENT COLON expression opt_comma .)


state 267

    (124) for_stmt -> FOR IDENT COLON type_expr IN expression . block
    (71) expression -> expression . PLUS expression
    (72) expression -> expression . MINUS expression
    (73) expression -> expression . TIMES expression
    (74) expression -> expression . DIVIDE expression
    (75) expression -> expression . MOD expression
    (76) expression -> expression . LE expression
    (77) expression -> expression . LT expression
    (78) expression -> expression . GE expression
    (79) expression -> expression . GT expression
    (80) expression -> expression . EQ expression
    (81) expression -> expression . NE expression
    (56) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 168
    MINUS           shift and go to state 169
    TIMES           shift and go to state 170
    DIVIDE          shift and go to state 171
    MOD             shift and go to state 172
    LE              shift and go to state 173
    LT              shift and go to state 174
    GE              shift and go to state 175
    GT              shift and go to state 176
    EQ              shift and go to state 177
    NE              shift and go to state 178
    LBRACE          shift and go to state 121

    block                          shift and go to state 270

state 268

    (108) primary -> FN LPAREN parameters_opt RPAREN return_opt block .

    EQUAL           reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LPAREN          reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DOT             reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DDCOLON         reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    ARROW           reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LBRACKET        reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    SEMI            reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    PLUS            reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    MINUS           reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    TIMES           reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DIVIDE          reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    MOD             reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LE              reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LT              reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    GE              reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    GT              reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    EQ              reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    NE              reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LBRACE          reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RPAREN          reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    COMMA           reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RBRACKET        reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RBRACE          reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    IDENT           reduce using rule 108 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)


state 269

    (66) var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .

    RBRACE          reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LET             reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    RETURN          reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    IF              reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    WHILE           reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    FOR             reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    MINUS           reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    IDENT           reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LPAREN          reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LBRACKET        reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    NUMBER          reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    STRING          reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    TRUE            reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    FALSE           reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    NEW             reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    FN              reduce using rule 66 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)


state 270

    (124) for_stmt -> FOR IDENT COLON type_expr IN expression block .

    RBRACE          reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    LET             reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    RETURN          reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    IF              reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    WHILE           reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    FOR             reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    MINUS           reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    IDENT           reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    LPAREN          reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    LBRACKET        reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    NUMBER          reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    STRING          reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    TRUE            reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    FALSE           reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    NEW             reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    FN              reduce using rule 124 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENT in state 42 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 146 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 166 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 198 resolved as shift
WARNING: shift/reduce conflict for DDCOLON in state 199 resolved as shift
