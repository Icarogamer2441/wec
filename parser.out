Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> opt_module decl_list
Rule 2     opt_module -> module_decl
Rule 3     opt_module -> empty
Rule 4     decl_list -> decl_list decl
Rule 5     decl_list -> decl
Rule 6     decl -> class_def
Rule 7     decl -> struct_def
Rule 8     decl -> enum_def
Rule 9     decl -> join_def
Rule 10    decl -> implement_decl
Rule 11    decl -> function
Rule 12    decl -> import_decl
Rule 13    decl -> python_import
Rule 14    decl -> pyfn_decl
Rule 15    decl -> pytype_decl
Rule 16    module_decl -> MODULE IDENT SEMI
Rule 17    struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE
Rule 18    enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE
Rule 19    join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
Rule 20    field_decl_list -> field_decl_list field_decl
Rule 21    field_decl_list -> field_decl
Rule 22    field_decl_list -> empty
Rule 23    field_decl -> IDENT COLON type_expr opt_comma
Rule 24    enum_variant_list -> enum_variant_list COMMA IDENT
Rule 25    enum_variant_list -> IDENT
Rule 26    enum_variant_list -> empty
Rule 27    primary -> IDENT LBRACE field_assign_list RBRACE
Rule 28    field_assign_list -> field_assign_list field_assign
Rule 29    field_assign_list -> field_assign
Rule 30    field_assign_list -> empty
Rule 31    field_assign -> IDENT COLON expression opt_comma
Rule 32    opt_comma -> COMMA
Rule 33    opt_comma -> empty
Rule 34    class_def -> CLASS IDENT LBRACE class_body RBRACE
Rule 35    class_body -> class_body class_member
Rule 36    class_body -> class_member
Rule 37    class_member -> PUBLIC IDENT COLON type_expr SEMI
Rule 38    class_member -> LET IDENT COLON type_expr SEMI
Rule 39    class_member -> function
Rule 40    function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block
Rule 41    parameters_opt -> parameters
Rule 42    parameters_opt -> empty
Rule 43    parameters -> parameters COMMA parameter
Rule 44    parameters -> parameter
Rule 45    parameter -> IDENT COLON type_expr
Rule 46    return_opt -> ARROW type_expr
Rule 47    return_opt -> empty
Rule 48    type_expr -> simple_type_expr array_spec_opt
Rule 49    simple_type_expr -> IDENT type_access_opt
Rule 50    array_spec_opt -> LBRACKET NUMBER RBRACKET
Rule 51    array_spec_opt -> empty
Rule 52    type_access_opt -> type_access_opt_part
Rule 53    type_access_opt -> empty
Rule 54    type_access_opt_part -> DOT IDENT
Rule 55    type_access_opt_part -> DDCOLON IDENT
Rule 56    block -> LBRACE statement_list RBRACE
Rule 57    statement_list -> statement_list statement
Rule 58    statement_list -> empty
Rule 59    statement -> var_decl
Rule 60    statement -> assignment_statement
Rule 61    statement -> return_statement
Rule 62    statement -> expr_statement
Rule 63    statement -> if_statement
Rule 64    statement -> while_stmt
Rule 65    statement -> for_stmt
Rule 66    statement -> throw_statement
Rule 67    statement -> try_catch_statement
Rule 68    var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI
Rule 69    var_decl -> LET IDENT COLON type_expr SEMI
Rule 70    return_statement -> RETURN expression SEMI
Rule 71    expr_statement -> expression SEMI
Rule 72    expression -> call_expr
Rule 73    expression -> expression PLUS expression
Rule 74    expression -> expression MINUS expression
Rule 75    expression -> expression TIMES expression
Rule 76    expression -> expression DIVIDE expression
Rule 77    expression -> expression MOD expression
Rule 78    expression -> expression LE expression
Rule 79    expression -> expression LT expression
Rule 80    expression -> expression GE expression
Rule 81    expression -> expression GT expression
Rule 82    expression -> expression EQ expression
Rule 83    expression -> expression NE expression
Rule 84    call_expr -> call_expr call_suffix
Rule 85    call_expr -> primary
Rule 86    call_suffix -> LPAREN arg_list_opt RPAREN
Rule 87    call_suffix -> DOT IDENT
Rule 88    call_suffix -> DDCOLON IDENT
Rule 89    call_suffix -> ARROW IDENT
Rule 90    call_suffix -> LBRACKET expression RBRACKET
Rule 91    arg_list_opt -> arg_list
Rule 92    arg_list_opt -> empty
Rule 93    arg_list -> arg_list COMMA argument
Rule 94    arg_list -> argument
Rule 95    argument -> IDENT COLON expression
Rule 96    argument -> expression
Rule 97    primary -> LPAREN expression RPAREN
Rule 98    primary -> LBRACKET expr_list_opt RBRACKET
Rule 99    expr_list_opt -> expr_list
Rule 100   expr_list_opt -> empty
Rule 101   expr_list -> expr_list COMMA expression
Rule 102   expr_list -> expression
Rule 103   primary -> NUMBER
Rule 104   primary -> STRING
Rule 105   primary -> IDENT
Rule 106   primary -> TRUE
Rule 107   primary -> FALSE
Rule 108   primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN
Rule 109   primary -> NEW qualified_identifier
Rule 110   primary -> FN LPAREN parameters_opt RPAREN return_opt block
Rule 111   empty -> <empty>
Rule 112   if_statement -> IF expression block elif_clauses else_clause_opt
Rule 113   elif_clauses -> elif_clauses elif_clause
Rule 114   elif_clauses -> elif_clause
Rule 115   elif_clauses -> empty
Rule 116   elif_clause -> ELSE IF expression block
Rule 117   else_clause_opt -> ELSE block
Rule 118   else_clause_opt -> empty
Rule 119   implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
Rule 120   method_list -> method_list function
Rule 121   method_list -> function
Rule 122   assignment_statement -> assignment SEMI
Rule 123   assignment -> call_expr EQUAL expression
Rule 124   import_decl -> IMPORT STRING SEMI
Rule 125   qualified_identifier -> IDENT DDCOLON IDENT
Rule 126   qualified_identifier -> IDENT
Rule 127   expression -> MINUS expression
Rule 128   while_stmt -> WHILE expression block
Rule 129   for_stmt -> FOR IDENT COLON type_expr IN expression block
Rule 130   python_import -> PYTHON IMPORT IDENT SEMI
Rule 131   pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block
Rule 132   code_block -> LBRACE CODE_STRING RBRACE
Rule 133   pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI
Rule 134   throw_statement -> THROW expression SEMI
Rule 135   try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block

Terminals, with rules where they appear

AND                  : 19
ARROW                : 46 89 131
AS                   : 19
CATCH                : 135
CLASS                : 34
CODE_STRING          : 132 133
COLON                : 23 31 37 38 45 68 69 95 129 135
COMMA                : 24 32 43 93 101
DDCOLON              : 55 88 125
DIVIDE               : 76
DOT                  : 54 87
ELSE                 : 116 117
ENUM                 : 18
EQ                   : 82
EQUAL                : 68 123 133
FALSE                : 107
FN                   : 40 110
FOR                  : 129
GE                   : 80
GT                   : 81
IDENT                : 16 17 18 19 19 19 23 24 25 27 31 34 37 38 40 45 49 54 55 68 69 87 88 89 95 105 119 119 125 125 126 129 130 131 133 135
IF                   : 112 116
IMPLEMENT            : 119
IMPORT               : 124 130
IN                   : 129
JOIN                 : 19
LBRACE               : 17 18 19 27 34 56 119 132
LBRACKET             : 50 90 98
LE                   : 78
LET                  : 38 68 69
LPAREN               : 40 86 97 108 110 131 135
LT                   : 79
MINUS                : 74 127
MOD                  : 77
MODULE               : 16
NE                   : 83
NEW                  : 108 109
NUMBER               : 50 103
PLUS                 : 73
PUBLIC               : 37
PYFN                 : 131
PYTHON               : 130
PYTYPE               : 133
RBRACE               : 17 18 19 27 34 56 119 132
RBRACKET             : 50 90 98
RETURN               : 70
RPAREN               : 40 86 97 108 110 131 135
SEMI                 : 16 37 38 68 69 70 71 122 124 130 133 134
STRING               : 104 124
STRUCT               : 17
THROW                : 134
TIMES                : 75
TRUE                 : 106
TRY                  : 135
USES                 : 119
WHILE                : 128
error                : 

Nonterminals, with rules where they appear

arg_list             : 91 93
arg_list_opt         : 86 108
argument             : 93 94
array_spec_opt       : 48
assignment           : 122
assignment_statement : 60
block                : 40 110 112 116 117 128 129 135 135
call_expr            : 72 84 123
call_suffix          : 84
class_body           : 34 35
class_def            : 6
class_member         : 35 36
code_block           : 131
decl                 : 4 5
decl_list            : 1 4
elif_clause          : 113 114
elif_clauses         : 112 113
else_clause_opt      : 112
empty                : 3 22 26 30 33 42 47 51 53 58 92 100 115 118
enum_def             : 8
enum_variant_list    : 18 24
expr_list            : 99 101
expr_list_opt        : 98
expr_statement       : 62
expression           : 31 68 70 71 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 83 90 95 96 97 101 102 112 116 123 127 128 129 134
field_assign         : 28 29
field_assign_list    : 27 28
field_decl           : 20 21
field_decl_list      : 17 19 20
for_stmt             : 65
function             : 11 39 120 121
if_statement         : 63
implement_decl       : 10
import_decl          : 12
join_def             : 9
method_list          : 119 120
module_decl          : 2
opt_comma            : 23 31
opt_module           : 1
parameter            : 43 44
parameters           : 41 43
parameters_opt       : 40 110 131
primary              : 85
program              : 0
pyfn_decl            : 14
python_import        : 13
pytype_decl          : 15
qualified_identifier : 108 109
return_opt           : 40 110
return_statement     : 61
simple_type_expr     : 48
statement            : 57
statement_list       : 56 57
struct_def           : 7
throw_statement      : 66
try_catch_statement  : 67
type_access_opt      : 49
type_access_opt_part : 52
type_expr            : 23 37 38 45 46 68 69 129 131 135
var_decl             : 59
while_stmt           : 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . opt_module decl_list
    (2) opt_module -> . module_decl
    (3) opt_module -> . empty
    (16) module_decl -> . MODULE IDENT SEMI
    (111) empty -> .

    MODULE          shift and go to state 5
    CLASS           reduce using rule 111 (empty -> .)
    STRUCT          reduce using rule 111 (empty -> .)
    ENUM            reduce using rule 111 (empty -> .)
    JOIN            reduce using rule 111 (empty -> .)
    IMPLEMENT       reduce using rule 111 (empty -> .)
    FN              reduce using rule 111 (empty -> .)
    IMPORT          reduce using rule 111 (empty -> .)
    PYTHON          reduce using rule 111 (empty -> .)
    PYFN            reduce using rule 111 (empty -> .)
    PYTYPE          reduce using rule 111 (empty -> .)

    program                        shift and go to state 1
    opt_module                     shift and go to state 2
    module_decl                    shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> opt_module . decl_list
    (4) decl_list -> . decl_list decl
    (5) decl_list -> . decl
    (6) decl -> . class_def
    (7) decl -> . struct_def
    (8) decl -> . enum_def
    (9) decl -> . join_def
    (10) decl -> . implement_decl
    (11) decl -> . function
    (12) decl -> . import_decl
    (13) decl -> . python_import
    (14) decl -> . pyfn_decl
    (15) decl -> . pytype_decl
    (34) class_def -> . CLASS IDENT LBRACE class_body RBRACE
    (17) struct_def -> . STRUCT IDENT LBRACE field_decl_list RBRACE
    (18) enum_def -> . ENUM IDENT LBRACE enum_variant_list RBRACE
    (19) join_def -> . JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
    (119) implement_decl -> . IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block
    (124) import_decl -> . IMPORT STRING SEMI
    (130) python_import -> . PYTHON IMPORT IDENT SEMI
    (131) pyfn_decl -> . PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block
    (133) pytype_decl -> . PYTYPE IDENT EQUAL CODE_STRING SEMI

    CLASS           shift and go to state 18
    STRUCT          shift and go to state 19
    ENUM            shift and go to state 20
    JOIN            shift and go to state 21
    IMPLEMENT       shift and go to state 22
    FN              shift and go to state 23
    IMPORT          shift and go to state 24
    PYTHON          shift and go to state 25
    PYFN            shift and go to state 26
    PYTYPE          shift and go to state 27

    decl_list                      shift and go to state 6
    decl                           shift and go to state 7
    class_def                      shift and go to state 8
    struct_def                     shift and go to state 9
    enum_def                       shift and go to state 10
    join_def                       shift and go to state 11
    implement_decl                 shift and go to state 12
    function                       shift and go to state 13
    import_decl                    shift and go to state 14
    python_import                  shift and go to state 15
    pyfn_decl                      shift and go to state 16
    pytype_decl                    shift and go to state 17

state 3

    (2) opt_module -> module_decl .

    CLASS           reduce using rule 2 (opt_module -> module_decl .)
    STRUCT          reduce using rule 2 (opt_module -> module_decl .)
    ENUM            reduce using rule 2 (opt_module -> module_decl .)
    JOIN            reduce using rule 2 (opt_module -> module_decl .)
    IMPLEMENT       reduce using rule 2 (opt_module -> module_decl .)
    FN              reduce using rule 2 (opt_module -> module_decl .)
    IMPORT          reduce using rule 2 (opt_module -> module_decl .)
    PYTHON          reduce using rule 2 (opt_module -> module_decl .)
    PYFN            reduce using rule 2 (opt_module -> module_decl .)
    PYTYPE          reduce using rule 2 (opt_module -> module_decl .)


state 4

    (3) opt_module -> empty .

    CLASS           reduce using rule 3 (opt_module -> empty .)
    STRUCT          reduce using rule 3 (opt_module -> empty .)
    ENUM            reduce using rule 3 (opt_module -> empty .)
    JOIN            reduce using rule 3 (opt_module -> empty .)
    IMPLEMENT       reduce using rule 3 (opt_module -> empty .)
    FN              reduce using rule 3 (opt_module -> empty .)
    IMPORT          reduce using rule 3 (opt_module -> empty .)
    PYTHON          reduce using rule 3 (opt_module -> empty .)
    PYFN            reduce using rule 3 (opt_module -> empty .)
    PYTYPE          reduce using rule 3 (opt_module -> empty .)


state 5

    (16) module_decl -> MODULE . IDENT SEMI

    IDENT           shift and go to state 28


state 6

    (1) program -> opt_module decl_list .
    (4) decl_list -> decl_list . decl
    (6) decl -> . class_def
    (7) decl -> . struct_def
    (8) decl -> . enum_def
    (9) decl -> . join_def
    (10) decl -> . implement_decl
    (11) decl -> . function
    (12) decl -> . import_decl
    (13) decl -> . python_import
    (14) decl -> . pyfn_decl
    (15) decl -> . pytype_decl
    (34) class_def -> . CLASS IDENT LBRACE class_body RBRACE
    (17) struct_def -> . STRUCT IDENT LBRACE field_decl_list RBRACE
    (18) enum_def -> . ENUM IDENT LBRACE enum_variant_list RBRACE
    (19) join_def -> . JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
    (119) implement_decl -> . IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block
    (124) import_decl -> . IMPORT STRING SEMI
    (130) python_import -> . PYTHON IMPORT IDENT SEMI
    (131) pyfn_decl -> . PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block
    (133) pytype_decl -> . PYTYPE IDENT EQUAL CODE_STRING SEMI

    $end            reduce using rule 1 (program -> opt_module decl_list .)
    CLASS           shift and go to state 18
    STRUCT          shift and go to state 19
    ENUM            shift and go to state 20
    JOIN            shift and go to state 21
    IMPLEMENT       shift and go to state 22
    FN              shift and go to state 23
    IMPORT          shift and go to state 24
    PYTHON          shift and go to state 25
    PYFN            shift and go to state 26
    PYTYPE          shift and go to state 27

    decl                           shift and go to state 29
    class_def                      shift and go to state 8
    struct_def                     shift and go to state 9
    enum_def                       shift and go to state 10
    join_def                       shift and go to state 11
    implement_decl                 shift and go to state 12
    function                       shift and go to state 13
    import_decl                    shift and go to state 14
    python_import                  shift and go to state 15
    pyfn_decl                      shift and go to state 16
    pytype_decl                    shift and go to state 17

state 7

    (5) decl_list -> decl .

    CLASS           reduce using rule 5 (decl_list -> decl .)
    STRUCT          reduce using rule 5 (decl_list -> decl .)
    ENUM            reduce using rule 5 (decl_list -> decl .)
    JOIN            reduce using rule 5 (decl_list -> decl .)
    IMPLEMENT       reduce using rule 5 (decl_list -> decl .)
    FN              reduce using rule 5 (decl_list -> decl .)
    IMPORT          reduce using rule 5 (decl_list -> decl .)
    PYTHON          reduce using rule 5 (decl_list -> decl .)
    PYFN            reduce using rule 5 (decl_list -> decl .)
    PYTYPE          reduce using rule 5 (decl_list -> decl .)
    $end            reduce using rule 5 (decl_list -> decl .)


state 8

    (6) decl -> class_def .

    CLASS           reduce using rule 6 (decl -> class_def .)
    STRUCT          reduce using rule 6 (decl -> class_def .)
    ENUM            reduce using rule 6 (decl -> class_def .)
    JOIN            reduce using rule 6 (decl -> class_def .)
    IMPLEMENT       reduce using rule 6 (decl -> class_def .)
    FN              reduce using rule 6 (decl -> class_def .)
    IMPORT          reduce using rule 6 (decl -> class_def .)
    PYTHON          reduce using rule 6 (decl -> class_def .)
    PYFN            reduce using rule 6 (decl -> class_def .)
    PYTYPE          reduce using rule 6 (decl -> class_def .)
    $end            reduce using rule 6 (decl -> class_def .)


state 9

    (7) decl -> struct_def .

    CLASS           reduce using rule 7 (decl -> struct_def .)
    STRUCT          reduce using rule 7 (decl -> struct_def .)
    ENUM            reduce using rule 7 (decl -> struct_def .)
    JOIN            reduce using rule 7 (decl -> struct_def .)
    IMPLEMENT       reduce using rule 7 (decl -> struct_def .)
    FN              reduce using rule 7 (decl -> struct_def .)
    IMPORT          reduce using rule 7 (decl -> struct_def .)
    PYTHON          reduce using rule 7 (decl -> struct_def .)
    PYFN            reduce using rule 7 (decl -> struct_def .)
    PYTYPE          reduce using rule 7 (decl -> struct_def .)
    $end            reduce using rule 7 (decl -> struct_def .)


state 10

    (8) decl -> enum_def .

    CLASS           reduce using rule 8 (decl -> enum_def .)
    STRUCT          reduce using rule 8 (decl -> enum_def .)
    ENUM            reduce using rule 8 (decl -> enum_def .)
    JOIN            reduce using rule 8 (decl -> enum_def .)
    IMPLEMENT       reduce using rule 8 (decl -> enum_def .)
    FN              reduce using rule 8 (decl -> enum_def .)
    IMPORT          reduce using rule 8 (decl -> enum_def .)
    PYTHON          reduce using rule 8 (decl -> enum_def .)
    PYFN            reduce using rule 8 (decl -> enum_def .)
    PYTYPE          reduce using rule 8 (decl -> enum_def .)
    $end            reduce using rule 8 (decl -> enum_def .)


state 11

    (9) decl -> join_def .

    CLASS           reduce using rule 9 (decl -> join_def .)
    STRUCT          reduce using rule 9 (decl -> join_def .)
    ENUM            reduce using rule 9 (decl -> join_def .)
    JOIN            reduce using rule 9 (decl -> join_def .)
    IMPLEMENT       reduce using rule 9 (decl -> join_def .)
    FN              reduce using rule 9 (decl -> join_def .)
    IMPORT          reduce using rule 9 (decl -> join_def .)
    PYTHON          reduce using rule 9 (decl -> join_def .)
    PYFN            reduce using rule 9 (decl -> join_def .)
    PYTYPE          reduce using rule 9 (decl -> join_def .)
    $end            reduce using rule 9 (decl -> join_def .)


state 12

    (10) decl -> implement_decl .

    CLASS           reduce using rule 10 (decl -> implement_decl .)
    STRUCT          reduce using rule 10 (decl -> implement_decl .)
    ENUM            reduce using rule 10 (decl -> implement_decl .)
    JOIN            reduce using rule 10 (decl -> implement_decl .)
    IMPLEMENT       reduce using rule 10 (decl -> implement_decl .)
    FN              reduce using rule 10 (decl -> implement_decl .)
    IMPORT          reduce using rule 10 (decl -> implement_decl .)
    PYTHON          reduce using rule 10 (decl -> implement_decl .)
    PYFN            reduce using rule 10 (decl -> implement_decl .)
    PYTYPE          reduce using rule 10 (decl -> implement_decl .)
    $end            reduce using rule 10 (decl -> implement_decl .)


state 13

    (11) decl -> function .

    CLASS           reduce using rule 11 (decl -> function .)
    STRUCT          reduce using rule 11 (decl -> function .)
    ENUM            reduce using rule 11 (decl -> function .)
    JOIN            reduce using rule 11 (decl -> function .)
    IMPLEMENT       reduce using rule 11 (decl -> function .)
    FN              reduce using rule 11 (decl -> function .)
    IMPORT          reduce using rule 11 (decl -> function .)
    PYTHON          reduce using rule 11 (decl -> function .)
    PYFN            reduce using rule 11 (decl -> function .)
    PYTYPE          reduce using rule 11 (decl -> function .)
    $end            reduce using rule 11 (decl -> function .)


state 14

    (12) decl -> import_decl .

    CLASS           reduce using rule 12 (decl -> import_decl .)
    STRUCT          reduce using rule 12 (decl -> import_decl .)
    ENUM            reduce using rule 12 (decl -> import_decl .)
    JOIN            reduce using rule 12 (decl -> import_decl .)
    IMPLEMENT       reduce using rule 12 (decl -> import_decl .)
    FN              reduce using rule 12 (decl -> import_decl .)
    IMPORT          reduce using rule 12 (decl -> import_decl .)
    PYTHON          reduce using rule 12 (decl -> import_decl .)
    PYFN            reduce using rule 12 (decl -> import_decl .)
    PYTYPE          reduce using rule 12 (decl -> import_decl .)
    $end            reduce using rule 12 (decl -> import_decl .)


state 15

    (13) decl -> python_import .

    CLASS           reduce using rule 13 (decl -> python_import .)
    STRUCT          reduce using rule 13 (decl -> python_import .)
    ENUM            reduce using rule 13 (decl -> python_import .)
    JOIN            reduce using rule 13 (decl -> python_import .)
    IMPLEMENT       reduce using rule 13 (decl -> python_import .)
    FN              reduce using rule 13 (decl -> python_import .)
    IMPORT          reduce using rule 13 (decl -> python_import .)
    PYTHON          reduce using rule 13 (decl -> python_import .)
    PYFN            reduce using rule 13 (decl -> python_import .)
    PYTYPE          reduce using rule 13 (decl -> python_import .)
    $end            reduce using rule 13 (decl -> python_import .)


state 16

    (14) decl -> pyfn_decl .

    CLASS           reduce using rule 14 (decl -> pyfn_decl .)
    STRUCT          reduce using rule 14 (decl -> pyfn_decl .)
    ENUM            reduce using rule 14 (decl -> pyfn_decl .)
    JOIN            reduce using rule 14 (decl -> pyfn_decl .)
    IMPLEMENT       reduce using rule 14 (decl -> pyfn_decl .)
    FN              reduce using rule 14 (decl -> pyfn_decl .)
    IMPORT          reduce using rule 14 (decl -> pyfn_decl .)
    PYTHON          reduce using rule 14 (decl -> pyfn_decl .)
    PYFN            reduce using rule 14 (decl -> pyfn_decl .)
    PYTYPE          reduce using rule 14 (decl -> pyfn_decl .)
    $end            reduce using rule 14 (decl -> pyfn_decl .)


state 17

    (15) decl -> pytype_decl .

    CLASS           reduce using rule 15 (decl -> pytype_decl .)
    STRUCT          reduce using rule 15 (decl -> pytype_decl .)
    ENUM            reduce using rule 15 (decl -> pytype_decl .)
    JOIN            reduce using rule 15 (decl -> pytype_decl .)
    IMPLEMENT       reduce using rule 15 (decl -> pytype_decl .)
    FN              reduce using rule 15 (decl -> pytype_decl .)
    IMPORT          reduce using rule 15 (decl -> pytype_decl .)
    PYTHON          reduce using rule 15 (decl -> pytype_decl .)
    PYFN            reduce using rule 15 (decl -> pytype_decl .)
    PYTYPE          reduce using rule 15 (decl -> pytype_decl .)
    $end            reduce using rule 15 (decl -> pytype_decl .)


state 18

    (34) class_def -> CLASS . IDENT LBRACE class_body RBRACE

    IDENT           shift and go to state 30


state 19

    (17) struct_def -> STRUCT . IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 31


state 20

    (18) enum_def -> ENUM . IDENT LBRACE enum_variant_list RBRACE

    IDENT           shift and go to state 32


state 21

    (19) join_def -> JOIN . IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 33


state 22

    (119) implement_decl -> IMPLEMENT . IDENT USES IDENT LBRACE method_list RBRACE

    IDENT           shift and go to state 34


state 23

    (40) function -> FN . IDENT LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 35


state 24

    (124) import_decl -> IMPORT . STRING SEMI

    STRING          shift and go to state 36


state 25

    (130) python_import -> PYTHON . IMPORT IDENT SEMI

    IMPORT          shift and go to state 37


state 26

    (131) pyfn_decl -> PYFN . IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block

    IDENT           shift and go to state 38


state 27

    (133) pytype_decl -> PYTYPE . IDENT EQUAL CODE_STRING SEMI

    IDENT           shift and go to state 39


state 28

    (16) module_decl -> MODULE IDENT . SEMI

    SEMI            shift and go to state 40


state 29

    (4) decl_list -> decl_list decl .

    CLASS           reduce using rule 4 (decl_list -> decl_list decl .)
    STRUCT          reduce using rule 4 (decl_list -> decl_list decl .)
    ENUM            reduce using rule 4 (decl_list -> decl_list decl .)
    JOIN            reduce using rule 4 (decl_list -> decl_list decl .)
    IMPLEMENT       reduce using rule 4 (decl_list -> decl_list decl .)
    FN              reduce using rule 4 (decl_list -> decl_list decl .)
    IMPORT          reduce using rule 4 (decl_list -> decl_list decl .)
    PYTHON          reduce using rule 4 (decl_list -> decl_list decl .)
    PYFN            reduce using rule 4 (decl_list -> decl_list decl .)
    PYTYPE          reduce using rule 4 (decl_list -> decl_list decl .)
    $end            reduce using rule 4 (decl_list -> decl_list decl .)


state 30

    (34) class_def -> CLASS IDENT . LBRACE class_body RBRACE

    LBRACE          shift and go to state 41


state 31

    (17) struct_def -> STRUCT IDENT . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 42


state 32

    (18) enum_def -> ENUM IDENT . LBRACE enum_variant_list RBRACE

    LBRACE          shift and go to state 43


state 33

    (19) join_def -> JOIN IDENT . AND IDENT AS IDENT LBRACE field_decl_list RBRACE

    AND             shift and go to state 44


state 34

    (119) implement_decl -> IMPLEMENT IDENT . USES IDENT LBRACE method_list RBRACE

    USES            shift and go to state 45


state 35

    (40) function -> FN IDENT . LPAREN parameters_opt RPAREN return_opt block

    LPAREN          shift and go to state 46


state 36

    (124) import_decl -> IMPORT STRING . SEMI

    SEMI            shift and go to state 47


state 37

    (130) python_import -> PYTHON IMPORT . IDENT SEMI

    IDENT           shift and go to state 48


state 38

    (131) pyfn_decl -> PYFN IDENT . LPAREN parameters_opt RPAREN ARROW type_expr code_block

    LPAREN          shift and go to state 49


state 39

    (133) pytype_decl -> PYTYPE IDENT . EQUAL CODE_STRING SEMI

    EQUAL           shift and go to state 50


state 40

    (16) module_decl -> MODULE IDENT SEMI .

    CLASS           reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    STRUCT          reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    ENUM            reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    JOIN            reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    IMPLEMENT       reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    FN              reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    IMPORT          reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    PYTHON          reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    PYFN            reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)
    PYTYPE          reduce using rule 16 (module_decl -> MODULE IDENT SEMI .)


state 41

    (34) class_def -> CLASS IDENT LBRACE . class_body RBRACE
    (35) class_body -> . class_body class_member
    (36) class_body -> . class_member
    (37) class_member -> . PUBLIC IDENT COLON type_expr SEMI
    (38) class_member -> . LET IDENT COLON type_expr SEMI
    (39) class_member -> . function
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    PUBLIC          shift and go to state 53
    LET             shift and go to state 54
    FN              shift and go to state 23

    class_body                     shift and go to state 51
    class_member                   shift and go to state 52
    function                       shift and go to state 55

state 42

    (17) struct_def -> STRUCT IDENT LBRACE . field_decl_list RBRACE
    (20) field_decl_list -> . field_decl_list field_decl
    (21) field_decl_list -> . field_decl
    (22) field_decl_list -> . empty
    (23) field_decl -> . IDENT COLON type_expr opt_comma
    (111) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 56
    RBRACE          reduce using rule 111 (empty -> .)

  ! IDENT           [ reduce using rule 111 (empty -> .) ]

    field_decl_list                shift and go to state 57
    field_decl                     shift and go to state 58
    empty                          shift and go to state 59

state 43

    (18) enum_def -> ENUM IDENT LBRACE . enum_variant_list RBRACE
    (24) enum_variant_list -> . enum_variant_list COMMA IDENT
    (25) enum_variant_list -> . IDENT
    (26) enum_variant_list -> . empty
    (111) empty -> .

    IDENT           shift and go to state 60
    RBRACE          reduce using rule 111 (empty -> .)
    COMMA           reduce using rule 111 (empty -> .)

    enum_variant_list              shift and go to state 61
    empty                          shift and go to state 62

state 44

    (19) join_def -> JOIN IDENT AND . IDENT AS IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 63


state 45

    (119) implement_decl -> IMPLEMENT IDENT USES . IDENT LBRACE method_list RBRACE

    IDENT           shift and go to state 64


state 46

    (40) function -> FN IDENT LPAREN . parameters_opt RPAREN return_opt block
    (41) parameters_opt -> . parameters
    (42) parameters_opt -> . empty
    (43) parameters -> . parameters COMMA parameter
    (44) parameters -> . parameter
    (111) empty -> .
    (45) parameter -> . IDENT COLON type_expr

    RPAREN          reduce using rule 111 (empty -> .)
    IDENT           shift and go to state 65

    parameters_opt                 shift and go to state 66
    parameters                     shift and go to state 67
    empty                          shift and go to state 68
    parameter                      shift and go to state 69

state 47

    (124) import_decl -> IMPORT STRING SEMI .

    CLASS           reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    STRUCT          reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    ENUM            reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    JOIN            reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    IMPLEMENT       reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    FN              reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    IMPORT          reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    PYTHON          reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    PYFN            reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    PYTYPE          reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)
    $end            reduce using rule 124 (import_decl -> IMPORT STRING SEMI .)


state 48

    (130) python_import -> PYTHON IMPORT IDENT . SEMI

    SEMI            shift and go to state 70


state 49

    (131) pyfn_decl -> PYFN IDENT LPAREN . parameters_opt RPAREN ARROW type_expr code_block
    (41) parameters_opt -> . parameters
    (42) parameters_opt -> . empty
    (43) parameters -> . parameters COMMA parameter
    (44) parameters -> . parameter
    (111) empty -> .
    (45) parameter -> . IDENT COLON type_expr

    RPAREN          reduce using rule 111 (empty -> .)
    IDENT           shift and go to state 65

    parameters_opt                 shift and go to state 71
    parameters                     shift and go to state 67
    empty                          shift and go to state 68
    parameter                      shift and go to state 69

state 50

    (133) pytype_decl -> PYTYPE IDENT EQUAL . CODE_STRING SEMI

    CODE_STRING     shift and go to state 72


state 51

    (34) class_def -> CLASS IDENT LBRACE class_body . RBRACE
    (35) class_body -> class_body . class_member
    (37) class_member -> . PUBLIC IDENT COLON type_expr SEMI
    (38) class_member -> . LET IDENT COLON type_expr SEMI
    (39) class_member -> . function
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 73
    PUBLIC          shift and go to state 53
    LET             shift and go to state 54
    FN              shift and go to state 23

    class_member                   shift and go to state 74
    function                       shift and go to state 55

state 52

    (36) class_body -> class_member .

    RBRACE          reduce using rule 36 (class_body -> class_member .)
    PUBLIC          reduce using rule 36 (class_body -> class_member .)
    LET             reduce using rule 36 (class_body -> class_member .)
    FN              reduce using rule 36 (class_body -> class_member .)


state 53

    (37) class_member -> PUBLIC . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 75


state 54

    (38) class_member -> LET . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 76


state 55

    (39) class_member -> function .

    RBRACE          reduce using rule 39 (class_member -> function .)
    PUBLIC          reduce using rule 39 (class_member -> function .)
    LET             reduce using rule 39 (class_member -> function .)
    FN              reduce using rule 39 (class_member -> function .)


state 56

    (23) field_decl -> IDENT . COLON type_expr opt_comma

    COLON           shift and go to state 77


state 57

    (17) struct_def -> STRUCT IDENT LBRACE field_decl_list . RBRACE
    (20) field_decl_list -> field_decl_list . field_decl
    (23) field_decl -> . IDENT COLON type_expr opt_comma

    RBRACE          shift and go to state 78
    IDENT           shift and go to state 56

    field_decl                     shift and go to state 79

state 58

    (21) field_decl_list -> field_decl .

    RBRACE          reduce using rule 21 (field_decl_list -> field_decl .)
    IDENT           reduce using rule 21 (field_decl_list -> field_decl .)


state 59

    (22) field_decl_list -> empty .

    RBRACE          reduce using rule 22 (field_decl_list -> empty .)
    IDENT           reduce using rule 22 (field_decl_list -> empty .)


state 60

    (25) enum_variant_list -> IDENT .

    RBRACE          reduce using rule 25 (enum_variant_list -> IDENT .)
    COMMA           reduce using rule 25 (enum_variant_list -> IDENT .)


state 61

    (18) enum_def -> ENUM IDENT LBRACE enum_variant_list . RBRACE
    (24) enum_variant_list -> enum_variant_list . COMMA IDENT

    RBRACE          shift and go to state 80
    COMMA           shift and go to state 81


state 62

    (26) enum_variant_list -> empty .

    RBRACE          reduce using rule 26 (enum_variant_list -> empty .)
    COMMA           reduce using rule 26 (enum_variant_list -> empty .)


state 63

    (19) join_def -> JOIN IDENT AND IDENT . AS IDENT LBRACE field_decl_list RBRACE

    AS              shift and go to state 82


state 64

    (119) implement_decl -> IMPLEMENT IDENT USES IDENT . LBRACE method_list RBRACE

    LBRACE          shift and go to state 83


state 65

    (45) parameter -> IDENT . COLON type_expr

    COLON           shift and go to state 84


state 66

    (40) function -> FN IDENT LPAREN parameters_opt . RPAREN return_opt block

    RPAREN          shift and go to state 85


state 67

    (41) parameters_opt -> parameters .
    (43) parameters -> parameters . COMMA parameter

    RPAREN          reduce using rule 41 (parameters_opt -> parameters .)
    COMMA           shift and go to state 86


state 68

    (42) parameters_opt -> empty .

    RPAREN          reduce using rule 42 (parameters_opt -> empty .)


state 69

    (44) parameters -> parameter .

    COMMA           reduce using rule 44 (parameters -> parameter .)
    RPAREN          reduce using rule 44 (parameters -> parameter .)


state 70

    (130) python_import -> PYTHON IMPORT IDENT SEMI .

    CLASS           reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    STRUCT          reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    ENUM            reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    JOIN            reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    IMPLEMENT       reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    FN              reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    IMPORT          reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    PYTHON          reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    PYFN            reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    PYTYPE          reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)
    $end            reduce using rule 130 (python_import -> PYTHON IMPORT IDENT SEMI .)


state 71

    (131) pyfn_decl -> PYFN IDENT LPAREN parameters_opt . RPAREN ARROW type_expr code_block

    RPAREN          shift and go to state 87


state 72

    (133) pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING . SEMI

    SEMI            shift and go to state 88


state 73

    (34) class_def -> CLASS IDENT LBRACE class_body RBRACE .

    CLASS           reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    STRUCT          reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    ENUM            reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    JOIN            reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    IMPLEMENT       reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    FN              reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    IMPORT          reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    PYTHON          reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    PYFN            reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    PYTYPE          reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    $end            reduce using rule 34 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)


state 74

    (35) class_body -> class_body class_member .

    RBRACE          reduce using rule 35 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 35 (class_body -> class_body class_member .)
    LET             reduce using rule 35 (class_body -> class_body class_member .)
    FN              reduce using rule 35 (class_body -> class_body class_member .)


state 75

    (37) class_member -> PUBLIC IDENT . COLON type_expr SEMI

    COLON           shift and go to state 89


state 76

    (38) class_member -> LET IDENT . COLON type_expr SEMI

    COLON           shift and go to state 90


state 77

    (23) field_decl -> IDENT COLON . type_expr opt_comma
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 92
    simple_type_expr               shift and go to state 93

state 78

    (17) struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .

    CLASS           reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    STRUCT          reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    ENUM            reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    JOIN            reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    IMPLEMENT       reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    FN              reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    IMPORT          reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    PYTHON          reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    PYFN            reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    PYTYPE          reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    $end            reduce using rule 17 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)


state 79

    (20) field_decl_list -> field_decl_list field_decl .

    RBRACE          reduce using rule 20 (field_decl_list -> field_decl_list field_decl .)
    IDENT           reduce using rule 20 (field_decl_list -> field_decl_list field_decl .)


state 80

    (18) enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .

    CLASS           reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    STRUCT          reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    ENUM            reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    JOIN            reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    IMPLEMENT       reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    FN              reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    IMPORT          reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    PYTHON          reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    PYFN            reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    PYTYPE          reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    $end            reduce using rule 18 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)


state 81

    (24) enum_variant_list -> enum_variant_list COMMA . IDENT

    IDENT           shift and go to state 94


state 82

    (19) join_def -> JOIN IDENT AND IDENT AS . IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 95


state 83

    (119) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE . method_list RBRACE
    (120) method_list -> . method_list function
    (121) method_list -> . function
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    FN              shift and go to state 23

    method_list                    shift and go to state 96
    function                       shift and go to state 97

state 84

    (45) parameter -> IDENT COLON . type_expr
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 98
    simple_type_expr               shift and go to state 93

state 85

    (40) function -> FN IDENT LPAREN parameters_opt RPAREN . return_opt block
    (46) return_opt -> . ARROW type_expr
    (47) return_opt -> . empty
    (111) empty -> .

    ARROW           shift and go to state 100
    LBRACE          reduce using rule 111 (empty -> .)

    return_opt                     shift and go to state 99
    empty                          shift and go to state 101

state 86

    (43) parameters -> parameters COMMA . parameter
    (45) parameter -> . IDENT COLON type_expr

    IDENT           shift and go to state 65

    parameter                      shift and go to state 102

state 87

    (131) pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN . ARROW type_expr code_block

    ARROW           shift and go to state 103


state 88

    (133) pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .

    CLASS           reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    STRUCT          reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    ENUM            reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    JOIN            reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    IMPLEMENT       reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    FN              reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    IMPORT          reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    PYTHON          reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    PYFN            reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    PYTYPE          reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)
    $end            reduce using rule 133 (pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI .)


state 89

    (37) class_member -> PUBLIC IDENT COLON . type_expr SEMI
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 104
    simple_type_expr               shift and go to state 93

state 90

    (38) class_member -> LET IDENT COLON . type_expr SEMI
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 105
    simple_type_expr               shift and go to state 93

state 91

    (49) simple_type_expr -> IDENT . type_access_opt
    (52) type_access_opt -> . type_access_opt_part
    (53) type_access_opt -> . empty
    (54) type_access_opt_part -> . DOT IDENT
    (55) type_access_opt_part -> . DDCOLON IDENT
    (111) empty -> .

    DOT             shift and go to state 109
    DDCOLON         shift and go to state 110
    LBRACKET        reduce using rule 111 (empty -> .)
    COMMA           reduce using rule 111 (empty -> .)
    RBRACE          reduce using rule 111 (empty -> .)
    IDENT           reduce using rule 111 (empty -> .)
    RPAREN          reduce using rule 111 (empty -> .)
    SEMI            reduce using rule 111 (empty -> .)
    LBRACE          reduce using rule 111 (empty -> .)
    EQUAL           reduce using rule 111 (empty -> .)
    IN              reduce using rule 111 (empty -> .)

    type_access_opt                shift and go to state 106
    type_access_opt_part           shift and go to state 107
    empty                          shift and go to state 108

state 92

    (23) field_decl -> IDENT COLON type_expr . opt_comma
    (32) opt_comma -> . COMMA
    (33) opt_comma -> . empty
    (111) empty -> .

    COMMA           shift and go to state 112
    RBRACE          reduce using rule 111 (empty -> .)
    IDENT           reduce using rule 111 (empty -> .)

    opt_comma                      shift and go to state 111
    empty                          shift and go to state 113

state 93

    (48) type_expr -> simple_type_expr . array_spec_opt
    (50) array_spec_opt -> . LBRACKET NUMBER RBRACKET
    (51) array_spec_opt -> . empty
    (111) empty -> .

    LBRACKET        shift and go to state 115
    COMMA           reduce using rule 111 (empty -> .)
    RBRACE          reduce using rule 111 (empty -> .)
    IDENT           reduce using rule 111 (empty -> .)
    RPAREN          reduce using rule 111 (empty -> .)
    SEMI            reduce using rule 111 (empty -> .)
    LBRACE          reduce using rule 111 (empty -> .)
    EQUAL           reduce using rule 111 (empty -> .)
    IN              reduce using rule 111 (empty -> .)

    array_spec_opt                 shift and go to state 114
    empty                          shift and go to state 116

state 94

    (24) enum_variant_list -> enum_variant_list COMMA IDENT .

    RBRACE          reduce using rule 24 (enum_variant_list -> enum_variant_list COMMA IDENT .)
    COMMA           reduce using rule 24 (enum_variant_list -> enum_variant_list COMMA IDENT .)


state 95

    (19) join_def -> JOIN IDENT AND IDENT AS IDENT . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 117


state 96

    (119) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list . RBRACE
    (120) method_list -> method_list . function
    (40) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 118
    FN              shift and go to state 23

    function                       shift and go to state 119

state 97

    (121) method_list -> function .

    RBRACE          reduce using rule 121 (method_list -> function .)
    FN              reduce using rule 121 (method_list -> function .)


state 98

    (45) parameter -> IDENT COLON type_expr .

    COMMA           reduce using rule 45 (parameter -> IDENT COLON type_expr .)
    RPAREN          reduce using rule 45 (parameter -> IDENT COLON type_expr .)


state 99

    (40) function -> FN IDENT LPAREN parameters_opt RPAREN return_opt . block
    (56) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 121

    block                          shift and go to state 120

state 100

    (46) return_opt -> ARROW . type_expr
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 122
    simple_type_expr               shift and go to state 93

state 101

    (47) return_opt -> empty .

    LBRACE          reduce using rule 47 (return_opt -> empty .)


state 102

    (43) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 43 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 43 (parameters -> parameters COMMA parameter .)


state 103

    (131) pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW . type_expr code_block
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 123
    simple_type_expr               shift and go to state 93

state 104

    (37) class_member -> PUBLIC IDENT COLON type_expr . SEMI

    SEMI            shift and go to state 124


state 105

    (38) class_member -> LET IDENT COLON type_expr . SEMI

    SEMI            shift and go to state 125


state 106

    (49) simple_type_expr -> IDENT type_access_opt .

    LBRACKET        reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    COMMA           reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    RBRACE          reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    IDENT           reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    RPAREN          reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    SEMI            reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    LBRACE          reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    EQUAL           reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)
    IN              reduce using rule 49 (simple_type_expr -> IDENT type_access_opt .)


state 107

    (52) type_access_opt -> type_access_opt_part .

    LBRACKET        reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    COMMA           reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    RBRACE          reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    IDENT           reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    RPAREN          reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    SEMI            reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    LBRACE          reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    EQUAL           reduce using rule 52 (type_access_opt -> type_access_opt_part .)
    IN              reduce using rule 52 (type_access_opt -> type_access_opt_part .)


state 108

    (53) type_access_opt -> empty .

    LBRACKET        reduce using rule 53 (type_access_opt -> empty .)
    COMMA           reduce using rule 53 (type_access_opt -> empty .)
    RBRACE          reduce using rule 53 (type_access_opt -> empty .)
    IDENT           reduce using rule 53 (type_access_opt -> empty .)
    RPAREN          reduce using rule 53 (type_access_opt -> empty .)
    SEMI            reduce using rule 53 (type_access_opt -> empty .)
    LBRACE          reduce using rule 53 (type_access_opt -> empty .)
    EQUAL           reduce using rule 53 (type_access_opt -> empty .)
    IN              reduce using rule 53 (type_access_opt -> empty .)


state 109

    (54) type_access_opt_part -> DOT . IDENT

    IDENT           shift and go to state 126


state 110

    (55) type_access_opt_part -> DDCOLON . IDENT

    IDENT           shift and go to state 127


state 111

    (23) field_decl -> IDENT COLON type_expr opt_comma .

    RBRACE          reduce using rule 23 (field_decl -> IDENT COLON type_expr opt_comma .)
    IDENT           reduce using rule 23 (field_decl -> IDENT COLON type_expr opt_comma .)


state 112

    (32) opt_comma -> COMMA .

    RBRACE          reduce using rule 32 (opt_comma -> COMMA .)
    IDENT           reduce using rule 32 (opt_comma -> COMMA .)


state 113

    (33) opt_comma -> empty .

    RBRACE          reduce using rule 33 (opt_comma -> empty .)
    IDENT           reduce using rule 33 (opt_comma -> empty .)


state 114

    (48) type_expr -> simple_type_expr array_spec_opt .

    COMMA           reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    RBRACE          reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    IDENT           reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    RPAREN          reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    SEMI            reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    LBRACE          reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    EQUAL           reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)
    IN              reduce using rule 48 (type_expr -> simple_type_expr array_spec_opt .)


state 115

    (50) array_spec_opt -> LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 128


state 116

    (51) array_spec_opt -> empty .

    COMMA           reduce using rule 51 (array_spec_opt -> empty .)
    RBRACE          reduce using rule 51 (array_spec_opt -> empty .)
    IDENT           reduce using rule 51 (array_spec_opt -> empty .)
    RPAREN          reduce using rule 51 (array_spec_opt -> empty .)
    SEMI            reduce using rule 51 (array_spec_opt -> empty .)
    LBRACE          reduce using rule 51 (array_spec_opt -> empty .)
    EQUAL           reduce using rule 51 (array_spec_opt -> empty .)
    IN              reduce using rule 51 (array_spec_opt -> empty .)


state 117

    (19) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE . field_decl_list RBRACE
    (20) field_decl_list -> . field_decl_list field_decl
    (21) field_decl_list -> . field_decl
    (22) field_decl_list -> . empty
    (23) field_decl -> . IDENT COLON type_expr opt_comma
    (111) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 56
    RBRACE          reduce using rule 111 (empty -> .)

  ! IDENT           [ reduce using rule 111 (empty -> .) ]

    field_decl_list                shift and go to state 129
    field_decl                     shift and go to state 58
    empty                          shift and go to state 59

state 118

    (119) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .

    CLASS           reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    STRUCT          reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    ENUM            reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    JOIN            reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    IMPLEMENT       reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    FN              reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    IMPORT          reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    PYTHON          reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    PYFN            reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    PYTYPE          reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    $end            reduce using rule 119 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)


state 119

    (120) method_list -> method_list function .

    RBRACE          reduce using rule 120 (method_list -> method_list function .)
    FN              reduce using rule 120 (method_list -> method_list function .)


state 120

    (40) function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .

    CLASS           reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    STRUCT          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    ENUM            reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    JOIN            reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    IMPLEMENT       reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    FN              reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    IMPORT          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PYTHON          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PYFN            reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PYTYPE          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    $end            reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    RBRACE          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PUBLIC          reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    LET             reduce using rule 40 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)


state 121

    (56) block -> LBRACE . statement_list RBRACE
    (57) statement_list -> . statement_list statement
    (58) statement_list -> . empty
    (111) empty -> .

    RBRACE          reduce using rule 111 (empty -> .)
    LET             reduce using rule 111 (empty -> .)
    RETURN          reduce using rule 111 (empty -> .)
    IF              reduce using rule 111 (empty -> .)
    WHILE           reduce using rule 111 (empty -> .)
    FOR             reduce using rule 111 (empty -> .)
    THROW           reduce using rule 111 (empty -> .)
    TRY             reduce using rule 111 (empty -> .)
    MINUS           reduce using rule 111 (empty -> .)
    IDENT           reduce using rule 111 (empty -> .)
    LPAREN          reduce using rule 111 (empty -> .)
    LBRACKET        reduce using rule 111 (empty -> .)
    NUMBER          reduce using rule 111 (empty -> .)
    STRING          reduce using rule 111 (empty -> .)
    TRUE            reduce using rule 111 (empty -> .)
    FALSE           reduce using rule 111 (empty -> .)
    NEW             reduce using rule 111 (empty -> .)
    FN              reduce using rule 111 (empty -> .)

    statement_list                 shift and go to state 130
    empty                          shift and go to state 131

state 122

    (46) return_opt -> ARROW type_expr .

    LBRACE          reduce using rule 46 (return_opt -> ARROW type_expr .)


state 123

    (131) pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr . code_block
    (132) code_block -> . LBRACE CODE_STRING RBRACE

    LBRACE          shift and go to state 133

    code_block                     shift and go to state 132

state 124

    (37) class_member -> PUBLIC IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 37 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    PUBLIC          reduce using rule 37 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    LET             reduce using rule 37 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    FN              reduce using rule 37 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)


state 125

    (38) class_member -> LET IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 38 (class_member -> LET IDENT COLON type_expr SEMI .)
    PUBLIC          reduce using rule 38 (class_member -> LET IDENT COLON type_expr SEMI .)
    LET             reduce using rule 38 (class_member -> LET IDENT COLON type_expr SEMI .)
    FN              reduce using rule 38 (class_member -> LET IDENT COLON type_expr SEMI .)


state 126

    (54) type_access_opt_part -> DOT IDENT .

    LBRACKET        reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    COMMA           reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    RBRACE          reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    IDENT           reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    RPAREN          reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    SEMI            reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    LBRACE          reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    EQUAL           reduce using rule 54 (type_access_opt_part -> DOT IDENT .)
    IN              reduce using rule 54 (type_access_opt_part -> DOT IDENT .)


state 127

    (55) type_access_opt_part -> DDCOLON IDENT .

    LBRACKET        reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    COMMA           reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    RBRACE          reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    IDENT           reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    RPAREN          reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    SEMI            reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    LBRACE          reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    EQUAL           reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)
    IN              reduce using rule 55 (type_access_opt_part -> DDCOLON IDENT .)


state 128

    (50) array_spec_opt -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 134


state 129

    (19) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list . RBRACE
    (20) field_decl_list -> field_decl_list . field_decl
    (23) field_decl -> . IDENT COLON type_expr opt_comma

    RBRACE          shift and go to state 135
    IDENT           shift and go to state 56

    field_decl                     shift and go to state 79

state 130

    (56) block -> LBRACE statement_list . RBRACE
    (57) statement_list -> statement_list . statement
    (59) statement -> . var_decl
    (60) statement -> . assignment_statement
    (61) statement -> . return_statement
    (62) statement -> . expr_statement
    (63) statement -> . if_statement
    (64) statement -> . while_stmt
    (65) statement -> . for_stmt
    (66) statement -> . throw_statement
    (67) statement -> . try_catch_statement
    (68) var_decl -> . LET IDENT COLON type_expr EQUAL expression SEMI
    (69) var_decl -> . LET IDENT COLON type_expr SEMI
    (122) assignment_statement -> . assignment SEMI
    (70) return_statement -> . RETURN expression SEMI
    (71) expr_statement -> . expression SEMI
    (112) if_statement -> . IF expression block elif_clauses else_clause_opt
    (128) while_stmt -> . WHILE expression block
    (129) for_stmt -> . FOR IDENT COLON type_expr IN expression block
    (134) throw_statement -> . THROW expression SEMI
    (135) try_catch_statement -> . TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block
    (123) assignment -> . call_expr EQUAL expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 136
    LET             shift and go to state 147
    RETURN          shift and go to state 151
    IF              shift and go to state 152
    WHILE           shift and go to state 153
    FOR             shift and go to state 154
    THROW           shift and go to state 155
    TRY             shift and go to state 156
    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    statement                      shift and go to state 137
    var_decl                       shift and go to state 138
    assignment_statement           shift and go to state 139
    return_statement               shift and go to state 140
    expr_statement                 shift and go to state 141
    if_statement                   shift and go to state 142
    while_stmt                     shift and go to state 143
    for_stmt                       shift and go to state 144
    throw_statement                shift and go to state 145
    try_catch_statement            shift and go to state 146
    expression                     shift and go to state 149
    assignment                     shift and go to state 150
    call_expr                      shift and go to state 158
    primary                        shift and go to state 160

state 131

    (58) statement_list -> empty .

    RBRACE          reduce using rule 58 (statement_list -> empty .)
    LET             reduce using rule 58 (statement_list -> empty .)
    RETURN          reduce using rule 58 (statement_list -> empty .)
    IF              reduce using rule 58 (statement_list -> empty .)
    WHILE           reduce using rule 58 (statement_list -> empty .)
    FOR             reduce using rule 58 (statement_list -> empty .)
    THROW           reduce using rule 58 (statement_list -> empty .)
    TRY             reduce using rule 58 (statement_list -> empty .)
    MINUS           reduce using rule 58 (statement_list -> empty .)
    IDENT           reduce using rule 58 (statement_list -> empty .)
    LPAREN          reduce using rule 58 (statement_list -> empty .)
    LBRACKET        reduce using rule 58 (statement_list -> empty .)
    NUMBER          reduce using rule 58 (statement_list -> empty .)
    STRING          reduce using rule 58 (statement_list -> empty .)
    TRUE            reduce using rule 58 (statement_list -> empty .)
    FALSE           reduce using rule 58 (statement_list -> empty .)
    NEW             reduce using rule 58 (statement_list -> empty .)
    FN              reduce using rule 58 (statement_list -> empty .)


state 132

    (131) pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .

    CLASS           reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    STRUCT          reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    ENUM            reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    JOIN            reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    IMPLEMENT       reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    FN              reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    IMPORT          reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    PYTHON          reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    PYFN            reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    PYTYPE          reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)
    $end            reduce using rule 131 (pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block .)


state 133

    (132) code_block -> LBRACE . CODE_STRING RBRACE

    CODE_STRING     shift and go to state 168


state 134

    (50) array_spec_opt -> LBRACKET NUMBER RBRACKET .

    COMMA           reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    IDENT           reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    SEMI            reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    LBRACE          reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    IN              reduce using rule 50 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)


state 135

    (19) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .

    CLASS           reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    STRUCT          reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    ENUM            reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    JOIN            reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    IMPLEMENT       reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    FN              reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    IMPORT          reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    PYTHON          reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    PYFN            reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    PYTYPE          reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    $end            reduce using rule 19 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)


state 136

    (56) block -> LBRACE statement_list RBRACE .

    CLASS           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    STRUCT          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    ENUM            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    JOIN            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    IMPLEMENT       reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    FN              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PYTHON          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PYFN            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PYTYPE          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PUBLIC          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LET             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    CATCH           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    THROW           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    TRY             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    IDENT           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    NEW             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    EQUAL           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    DOT             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    DDCOLON         reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    ARROW           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    MOD             reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 56 (block -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 56 (block -> LBRACE statement_list RBRACE .)


state 137

    (57) statement_list -> statement_list statement .

    RBRACE          reduce using rule 57 (statement_list -> statement_list statement .)
    LET             reduce using rule 57 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 57 (statement_list -> statement_list statement .)
    IF              reduce using rule 57 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 57 (statement_list -> statement_list statement .)
    FOR             reduce using rule 57 (statement_list -> statement_list statement .)
    THROW           reduce using rule 57 (statement_list -> statement_list statement .)
    TRY             reduce using rule 57 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 57 (statement_list -> statement_list statement .)
    IDENT           reduce using rule 57 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 57 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 57 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 57 (statement_list -> statement_list statement .)
    STRING          reduce using rule 57 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 57 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 57 (statement_list -> statement_list statement .)
    NEW             reduce using rule 57 (statement_list -> statement_list statement .)
    FN              reduce using rule 57 (statement_list -> statement_list statement .)


state 138

    (59) statement -> var_decl .

    RBRACE          reduce using rule 59 (statement -> var_decl .)
    LET             reduce using rule 59 (statement -> var_decl .)
    RETURN          reduce using rule 59 (statement -> var_decl .)
    IF              reduce using rule 59 (statement -> var_decl .)
    WHILE           reduce using rule 59 (statement -> var_decl .)
    FOR             reduce using rule 59 (statement -> var_decl .)
    THROW           reduce using rule 59 (statement -> var_decl .)
    TRY             reduce using rule 59 (statement -> var_decl .)
    MINUS           reduce using rule 59 (statement -> var_decl .)
    IDENT           reduce using rule 59 (statement -> var_decl .)
    LPAREN          reduce using rule 59 (statement -> var_decl .)
    LBRACKET        reduce using rule 59 (statement -> var_decl .)
    NUMBER          reduce using rule 59 (statement -> var_decl .)
    STRING          reduce using rule 59 (statement -> var_decl .)
    TRUE            reduce using rule 59 (statement -> var_decl .)
    FALSE           reduce using rule 59 (statement -> var_decl .)
    NEW             reduce using rule 59 (statement -> var_decl .)
    FN              reduce using rule 59 (statement -> var_decl .)


state 139

    (60) statement -> assignment_statement .

    RBRACE          reduce using rule 60 (statement -> assignment_statement .)
    LET             reduce using rule 60 (statement -> assignment_statement .)
    RETURN          reduce using rule 60 (statement -> assignment_statement .)
    IF              reduce using rule 60 (statement -> assignment_statement .)
    WHILE           reduce using rule 60 (statement -> assignment_statement .)
    FOR             reduce using rule 60 (statement -> assignment_statement .)
    THROW           reduce using rule 60 (statement -> assignment_statement .)
    TRY             reduce using rule 60 (statement -> assignment_statement .)
    MINUS           reduce using rule 60 (statement -> assignment_statement .)
    IDENT           reduce using rule 60 (statement -> assignment_statement .)
    LPAREN          reduce using rule 60 (statement -> assignment_statement .)
    LBRACKET        reduce using rule 60 (statement -> assignment_statement .)
    NUMBER          reduce using rule 60 (statement -> assignment_statement .)
    STRING          reduce using rule 60 (statement -> assignment_statement .)
    TRUE            reduce using rule 60 (statement -> assignment_statement .)
    FALSE           reduce using rule 60 (statement -> assignment_statement .)
    NEW             reduce using rule 60 (statement -> assignment_statement .)
    FN              reduce using rule 60 (statement -> assignment_statement .)


state 140

    (61) statement -> return_statement .

    RBRACE          reduce using rule 61 (statement -> return_statement .)
    LET             reduce using rule 61 (statement -> return_statement .)
    RETURN          reduce using rule 61 (statement -> return_statement .)
    IF              reduce using rule 61 (statement -> return_statement .)
    WHILE           reduce using rule 61 (statement -> return_statement .)
    FOR             reduce using rule 61 (statement -> return_statement .)
    THROW           reduce using rule 61 (statement -> return_statement .)
    TRY             reduce using rule 61 (statement -> return_statement .)
    MINUS           reduce using rule 61 (statement -> return_statement .)
    IDENT           reduce using rule 61 (statement -> return_statement .)
    LPAREN          reduce using rule 61 (statement -> return_statement .)
    LBRACKET        reduce using rule 61 (statement -> return_statement .)
    NUMBER          reduce using rule 61 (statement -> return_statement .)
    STRING          reduce using rule 61 (statement -> return_statement .)
    TRUE            reduce using rule 61 (statement -> return_statement .)
    FALSE           reduce using rule 61 (statement -> return_statement .)
    NEW             reduce using rule 61 (statement -> return_statement .)
    FN              reduce using rule 61 (statement -> return_statement .)


state 141

    (62) statement -> expr_statement .

    RBRACE          reduce using rule 62 (statement -> expr_statement .)
    LET             reduce using rule 62 (statement -> expr_statement .)
    RETURN          reduce using rule 62 (statement -> expr_statement .)
    IF              reduce using rule 62 (statement -> expr_statement .)
    WHILE           reduce using rule 62 (statement -> expr_statement .)
    FOR             reduce using rule 62 (statement -> expr_statement .)
    THROW           reduce using rule 62 (statement -> expr_statement .)
    TRY             reduce using rule 62 (statement -> expr_statement .)
    MINUS           reduce using rule 62 (statement -> expr_statement .)
    IDENT           reduce using rule 62 (statement -> expr_statement .)
    LPAREN          reduce using rule 62 (statement -> expr_statement .)
    LBRACKET        reduce using rule 62 (statement -> expr_statement .)
    NUMBER          reduce using rule 62 (statement -> expr_statement .)
    STRING          reduce using rule 62 (statement -> expr_statement .)
    TRUE            reduce using rule 62 (statement -> expr_statement .)
    FALSE           reduce using rule 62 (statement -> expr_statement .)
    NEW             reduce using rule 62 (statement -> expr_statement .)
    FN              reduce using rule 62 (statement -> expr_statement .)


state 142

    (63) statement -> if_statement .

    RBRACE          reduce using rule 63 (statement -> if_statement .)
    LET             reduce using rule 63 (statement -> if_statement .)
    RETURN          reduce using rule 63 (statement -> if_statement .)
    IF              reduce using rule 63 (statement -> if_statement .)
    WHILE           reduce using rule 63 (statement -> if_statement .)
    FOR             reduce using rule 63 (statement -> if_statement .)
    THROW           reduce using rule 63 (statement -> if_statement .)
    TRY             reduce using rule 63 (statement -> if_statement .)
    MINUS           reduce using rule 63 (statement -> if_statement .)
    IDENT           reduce using rule 63 (statement -> if_statement .)
    LPAREN          reduce using rule 63 (statement -> if_statement .)
    LBRACKET        reduce using rule 63 (statement -> if_statement .)
    NUMBER          reduce using rule 63 (statement -> if_statement .)
    STRING          reduce using rule 63 (statement -> if_statement .)
    TRUE            reduce using rule 63 (statement -> if_statement .)
    FALSE           reduce using rule 63 (statement -> if_statement .)
    NEW             reduce using rule 63 (statement -> if_statement .)
    FN              reduce using rule 63 (statement -> if_statement .)


state 143

    (64) statement -> while_stmt .

    RBRACE          reduce using rule 64 (statement -> while_stmt .)
    LET             reduce using rule 64 (statement -> while_stmt .)
    RETURN          reduce using rule 64 (statement -> while_stmt .)
    IF              reduce using rule 64 (statement -> while_stmt .)
    WHILE           reduce using rule 64 (statement -> while_stmt .)
    FOR             reduce using rule 64 (statement -> while_stmt .)
    THROW           reduce using rule 64 (statement -> while_stmt .)
    TRY             reduce using rule 64 (statement -> while_stmt .)
    MINUS           reduce using rule 64 (statement -> while_stmt .)
    IDENT           reduce using rule 64 (statement -> while_stmt .)
    LPAREN          reduce using rule 64 (statement -> while_stmt .)
    LBRACKET        reduce using rule 64 (statement -> while_stmt .)
    NUMBER          reduce using rule 64 (statement -> while_stmt .)
    STRING          reduce using rule 64 (statement -> while_stmt .)
    TRUE            reduce using rule 64 (statement -> while_stmt .)
    FALSE           reduce using rule 64 (statement -> while_stmt .)
    NEW             reduce using rule 64 (statement -> while_stmt .)
    FN              reduce using rule 64 (statement -> while_stmt .)


state 144

    (65) statement -> for_stmt .

    RBRACE          reduce using rule 65 (statement -> for_stmt .)
    LET             reduce using rule 65 (statement -> for_stmt .)
    RETURN          reduce using rule 65 (statement -> for_stmt .)
    IF              reduce using rule 65 (statement -> for_stmt .)
    WHILE           reduce using rule 65 (statement -> for_stmt .)
    FOR             reduce using rule 65 (statement -> for_stmt .)
    THROW           reduce using rule 65 (statement -> for_stmt .)
    TRY             reduce using rule 65 (statement -> for_stmt .)
    MINUS           reduce using rule 65 (statement -> for_stmt .)
    IDENT           reduce using rule 65 (statement -> for_stmt .)
    LPAREN          reduce using rule 65 (statement -> for_stmt .)
    LBRACKET        reduce using rule 65 (statement -> for_stmt .)
    NUMBER          reduce using rule 65 (statement -> for_stmt .)
    STRING          reduce using rule 65 (statement -> for_stmt .)
    TRUE            reduce using rule 65 (statement -> for_stmt .)
    FALSE           reduce using rule 65 (statement -> for_stmt .)
    NEW             reduce using rule 65 (statement -> for_stmt .)
    FN              reduce using rule 65 (statement -> for_stmt .)


state 145

    (66) statement -> throw_statement .

    RBRACE          reduce using rule 66 (statement -> throw_statement .)
    LET             reduce using rule 66 (statement -> throw_statement .)
    RETURN          reduce using rule 66 (statement -> throw_statement .)
    IF              reduce using rule 66 (statement -> throw_statement .)
    WHILE           reduce using rule 66 (statement -> throw_statement .)
    FOR             reduce using rule 66 (statement -> throw_statement .)
    THROW           reduce using rule 66 (statement -> throw_statement .)
    TRY             reduce using rule 66 (statement -> throw_statement .)
    MINUS           reduce using rule 66 (statement -> throw_statement .)
    IDENT           reduce using rule 66 (statement -> throw_statement .)
    LPAREN          reduce using rule 66 (statement -> throw_statement .)
    LBRACKET        reduce using rule 66 (statement -> throw_statement .)
    NUMBER          reduce using rule 66 (statement -> throw_statement .)
    STRING          reduce using rule 66 (statement -> throw_statement .)
    TRUE            reduce using rule 66 (statement -> throw_statement .)
    FALSE           reduce using rule 66 (statement -> throw_statement .)
    NEW             reduce using rule 66 (statement -> throw_statement .)
    FN              reduce using rule 66 (statement -> throw_statement .)


state 146

    (67) statement -> try_catch_statement .

    RBRACE          reduce using rule 67 (statement -> try_catch_statement .)
    LET             reduce using rule 67 (statement -> try_catch_statement .)
    RETURN          reduce using rule 67 (statement -> try_catch_statement .)
    IF              reduce using rule 67 (statement -> try_catch_statement .)
    WHILE           reduce using rule 67 (statement -> try_catch_statement .)
    FOR             reduce using rule 67 (statement -> try_catch_statement .)
    THROW           reduce using rule 67 (statement -> try_catch_statement .)
    TRY             reduce using rule 67 (statement -> try_catch_statement .)
    MINUS           reduce using rule 67 (statement -> try_catch_statement .)
    IDENT           reduce using rule 67 (statement -> try_catch_statement .)
    LPAREN          reduce using rule 67 (statement -> try_catch_statement .)
    LBRACKET        reduce using rule 67 (statement -> try_catch_statement .)
    NUMBER          reduce using rule 67 (statement -> try_catch_statement .)
    STRING          reduce using rule 67 (statement -> try_catch_statement .)
    TRUE            reduce using rule 67 (statement -> try_catch_statement .)
    FALSE           reduce using rule 67 (statement -> try_catch_statement .)
    NEW             reduce using rule 67 (statement -> try_catch_statement .)
    FN              reduce using rule 67 (statement -> try_catch_statement .)


state 147

    (68) var_decl -> LET . IDENT COLON type_expr EQUAL expression SEMI
    (69) var_decl -> LET . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 169


state 148

    (27) primary -> IDENT . LBRACE field_assign_list RBRACE
    (105) primary -> IDENT .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 170
    EQUAL           reduce using rule 105 (primary -> IDENT .)
    LPAREN          reduce using rule 105 (primary -> IDENT .)
    DOT             reduce using rule 105 (primary -> IDENT .)
    DDCOLON         reduce using rule 105 (primary -> IDENT .)
    ARROW           reduce using rule 105 (primary -> IDENT .)
    LBRACKET        reduce using rule 105 (primary -> IDENT .)
    SEMI            reduce using rule 105 (primary -> IDENT .)
    PLUS            reduce using rule 105 (primary -> IDENT .)
    MINUS           reduce using rule 105 (primary -> IDENT .)
    TIMES           reduce using rule 105 (primary -> IDENT .)
    DIVIDE          reduce using rule 105 (primary -> IDENT .)
    MOD             reduce using rule 105 (primary -> IDENT .)
    LE              reduce using rule 105 (primary -> IDENT .)
    LT              reduce using rule 105 (primary -> IDENT .)
    GE              reduce using rule 105 (primary -> IDENT .)
    GT              reduce using rule 105 (primary -> IDENT .)
    EQ              reduce using rule 105 (primary -> IDENT .)
    NE              reduce using rule 105 (primary -> IDENT .)
    RPAREN          reduce using rule 105 (primary -> IDENT .)
    COMMA           reduce using rule 105 (primary -> IDENT .)
    RBRACKET        reduce using rule 105 (primary -> IDENT .)
    RBRACE          reduce using rule 105 (primary -> IDENT .)
    IDENT           reduce using rule 105 (primary -> IDENT .)

  ! LBRACE          [ reduce using rule 105 (primary -> IDENT .) ]


state 149

    (71) expr_statement -> expression . SEMI
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            shift and go to state 171
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 150

    (122) assignment_statement -> assignment . SEMI

    SEMI            shift and go to state 183


state 151

    (70) return_statement -> RETURN . expression SEMI
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 184
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 152

    (112) if_statement -> IF . expression block elif_clauses else_clause_opt
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 186
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 153

    (128) while_stmt -> WHILE . expression block
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 187
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 154

    (129) for_stmt -> FOR . IDENT COLON type_expr IN expression block

    IDENT           shift and go to state 188


state 155

    (134) throw_statement -> THROW . expression SEMI
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 189
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 156

    (135) try_catch_statement -> TRY . block CATCH LPAREN IDENT COLON type_expr RPAREN block
    (56) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 121

    block                          shift and go to state 190

state 157

    (97) primary -> LPAREN . expression RPAREN
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 191
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 158

    (123) assignment -> call_expr . EQUAL expression
    (72) expression -> call_expr .
    (84) call_expr -> call_expr . call_suffix
    (86) call_suffix -> . LPAREN arg_list_opt RPAREN
    (87) call_suffix -> . DOT IDENT
    (88) call_suffix -> . DDCOLON IDENT
    (89) call_suffix -> . ARROW IDENT
    (90) call_suffix -> . LBRACKET expression RBRACKET

    EQUAL           shift and go to state 192
    SEMI            reduce using rule 72 (expression -> call_expr .)
    PLUS            reduce using rule 72 (expression -> call_expr .)
    MINUS           reduce using rule 72 (expression -> call_expr .)
    TIMES           reduce using rule 72 (expression -> call_expr .)
    DIVIDE          reduce using rule 72 (expression -> call_expr .)
    MOD             reduce using rule 72 (expression -> call_expr .)
    LE              reduce using rule 72 (expression -> call_expr .)
    LT              reduce using rule 72 (expression -> call_expr .)
    GE              reduce using rule 72 (expression -> call_expr .)
    GT              reduce using rule 72 (expression -> call_expr .)
    EQ              reduce using rule 72 (expression -> call_expr .)
    NE              reduce using rule 72 (expression -> call_expr .)
    LPAREN          shift and go to state 194
    DOT             shift and go to state 195
    DDCOLON         shift and go to state 196
    ARROW           shift and go to state 197
    LBRACKET        shift and go to state 198

    call_suffix                    shift and go to state 193

state 159

    (127) expression -> MINUS . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 199
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 160

    (85) call_expr -> primary .

    EQUAL           reduce using rule 85 (call_expr -> primary .)
    LPAREN          reduce using rule 85 (call_expr -> primary .)
    DOT             reduce using rule 85 (call_expr -> primary .)
    DDCOLON         reduce using rule 85 (call_expr -> primary .)
    ARROW           reduce using rule 85 (call_expr -> primary .)
    LBRACKET        reduce using rule 85 (call_expr -> primary .)
    SEMI            reduce using rule 85 (call_expr -> primary .)
    PLUS            reduce using rule 85 (call_expr -> primary .)
    MINUS           reduce using rule 85 (call_expr -> primary .)
    TIMES           reduce using rule 85 (call_expr -> primary .)
    DIVIDE          reduce using rule 85 (call_expr -> primary .)
    MOD             reduce using rule 85 (call_expr -> primary .)
    LE              reduce using rule 85 (call_expr -> primary .)
    LT              reduce using rule 85 (call_expr -> primary .)
    GE              reduce using rule 85 (call_expr -> primary .)
    GT              reduce using rule 85 (call_expr -> primary .)
    EQ              reduce using rule 85 (call_expr -> primary .)
    NE              reduce using rule 85 (call_expr -> primary .)
    LBRACE          reduce using rule 85 (call_expr -> primary .)
    RPAREN          reduce using rule 85 (call_expr -> primary .)
    COMMA           reduce using rule 85 (call_expr -> primary .)
    RBRACKET        reduce using rule 85 (call_expr -> primary .)
    RBRACE          reduce using rule 85 (call_expr -> primary .)
    IDENT           reduce using rule 85 (call_expr -> primary .)


state 161

    (98) primary -> LBRACKET . expr_list_opt RBRACKET
    (99) expr_list_opt -> . expr_list
    (100) expr_list_opt -> . empty
    (101) expr_list -> . expr_list COMMA expression
    (102) expr_list -> . expression
    (111) empty -> .
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RBRACKET        reduce using rule 111 (empty -> .)
    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expr_list_opt                  shift and go to state 200
    expr_list                      shift and go to state 201
    empty                          shift and go to state 202
    expression                     shift and go to state 203
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 162

    (103) primary -> NUMBER .

    EQUAL           reduce using rule 103 (primary -> NUMBER .)
    LPAREN          reduce using rule 103 (primary -> NUMBER .)
    DOT             reduce using rule 103 (primary -> NUMBER .)
    DDCOLON         reduce using rule 103 (primary -> NUMBER .)
    ARROW           reduce using rule 103 (primary -> NUMBER .)
    LBRACKET        reduce using rule 103 (primary -> NUMBER .)
    SEMI            reduce using rule 103 (primary -> NUMBER .)
    PLUS            reduce using rule 103 (primary -> NUMBER .)
    MINUS           reduce using rule 103 (primary -> NUMBER .)
    TIMES           reduce using rule 103 (primary -> NUMBER .)
    DIVIDE          reduce using rule 103 (primary -> NUMBER .)
    MOD             reduce using rule 103 (primary -> NUMBER .)
    LE              reduce using rule 103 (primary -> NUMBER .)
    LT              reduce using rule 103 (primary -> NUMBER .)
    GE              reduce using rule 103 (primary -> NUMBER .)
    GT              reduce using rule 103 (primary -> NUMBER .)
    EQ              reduce using rule 103 (primary -> NUMBER .)
    NE              reduce using rule 103 (primary -> NUMBER .)
    LBRACE          reduce using rule 103 (primary -> NUMBER .)
    RPAREN          reduce using rule 103 (primary -> NUMBER .)
    COMMA           reduce using rule 103 (primary -> NUMBER .)
    RBRACKET        reduce using rule 103 (primary -> NUMBER .)
    RBRACE          reduce using rule 103 (primary -> NUMBER .)
    IDENT           reduce using rule 103 (primary -> NUMBER .)


state 163

    (104) primary -> STRING .

    EQUAL           reduce using rule 104 (primary -> STRING .)
    LPAREN          reduce using rule 104 (primary -> STRING .)
    DOT             reduce using rule 104 (primary -> STRING .)
    DDCOLON         reduce using rule 104 (primary -> STRING .)
    ARROW           reduce using rule 104 (primary -> STRING .)
    LBRACKET        reduce using rule 104 (primary -> STRING .)
    SEMI            reduce using rule 104 (primary -> STRING .)
    PLUS            reduce using rule 104 (primary -> STRING .)
    MINUS           reduce using rule 104 (primary -> STRING .)
    TIMES           reduce using rule 104 (primary -> STRING .)
    DIVIDE          reduce using rule 104 (primary -> STRING .)
    MOD             reduce using rule 104 (primary -> STRING .)
    LE              reduce using rule 104 (primary -> STRING .)
    LT              reduce using rule 104 (primary -> STRING .)
    GE              reduce using rule 104 (primary -> STRING .)
    GT              reduce using rule 104 (primary -> STRING .)
    EQ              reduce using rule 104 (primary -> STRING .)
    NE              reduce using rule 104 (primary -> STRING .)
    LBRACE          reduce using rule 104 (primary -> STRING .)
    RPAREN          reduce using rule 104 (primary -> STRING .)
    COMMA           reduce using rule 104 (primary -> STRING .)
    RBRACKET        reduce using rule 104 (primary -> STRING .)
    RBRACE          reduce using rule 104 (primary -> STRING .)
    IDENT           reduce using rule 104 (primary -> STRING .)


state 164

    (106) primary -> TRUE .

    EQUAL           reduce using rule 106 (primary -> TRUE .)
    LPAREN          reduce using rule 106 (primary -> TRUE .)
    DOT             reduce using rule 106 (primary -> TRUE .)
    DDCOLON         reduce using rule 106 (primary -> TRUE .)
    ARROW           reduce using rule 106 (primary -> TRUE .)
    LBRACKET        reduce using rule 106 (primary -> TRUE .)
    SEMI            reduce using rule 106 (primary -> TRUE .)
    PLUS            reduce using rule 106 (primary -> TRUE .)
    MINUS           reduce using rule 106 (primary -> TRUE .)
    TIMES           reduce using rule 106 (primary -> TRUE .)
    DIVIDE          reduce using rule 106 (primary -> TRUE .)
    MOD             reduce using rule 106 (primary -> TRUE .)
    LE              reduce using rule 106 (primary -> TRUE .)
    LT              reduce using rule 106 (primary -> TRUE .)
    GE              reduce using rule 106 (primary -> TRUE .)
    GT              reduce using rule 106 (primary -> TRUE .)
    EQ              reduce using rule 106 (primary -> TRUE .)
    NE              reduce using rule 106 (primary -> TRUE .)
    LBRACE          reduce using rule 106 (primary -> TRUE .)
    RPAREN          reduce using rule 106 (primary -> TRUE .)
    COMMA           reduce using rule 106 (primary -> TRUE .)
    RBRACKET        reduce using rule 106 (primary -> TRUE .)
    RBRACE          reduce using rule 106 (primary -> TRUE .)
    IDENT           reduce using rule 106 (primary -> TRUE .)


state 165

    (107) primary -> FALSE .

    EQUAL           reduce using rule 107 (primary -> FALSE .)
    LPAREN          reduce using rule 107 (primary -> FALSE .)
    DOT             reduce using rule 107 (primary -> FALSE .)
    DDCOLON         reduce using rule 107 (primary -> FALSE .)
    ARROW           reduce using rule 107 (primary -> FALSE .)
    LBRACKET        reduce using rule 107 (primary -> FALSE .)
    SEMI            reduce using rule 107 (primary -> FALSE .)
    PLUS            reduce using rule 107 (primary -> FALSE .)
    MINUS           reduce using rule 107 (primary -> FALSE .)
    TIMES           reduce using rule 107 (primary -> FALSE .)
    DIVIDE          reduce using rule 107 (primary -> FALSE .)
    MOD             reduce using rule 107 (primary -> FALSE .)
    LE              reduce using rule 107 (primary -> FALSE .)
    LT              reduce using rule 107 (primary -> FALSE .)
    GE              reduce using rule 107 (primary -> FALSE .)
    GT              reduce using rule 107 (primary -> FALSE .)
    EQ              reduce using rule 107 (primary -> FALSE .)
    NE              reduce using rule 107 (primary -> FALSE .)
    LBRACE          reduce using rule 107 (primary -> FALSE .)
    RPAREN          reduce using rule 107 (primary -> FALSE .)
    COMMA           reduce using rule 107 (primary -> FALSE .)
    RBRACKET        reduce using rule 107 (primary -> FALSE .)
    RBRACE          reduce using rule 107 (primary -> FALSE .)
    IDENT           reduce using rule 107 (primary -> FALSE .)


state 166

    (108) primary -> NEW . qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> NEW . qualified_identifier
    (125) qualified_identifier -> . IDENT DDCOLON IDENT
    (126) qualified_identifier -> . IDENT

    IDENT           shift and go to state 205

    qualified_identifier           shift and go to state 204

state 167

    (110) primary -> FN . LPAREN parameters_opt RPAREN return_opt block

    LPAREN          shift and go to state 206


state 168

    (132) code_block -> LBRACE CODE_STRING . RBRACE

    RBRACE          shift and go to state 207


state 169

    (68) var_decl -> LET IDENT . COLON type_expr EQUAL expression SEMI
    (69) var_decl -> LET IDENT . COLON type_expr SEMI

    COLON           shift and go to state 208


state 170

    (27) primary -> IDENT LBRACE . field_assign_list RBRACE
    (28) field_assign_list -> . field_assign_list field_assign
    (29) field_assign_list -> . field_assign
    (30) field_assign_list -> . empty
    (31) field_assign -> . IDENT COLON expression opt_comma
    (111) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 209
    RBRACE          reduce using rule 111 (empty -> .)

  ! IDENT           [ reduce using rule 111 (empty -> .) ]

    field_assign_list              shift and go to state 210
    field_assign                   shift and go to state 211
    empty                          shift and go to state 212

state 171

    (71) expr_statement -> expression SEMI .

    RBRACE          reduce using rule 71 (expr_statement -> expression SEMI .)
    LET             reduce using rule 71 (expr_statement -> expression SEMI .)
    RETURN          reduce using rule 71 (expr_statement -> expression SEMI .)
    IF              reduce using rule 71 (expr_statement -> expression SEMI .)
    WHILE           reduce using rule 71 (expr_statement -> expression SEMI .)
    FOR             reduce using rule 71 (expr_statement -> expression SEMI .)
    THROW           reduce using rule 71 (expr_statement -> expression SEMI .)
    TRY             reduce using rule 71 (expr_statement -> expression SEMI .)
    MINUS           reduce using rule 71 (expr_statement -> expression SEMI .)
    IDENT           reduce using rule 71 (expr_statement -> expression SEMI .)
    LPAREN          reduce using rule 71 (expr_statement -> expression SEMI .)
    LBRACKET        reduce using rule 71 (expr_statement -> expression SEMI .)
    NUMBER          reduce using rule 71 (expr_statement -> expression SEMI .)
    STRING          reduce using rule 71 (expr_statement -> expression SEMI .)
    TRUE            reduce using rule 71 (expr_statement -> expression SEMI .)
    FALSE           reduce using rule 71 (expr_statement -> expression SEMI .)
    NEW             reduce using rule 71 (expr_statement -> expression SEMI .)
    FN              reduce using rule 71 (expr_statement -> expression SEMI .)


state 172

    (73) expression -> expression PLUS . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 213
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 173

    (74) expression -> expression MINUS . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 214
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 174

    (75) expression -> expression TIMES . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 215
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 175

    (76) expression -> expression DIVIDE . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 216
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 176

    (77) expression -> expression MOD . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 217
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 177

    (78) expression -> expression LE . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 218
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 178

    (79) expression -> expression LT . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 219
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 179

    (80) expression -> expression GE . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 220
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 180

    (81) expression -> expression GT . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 221
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 181

    (82) expression -> expression EQ . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 222
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 182

    (83) expression -> expression NE . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 223
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 183

    (122) assignment_statement -> assignment SEMI .

    RBRACE          reduce using rule 122 (assignment_statement -> assignment SEMI .)
    LET             reduce using rule 122 (assignment_statement -> assignment SEMI .)
    RETURN          reduce using rule 122 (assignment_statement -> assignment SEMI .)
    IF              reduce using rule 122 (assignment_statement -> assignment SEMI .)
    WHILE           reduce using rule 122 (assignment_statement -> assignment SEMI .)
    FOR             reduce using rule 122 (assignment_statement -> assignment SEMI .)
    THROW           reduce using rule 122 (assignment_statement -> assignment SEMI .)
    TRY             reduce using rule 122 (assignment_statement -> assignment SEMI .)
    MINUS           reduce using rule 122 (assignment_statement -> assignment SEMI .)
    IDENT           reduce using rule 122 (assignment_statement -> assignment SEMI .)
    LPAREN          reduce using rule 122 (assignment_statement -> assignment SEMI .)
    LBRACKET        reduce using rule 122 (assignment_statement -> assignment SEMI .)
    NUMBER          reduce using rule 122 (assignment_statement -> assignment SEMI .)
    STRING          reduce using rule 122 (assignment_statement -> assignment SEMI .)
    TRUE            reduce using rule 122 (assignment_statement -> assignment SEMI .)
    FALSE           reduce using rule 122 (assignment_statement -> assignment SEMI .)
    NEW             reduce using rule 122 (assignment_statement -> assignment SEMI .)
    FN              reduce using rule 122 (assignment_statement -> assignment SEMI .)


state 184

    (70) return_statement -> RETURN expression . SEMI
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            shift and go to state 224
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 185

    (72) expression -> call_expr .
    (84) call_expr -> call_expr . call_suffix
    (86) call_suffix -> . LPAREN arg_list_opt RPAREN
    (87) call_suffix -> . DOT IDENT
    (88) call_suffix -> . DDCOLON IDENT
    (89) call_suffix -> . ARROW IDENT
    (90) call_suffix -> . LBRACKET expression RBRACKET

    SEMI            reduce using rule 72 (expression -> call_expr .)
    PLUS            reduce using rule 72 (expression -> call_expr .)
    MINUS           reduce using rule 72 (expression -> call_expr .)
    TIMES           reduce using rule 72 (expression -> call_expr .)
    DIVIDE          reduce using rule 72 (expression -> call_expr .)
    MOD             reduce using rule 72 (expression -> call_expr .)
    LE              reduce using rule 72 (expression -> call_expr .)
    LT              reduce using rule 72 (expression -> call_expr .)
    GE              reduce using rule 72 (expression -> call_expr .)
    GT              reduce using rule 72 (expression -> call_expr .)
    EQ              reduce using rule 72 (expression -> call_expr .)
    NE              reduce using rule 72 (expression -> call_expr .)
    LBRACE          reduce using rule 72 (expression -> call_expr .)
    RPAREN          reduce using rule 72 (expression -> call_expr .)
    COMMA           reduce using rule 72 (expression -> call_expr .)
    RBRACKET        reduce using rule 72 (expression -> call_expr .)
    RBRACE          reduce using rule 72 (expression -> call_expr .)
    IDENT           reduce using rule 72 (expression -> call_expr .)
    LPAREN          shift and go to state 194
    DOT             shift and go to state 195
    DDCOLON         shift and go to state 196
    ARROW           shift and go to state 197
    LBRACKET        shift and go to state 198

    call_suffix                    shift and go to state 193

state 186

    (112) if_statement -> IF expression . block elif_clauses else_clause_opt
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression
    (56) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182
    LBRACE          shift and go to state 121

    block                          shift and go to state 225

state 187

    (128) while_stmt -> WHILE expression . block
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression
    (56) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182
    LBRACE          shift and go to state 121

    block                          shift and go to state 226

state 188

    (129) for_stmt -> FOR IDENT . COLON type_expr IN expression block

    COLON           shift and go to state 227


state 189

    (134) throw_statement -> THROW expression . SEMI
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            shift and go to state 228
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 190

    (135) try_catch_statement -> TRY block . CATCH LPAREN IDENT COLON type_expr RPAREN block

    CATCH           shift and go to state 229


state 191

    (97) primary -> LPAREN expression . RPAREN
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    RPAREN          shift and go to state 230
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 192

    (123) assignment -> call_expr EQUAL . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    call_expr                      shift and go to state 185
    expression                     shift and go to state 231
    primary                        shift and go to state 160

state 193

    (84) call_expr -> call_expr call_suffix .

    EQUAL           reduce using rule 84 (call_expr -> call_expr call_suffix .)
    LPAREN          reduce using rule 84 (call_expr -> call_expr call_suffix .)
    DOT             reduce using rule 84 (call_expr -> call_expr call_suffix .)
    DDCOLON         reduce using rule 84 (call_expr -> call_expr call_suffix .)
    ARROW           reduce using rule 84 (call_expr -> call_expr call_suffix .)
    LBRACKET        reduce using rule 84 (call_expr -> call_expr call_suffix .)
    SEMI            reduce using rule 84 (call_expr -> call_expr call_suffix .)
    PLUS            reduce using rule 84 (call_expr -> call_expr call_suffix .)
    MINUS           reduce using rule 84 (call_expr -> call_expr call_suffix .)
    TIMES           reduce using rule 84 (call_expr -> call_expr call_suffix .)
    DIVIDE          reduce using rule 84 (call_expr -> call_expr call_suffix .)
    MOD             reduce using rule 84 (call_expr -> call_expr call_suffix .)
    LE              reduce using rule 84 (call_expr -> call_expr call_suffix .)
    LT              reduce using rule 84 (call_expr -> call_expr call_suffix .)
    GE              reduce using rule 84 (call_expr -> call_expr call_suffix .)
    GT              reduce using rule 84 (call_expr -> call_expr call_suffix .)
    EQ              reduce using rule 84 (call_expr -> call_expr call_suffix .)
    NE              reduce using rule 84 (call_expr -> call_expr call_suffix .)
    LBRACE          reduce using rule 84 (call_expr -> call_expr call_suffix .)
    RPAREN          reduce using rule 84 (call_expr -> call_expr call_suffix .)
    COMMA           reduce using rule 84 (call_expr -> call_expr call_suffix .)
    RBRACKET        reduce using rule 84 (call_expr -> call_expr call_suffix .)
    RBRACE          reduce using rule 84 (call_expr -> call_expr call_suffix .)
    IDENT           reduce using rule 84 (call_expr -> call_expr call_suffix .)


state 194

    (86) call_suffix -> LPAREN . arg_list_opt RPAREN
    (91) arg_list_opt -> . arg_list
    (92) arg_list_opt -> . empty
    (93) arg_list -> . arg_list COMMA argument
    (94) arg_list -> . argument
    (111) empty -> .
    (95) argument -> . IDENT COLON expression
    (96) argument -> . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RPAREN          reduce using rule 111 (empty -> .)
    IDENT           shift and go to state 236
    MINUS           shift and go to state 159
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    arg_list_opt                   shift and go to state 232
    arg_list                       shift and go to state 233
    empty                          shift and go to state 234
    argument                       shift and go to state 235
    expression                     shift and go to state 237
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 195

    (87) call_suffix -> DOT . IDENT

    IDENT           shift and go to state 238


state 196

    (88) call_suffix -> DDCOLON . IDENT

    IDENT           shift and go to state 239


state 197

    (89) call_suffix -> ARROW . IDENT

    IDENT           shift and go to state 240


state 198

    (90) call_suffix -> LBRACKET . expression RBRACKET
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 241
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 199

    (127) expression -> MINUS expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 127 (expression -> MINUS expression .)
    LBRACE          reduce using rule 127 (expression -> MINUS expression .)
    RPAREN          reduce using rule 127 (expression -> MINUS expression .)
    COMMA           reduce using rule 127 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 127 (expression -> MINUS expression .)
    RBRACE          reduce using rule 127 (expression -> MINUS expression .)
    IDENT           reduce using rule 127 (expression -> MINUS expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182

  ! PLUS            [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! MINUS           [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! TIMES           [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! MOD             [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! LE              [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! LT              [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! GE              [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! GT              [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! EQ              [ reduce using rule 127 (expression -> MINUS expression .) ]
  ! NE              [ reduce using rule 127 (expression -> MINUS expression .) ]


state 200

    (98) primary -> LBRACKET expr_list_opt . RBRACKET

    RBRACKET        shift and go to state 242


state 201

    (99) expr_list_opt -> expr_list .
    (101) expr_list -> expr_list . COMMA expression

    RBRACKET        reduce using rule 99 (expr_list_opt -> expr_list .)
    COMMA           shift and go to state 243


state 202

    (100) expr_list_opt -> empty .

    RBRACKET        reduce using rule 100 (expr_list_opt -> empty .)


state 203

    (102) expr_list -> expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    COMMA           reduce using rule 102 (expr_list -> expression .)
    RBRACKET        reduce using rule 102 (expr_list -> expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 204

    (108) primary -> NEW qualified_identifier . LPAREN arg_list_opt RPAREN
    (109) primary -> NEW qualified_identifier .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 244
    EQUAL           reduce using rule 109 (primary -> NEW qualified_identifier .)
    DOT             reduce using rule 109 (primary -> NEW qualified_identifier .)
    DDCOLON         reduce using rule 109 (primary -> NEW qualified_identifier .)
    ARROW           reduce using rule 109 (primary -> NEW qualified_identifier .)
    LBRACKET        reduce using rule 109 (primary -> NEW qualified_identifier .)
    SEMI            reduce using rule 109 (primary -> NEW qualified_identifier .)
    PLUS            reduce using rule 109 (primary -> NEW qualified_identifier .)
    MINUS           reduce using rule 109 (primary -> NEW qualified_identifier .)
    TIMES           reduce using rule 109 (primary -> NEW qualified_identifier .)
    DIVIDE          reduce using rule 109 (primary -> NEW qualified_identifier .)
    MOD             reduce using rule 109 (primary -> NEW qualified_identifier .)
    LE              reduce using rule 109 (primary -> NEW qualified_identifier .)
    LT              reduce using rule 109 (primary -> NEW qualified_identifier .)
    GE              reduce using rule 109 (primary -> NEW qualified_identifier .)
    GT              reduce using rule 109 (primary -> NEW qualified_identifier .)
    EQ              reduce using rule 109 (primary -> NEW qualified_identifier .)
    NE              reduce using rule 109 (primary -> NEW qualified_identifier .)
    LBRACE          reduce using rule 109 (primary -> NEW qualified_identifier .)
    RPAREN          reduce using rule 109 (primary -> NEW qualified_identifier .)
    COMMA           reduce using rule 109 (primary -> NEW qualified_identifier .)
    RBRACKET        reduce using rule 109 (primary -> NEW qualified_identifier .)
    RBRACE          reduce using rule 109 (primary -> NEW qualified_identifier .)
    IDENT           reduce using rule 109 (primary -> NEW qualified_identifier .)

  ! LPAREN          [ reduce using rule 109 (primary -> NEW qualified_identifier .) ]


state 205

    (125) qualified_identifier -> IDENT . DDCOLON IDENT
    (126) qualified_identifier -> IDENT .

  ! shift/reduce conflict for DDCOLON resolved as shift
    DDCOLON         shift and go to state 245
    LPAREN          reduce using rule 126 (qualified_identifier -> IDENT .)
    EQUAL           reduce using rule 126 (qualified_identifier -> IDENT .)
    DOT             reduce using rule 126 (qualified_identifier -> IDENT .)
    ARROW           reduce using rule 126 (qualified_identifier -> IDENT .)
    LBRACKET        reduce using rule 126 (qualified_identifier -> IDENT .)
    SEMI            reduce using rule 126 (qualified_identifier -> IDENT .)
    PLUS            reduce using rule 126 (qualified_identifier -> IDENT .)
    MINUS           reduce using rule 126 (qualified_identifier -> IDENT .)
    TIMES           reduce using rule 126 (qualified_identifier -> IDENT .)
    DIVIDE          reduce using rule 126 (qualified_identifier -> IDENT .)
    MOD             reduce using rule 126 (qualified_identifier -> IDENT .)
    LE              reduce using rule 126 (qualified_identifier -> IDENT .)
    LT              reduce using rule 126 (qualified_identifier -> IDENT .)
    GE              reduce using rule 126 (qualified_identifier -> IDENT .)
    GT              reduce using rule 126 (qualified_identifier -> IDENT .)
    EQ              reduce using rule 126 (qualified_identifier -> IDENT .)
    NE              reduce using rule 126 (qualified_identifier -> IDENT .)
    LBRACE          reduce using rule 126 (qualified_identifier -> IDENT .)
    RPAREN          reduce using rule 126 (qualified_identifier -> IDENT .)
    COMMA           reduce using rule 126 (qualified_identifier -> IDENT .)
    RBRACKET        reduce using rule 126 (qualified_identifier -> IDENT .)
    RBRACE          reduce using rule 126 (qualified_identifier -> IDENT .)
    IDENT           reduce using rule 126 (qualified_identifier -> IDENT .)

  ! DDCOLON         [ reduce using rule 126 (qualified_identifier -> IDENT .) ]


state 206

    (110) primary -> FN LPAREN . parameters_opt RPAREN return_opt block
    (41) parameters_opt -> . parameters
    (42) parameters_opt -> . empty
    (43) parameters -> . parameters COMMA parameter
    (44) parameters -> . parameter
    (111) empty -> .
    (45) parameter -> . IDENT COLON type_expr

    RPAREN          reduce using rule 111 (empty -> .)
    IDENT           shift and go to state 65

    parameters_opt                 shift and go to state 246
    parameters                     shift and go to state 67
    empty                          shift and go to state 68
    parameter                      shift and go to state 69

state 207

    (132) code_block -> LBRACE CODE_STRING RBRACE .

    CLASS           reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    STRUCT          reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    ENUM            reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    JOIN            reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    IMPLEMENT       reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    FN              reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    IMPORT          reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    PYTHON          reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    PYFN            reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    PYTYPE          reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)
    $end            reduce using rule 132 (code_block -> LBRACE CODE_STRING RBRACE .)


state 208

    (68) var_decl -> LET IDENT COLON . type_expr EQUAL expression SEMI
    (69) var_decl -> LET IDENT COLON . type_expr SEMI
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 247
    simple_type_expr               shift and go to state 93

state 209

    (31) field_assign -> IDENT . COLON expression opt_comma

    COLON           shift and go to state 248


state 210

    (27) primary -> IDENT LBRACE field_assign_list . RBRACE
    (28) field_assign_list -> field_assign_list . field_assign
    (31) field_assign -> . IDENT COLON expression opt_comma

    RBRACE          shift and go to state 249
    IDENT           shift and go to state 209

    field_assign                   shift and go to state 250

state 211

    (29) field_assign_list -> field_assign .

    RBRACE          reduce using rule 29 (field_assign_list -> field_assign .)
    IDENT           reduce using rule 29 (field_assign_list -> field_assign .)


state 212

    (30) field_assign_list -> empty .

    RBRACE          reduce using rule 30 (field_assign_list -> empty .)
    IDENT           reduce using rule 30 (field_assign_list -> empty .)


state 213

    (73) expression -> expression PLUS expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 73 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 73 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 73 (expression -> expression PLUS expression .)
    LE              reduce using rule 73 (expression -> expression PLUS expression .)
    LT              reduce using rule 73 (expression -> expression PLUS expression .)
    GE              reduce using rule 73 (expression -> expression PLUS expression .)
    GT              reduce using rule 73 (expression -> expression PLUS expression .)
    EQ              reduce using rule 73 (expression -> expression PLUS expression .)
    NE              reduce using rule 73 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 73 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 73 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 73 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 73 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 73 (expression -> expression PLUS expression .)
    IDENT           reduce using rule 73 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176

  ! TIMES           [ reduce using rule 73 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 172 ]
  ! MINUS           [ shift and go to state 173 ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 214

    (74) expression -> expression MINUS expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 74 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 74 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 74 (expression -> expression MINUS expression .)
    LE              reduce using rule 74 (expression -> expression MINUS expression .)
    LT              reduce using rule 74 (expression -> expression MINUS expression .)
    GE              reduce using rule 74 (expression -> expression MINUS expression .)
    GT              reduce using rule 74 (expression -> expression MINUS expression .)
    EQ              reduce using rule 74 (expression -> expression MINUS expression .)
    NE              reduce using rule 74 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 74 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 74 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 74 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 74 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 74 (expression -> expression MINUS expression .)
    IDENT           reduce using rule 74 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176

  ! TIMES           [ reduce using rule 74 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 74 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 172 ]
  ! MINUS           [ shift and go to state 173 ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 215

    (75) expression -> expression TIMES expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 75 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 75 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 75 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 75 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 75 (expression -> expression TIMES expression .)
    MOD             reduce using rule 75 (expression -> expression TIMES expression .)
    LE              reduce using rule 75 (expression -> expression TIMES expression .)
    LT              reduce using rule 75 (expression -> expression TIMES expression .)
    GE              reduce using rule 75 (expression -> expression TIMES expression .)
    GT              reduce using rule 75 (expression -> expression TIMES expression .)
    EQ              reduce using rule 75 (expression -> expression TIMES expression .)
    NE              reduce using rule 75 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 75 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 75 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 75 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 75 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 75 (expression -> expression TIMES expression .)
    IDENT           reduce using rule 75 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 172 ]
  ! MINUS           [ shift and go to state 173 ]
  ! TIMES           [ shift and go to state 174 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! MOD             [ shift and go to state 176 ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 216

    (76) expression -> expression DIVIDE expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 76 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 76 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 76 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 76 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 76 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 76 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 76 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 76 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 76 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 76 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 76 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 76 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 76 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 76 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 76 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 76 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 76 (expression -> expression DIVIDE expression .)
    IDENT           reduce using rule 76 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 172 ]
  ! MINUS           [ shift and go to state 173 ]
  ! TIMES           [ shift and go to state 174 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! MOD             [ shift and go to state 176 ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 217

    (77) expression -> expression MOD expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 77 (expression -> expression MOD expression .)
    PLUS            reduce using rule 77 (expression -> expression MOD expression .)
    MINUS           reduce using rule 77 (expression -> expression MOD expression .)
    TIMES           reduce using rule 77 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 77 (expression -> expression MOD expression .)
    MOD             reduce using rule 77 (expression -> expression MOD expression .)
    LE              reduce using rule 77 (expression -> expression MOD expression .)
    LT              reduce using rule 77 (expression -> expression MOD expression .)
    GE              reduce using rule 77 (expression -> expression MOD expression .)
    GT              reduce using rule 77 (expression -> expression MOD expression .)
    EQ              reduce using rule 77 (expression -> expression MOD expression .)
    NE              reduce using rule 77 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 77 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 77 (expression -> expression MOD expression .)
    COMMA           reduce using rule 77 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 77 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 77 (expression -> expression MOD expression .)
    IDENT           reduce using rule 77 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 172 ]
  ! MINUS           [ shift and go to state 173 ]
  ! TIMES           [ shift and go to state 174 ]
  ! DIVIDE          [ shift and go to state 175 ]
  ! MOD             [ shift and go to state 176 ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 218

    (78) expression -> expression LE expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 78 (expression -> expression LE expression .)
    LE              reduce using rule 78 (expression -> expression LE expression .)
    LT              reduce using rule 78 (expression -> expression LE expression .)
    GE              reduce using rule 78 (expression -> expression LE expression .)
    GT              reduce using rule 78 (expression -> expression LE expression .)
    EQ              reduce using rule 78 (expression -> expression LE expression .)
    NE              reduce using rule 78 (expression -> expression LE expression .)
    LBRACE          reduce using rule 78 (expression -> expression LE expression .)
    RPAREN          reduce using rule 78 (expression -> expression LE expression .)
    COMMA           reduce using rule 78 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 78 (expression -> expression LE expression .)
    RBRACE          reduce using rule 78 (expression -> expression LE expression .)
    IDENT           reduce using rule 78 (expression -> expression LE expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176

  ! PLUS            [ reduce using rule 78 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 78 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 78 (expression -> expression LE expression .) ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 219

    (79) expression -> expression LT expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 79 (expression -> expression LT expression .)
    LE              reduce using rule 79 (expression -> expression LT expression .)
    LT              reduce using rule 79 (expression -> expression LT expression .)
    GE              reduce using rule 79 (expression -> expression LT expression .)
    GT              reduce using rule 79 (expression -> expression LT expression .)
    EQ              reduce using rule 79 (expression -> expression LT expression .)
    NE              reduce using rule 79 (expression -> expression LT expression .)
    LBRACE          reduce using rule 79 (expression -> expression LT expression .)
    RPAREN          reduce using rule 79 (expression -> expression LT expression .)
    COMMA           reduce using rule 79 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 79 (expression -> expression LT expression .)
    RBRACE          reduce using rule 79 (expression -> expression LT expression .)
    IDENT           reduce using rule 79 (expression -> expression LT expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176

  ! PLUS            [ reduce using rule 79 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 79 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 79 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 79 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 79 (expression -> expression LT expression .) ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 220

    (80) expression -> expression GE expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 80 (expression -> expression GE expression .)
    LE              reduce using rule 80 (expression -> expression GE expression .)
    LT              reduce using rule 80 (expression -> expression GE expression .)
    GE              reduce using rule 80 (expression -> expression GE expression .)
    GT              reduce using rule 80 (expression -> expression GE expression .)
    EQ              reduce using rule 80 (expression -> expression GE expression .)
    NE              reduce using rule 80 (expression -> expression GE expression .)
    LBRACE          reduce using rule 80 (expression -> expression GE expression .)
    RPAREN          reduce using rule 80 (expression -> expression GE expression .)
    COMMA           reduce using rule 80 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 80 (expression -> expression GE expression .)
    RBRACE          reduce using rule 80 (expression -> expression GE expression .)
    IDENT           reduce using rule 80 (expression -> expression GE expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176

  ! PLUS            [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 80 (expression -> expression GE expression .) ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 221

    (81) expression -> expression GT expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 81 (expression -> expression GT expression .)
    LE              reduce using rule 81 (expression -> expression GT expression .)
    LT              reduce using rule 81 (expression -> expression GT expression .)
    GE              reduce using rule 81 (expression -> expression GT expression .)
    GT              reduce using rule 81 (expression -> expression GT expression .)
    EQ              reduce using rule 81 (expression -> expression GT expression .)
    NE              reduce using rule 81 (expression -> expression GT expression .)
    LBRACE          reduce using rule 81 (expression -> expression GT expression .)
    RPAREN          reduce using rule 81 (expression -> expression GT expression .)
    COMMA           reduce using rule 81 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 81 (expression -> expression GT expression .)
    RBRACE          reduce using rule 81 (expression -> expression GT expression .)
    IDENT           reduce using rule 81 (expression -> expression GT expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176

  ! PLUS            [ reduce using rule 81 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 81 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 81 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 81 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 81 (expression -> expression GT expression .) ]
  ! LE              [ shift and go to state 177 ]
  ! LT              [ shift and go to state 178 ]
  ! GE              [ shift and go to state 179 ]
  ! GT              [ shift and go to state 180 ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 222

    (82) expression -> expression EQ expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 82 (expression -> expression EQ expression .)
    EQ              reduce using rule 82 (expression -> expression EQ expression .)
    NE              reduce using rule 82 (expression -> expression EQ expression .)
    LBRACE          reduce using rule 82 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 82 (expression -> expression EQ expression .)
    COMMA           reduce using rule 82 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 82 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 82 (expression -> expression EQ expression .)
    IDENT           reduce using rule 82 (expression -> expression EQ expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180

  ! PLUS            [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 82 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 223

    (83) expression -> expression NE expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 83 (expression -> expression NE expression .)
    EQ              reduce using rule 83 (expression -> expression NE expression .)
    NE              reduce using rule 83 (expression -> expression NE expression .)
    LBRACE          reduce using rule 83 (expression -> expression NE expression .)
    RPAREN          reduce using rule 83 (expression -> expression NE expression .)
    COMMA           reduce using rule 83 (expression -> expression NE expression .)
    RBRACKET        reduce using rule 83 (expression -> expression NE expression .)
    RBRACE          reduce using rule 83 (expression -> expression NE expression .)
    IDENT           reduce using rule 83 (expression -> expression NE expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180

  ! PLUS            [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 83 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 181 ]
  ! NE              [ shift and go to state 182 ]


state 224

    (70) return_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    LET             reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    IF              reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    THROW           reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    TRY             reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    IDENT           reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    LBRACKET        reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    TRUE            reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    FALSE           reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    NEW             reduce using rule 70 (return_statement -> RETURN expression SEMI .)
    FN              reduce using rule 70 (return_statement -> RETURN expression SEMI .)


state 225

    (112) if_statement -> IF expression block . elif_clauses else_clause_opt
    (113) elif_clauses -> . elif_clauses elif_clause
    (114) elif_clauses -> . elif_clause
    (115) elif_clauses -> . empty
    (116) elif_clause -> . ELSE IF expression block
    (111) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 254
    RBRACE          reduce using rule 111 (empty -> .)
    LET             reduce using rule 111 (empty -> .)
    RETURN          reduce using rule 111 (empty -> .)
    IF              reduce using rule 111 (empty -> .)
    WHILE           reduce using rule 111 (empty -> .)
    FOR             reduce using rule 111 (empty -> .)
    THROW           reduce using rule 111 (empty -> .)
    TRY             reduce using rule 111 (empty -> .)
    MINUS           reduce using rule 111 (empty -> .)
    IDENT           reduce using rule 111 (empty -> .)
    LPAREN          reduce using rule 111 (empty -> .)
    LBRACKET        reduce using rule 111 (empty -> .)
    NUMBER          reduce using rule 111 (empty -> .)
    STRING          reduce using rule 111 (empty -> .)
    TRUE            reduce using rule 111 (empty -> .)
    FALSE           reduce using rule 111 (empty -> .)
    NEW             reduce using rule 111 (empty -> .)
    FN              reduce using rule 111 (empty -> .)

  ! ELSE            [ reduce using rule 111 (empty -> .) ]

    elif_clauses                   shift and go to state 251
    elif_clause                    shift and go to state 252
    empty                          shift and go to state 253

state 226

    (128) while_stmt -> WHILE expression block .

    RBRACE          reduce using rule 128 (while_stmt -> WHILE expression block .)
    LET             reduce using rule 128 (while_stmt -> WHILE expression block .)
    RETURN          reduce using rule 128 (while_stmt -> WHILE expression block .)
    IF              reduce using rule 128 (while_stmt -> WHILE expression block .)
    WHILE           reduce using rule 128 (while_stmt -> WHILE expression block .)
    FOR             reduce using rule 128 (while_stmt -> WHILE expression block .)
    THROW           reduce using rule 128 (while_stmt -> WHILE expression block .)
    TRY             reduce using rule 128 (while_stmt -> WHILE expression block .)
    MINUS           reduce using rule 128 (while_stmt -> WHILE expression block .)
    IDENT           reduce using rule 128 (while_stmt -> WHILE expression block .)
    LPAREN          reduce using rule 128 (while_stmt -> WHILE expression block .)
    LBRACKET        reduce using rule 128 (while_stmt -> WHILE expression block .)
    NUMBER          reduce using rule 128 (while_stmt -> WHILE expression block .)
    STRING          reduce using rule 128 (while_stmt -> WHILE expression block .)
    TRUE            reduce using rule 128 (while_stmt -> WHILE expression block .)
    FALSE           reduce using rule 128 (while_stmt -> WHILE expression block .)
    NEW             reduce using rule 128 (while_stmt -> WHILE expression block .)
    FN              reduce using rule 128 (while_stmt -> WHILE expression block .)


state 227

    (129) for_stmt -> FOR IDENT COLON . type_expr IN expression block
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 255
    simple_type_expr               shift and go to state 93

state 228

    (134) throw_statement -> THROW expression SEMI .

    RBRACE          reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    LET             reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    RETURN          reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    IF              reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    WHILE           reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    FOR             reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    THROW           reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    TRY             reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    MINUS           reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    IDENT           reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    LPAREN          reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    LBRACKET        reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    NUMBER          reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    STRING          reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    TRUE            reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    FALSE           reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    NEW             reduce using rule 134 (throw_statement -> THROW expression SEMI .)
    FN              reduce using rule 134 (throw_statement -> THROW expression SEMI .)


state 229

    (135) try_catch_statement -> TRY block CATCH . LPAREN IDENT COLON type_expr RPAREN block

    LPAREN          shift and go to state 256


state 230

    (97) primary -> LPAREN expression RPAREN .

    EQUAL           reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    DOT             reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    DDCOLON         reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    MOD             reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    LE              reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    LT              reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    GE              reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    GT              reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    EQ              reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    NE              reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 97 (primary -> LPAREN expression RPAREN .)
    IDENT           reduce using rule 97 (primary -> LPAREN expression RPAREN .)


state 231

    (123) assignment -> call_expr EQUAL expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            reduce using rule 123 (assignment -> call_expr EQUAL expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 232

    (86) call_suffix -> LPAREN arg_list_opt . RPAREN

    RPAREN          shift and go to state 257


state 233

    (91) arg_list_opt -> arg_list .
    (93) arg_list -> arg_list . COMMA argument

    RPAREN          reduce using rule 91 (arg_list_opt -> arg_list .)
    COMMA           shift and go to state 258


state 234

    (92) arg_list_opt -> empty .

    RPAREN          reduce using rule 92 (arg_list_opt -> empty .)


state 235

    (94) arg_list -> argument .

    COMMA           reduce using rule 94 (arg_list -> argument .)
    RPAREN          reduce using rule 94 (arg_list -> argument .)


state 236

    (95) argument -> IDENT . COLON expression
    (27) primary -> IDENT . LBRACE field_assign_list RBRACE
    (105) primary -> IDENT .

    COLON           shift and go to state 259
    LBRACE          shift and go to state 170
    LPAREN          reduce using rule 105 (primary -> IDENT .)
    DOT             reduce using rule 105 (primary -> IDENT .)
    DDCOLON         reduce using rule 105 (primary -> IDENT .)
    ARROW           reduce using rule 105 (primary -> IDENT .)
    LBRACKET        reduce using rule 105 (primary -> IDENT .)
    PLUS            reduce using rule 105 (primary -> IDENT .)
    MINUS           reduce using rule 105 (primary -> IDENT .)
    TIMES           reduce using rule 105 (primary -> IDENT .)
    DIVIDE          reduce using rule 105 (primary -> IDENT .)
    MOD             reduce using rule 105 (primary -> IDENT .)
    LE              reduce using rule 105 (primary -> IDENT .)
    LT              reduce using rule 105 (primary -> IDENT .)
    GE              reduce using rule 105 (primary -> IDENT .)
    GT              reduce using rule 105 (primary -> IDENT .)
    EQ              reduce using rule 105 (primary -> IDENT .)
    NE              reduce using rule 105 (primary -> IDENT .)
    COMMA           reduce using rule 105 (primary -> IDENT .)
    RPAREN          reduce using rule 105 (primary -> IDENT .)


state 237

    (96) argument -> expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    COMMA           reduce using rule 96 (argument -> expression .)
    RPAREN          reduce using rule 96 (argument -> expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 238

    (87) call_suffix -> DOT IDENT .

    EQUAL           reduce using rule 87 (call_suffix -> DOT IDENT .)
    LPAREN          reduce using rule 87 (call_suffix -> DOT IDENT .)
    DOT             reduce using rule 87 (call_suffix -> DOT IDENT .)
    DDCOLON         reduce using rule 87 (call_suffix -> DOT IDENT .)
    ARROW           reduce using rule 87 (call_suffix -> DOT IDENT .)
    LBRACKET        reduce using rule 87 (call_suffix -> DOT IDENT .)
    SEMI            reduce using rule 87 (call_suffix -> DOT IDENT .)
    PLUS            reduce using rule 87 (call_suffix -> DOT IDENT .)
    MINUS           reduce using rule 87 (call_suffix -> DOT IDENT .)
    TIMES           reduce using rule 87 (call_suffix -> DOT IDENT .)
    DIVIDE          reduce using rule 87 (call_suffix -> DOT IDENT .)
    MOD             reduce using rule 87 (call_suffix -> DOT IDENT .)
    LE              reduce using rule 87 (call_suffix -> DOT IDENT .)
    LT              reduce using rule 87 (call_suffix -> DOT IDENT .)
    GE              reduce using rule 87 (call_suffix -> DOT IDENT .)
    GT              reduce using rule 87 (call_suffix -> DOT IDENT .)
    EQ              reduce using rule 87 (call_suffix -> DOT IDENT .)
    NE              reduce using rule 87 (call_suffix -> DOT IDENT .)
    LBRACE          reduce using rule 87 (call_suffix -> DOT IDENT .)
    RPAREN          reduce using rule 87 (call_suffix -> DOT IDENT .)
    COMMA           reduce using rule 87 (call_suffix -> DOT IDENT .)
    RBRACKET        reduce using rule 87 (call_suffix -> DOT IDENT .)
    RBRACE          reduce using rule 87 (call_suffix -> DOT IDENT .)
    IDENT           reduce using rule 87 (call_suffix -> DOT IDENT .)


state 239

    (88) call_suffix -> DDCOLON IDENT .

    EQUAL           reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    LPAREN          reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    DOT             reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    DDCOLON         reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    ARROW           reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    LBRACKET        reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    SEMI            reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    PLUS            reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    MINUS           reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    TIMES           reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    DIVIDE          reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    MOD             reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    LE              reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    LT              reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    GE              reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    GT              reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    EQ              reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    NE              reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    LBRACE          reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    RPAREN          reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    COMMA           reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    RBRACKET        reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    RBRACE          reduce using rule 88 (call_suffix -> DDCOLON IDENT .)
    IDENT           reduce using rule 88 (call_suffix -> DDCOLON IDENT .)


state 240

    (89) call_suffix -> ARROW IDENT .

    EQUAL           reduce using rule 89 (call_suffix -> ARROW IDENT .)
    LPAREN          reduce using rule 89 (call_suffix -> ARROW IDENT .)
    DOT             reduce using rule 89 (call_suffix -> ARROW IDENT .)
    DDCOLON         reduce using rule 89 (call_suffix -> ARROW IDENT .)
    ARROW           reduce using rule 89 (call_suffix -> ARROW IDENT .)
    LBRACKET        reduce using rule 89 (call_suffix -> ARROW IDENT .)
    SEMI            reduce using rule 89 (call_suffix -> ARROW IDENT .)
    PLUS            reduce using rule 89 (call_suffix -> ARROW IDENT .)
    MINUS           reduce using rule 89 (call_suffix -> ARROW IDENT .)
    TIMES           reduce using rule 89 (call_suffix -> ARROW IDENT .)
    DIVIDE          reduce using rule 89 (call_suffix -> ARROW IDENT .)
    MOD             reduce using rule 89 (call_suffix -> ARROW IDENT .)
    LE              reduce using rule 89 (call_suffix -> ARROW IDENT .)
    LT              reduce using rule 89 (call_suffix -> ARROW IDENT .)
    GE              reduce using rule 89 (call_suffix -> ARROW IDENT .)
    GT              reduce using rule 89 (call_suffix -> ARROW IDENT .)
    EQ              reduce using rule 89 (call_suffix -> ARROW IDENT .)
    NE              reduce using rule 89 (call_suffix -> ARROW IDENT .)
    LBRACE          reduce using rule 89 (call_suffix -> ARROW IDENT .)
    RPAREN          reduce using rule 89 (call_suffix -> ARROW IDENT .)
    COMMA           reduce using rule 89 (call_suffix -> ARROW IDENT .)
    RBRACKET        reduce using rule 89 (call_suffix -> ARROW IDENT .)
    RBRACE          reduce using rule 89 (call_suffix -> ARROW IDENT .)
    IDENT           reduce using rule 89 (call_suffix -> ARROW IDENT .)


state 241

    (90) call_suffix -> LBRACKET expression . RBRACKET
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    RBRACKET        shift and go to state 260
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 242

    (98) primary -> LBRACKET expr_list_opt RBRACKET .

    EQUAL           reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LPAREN          reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DOT             reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DDCOLON         reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    ARROW           reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LBRACKET        reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    SEMI            reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    PLUS            reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    MINUS           reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    TIMES           reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DIVIDE          reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    MOD             reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LE              reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LT              reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    GE              reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    GT              reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    EQ              reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    NE              reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LBRACE          reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RPAREN          reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    COMMA           reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RBRACKET        reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RBRACE          reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)
    IDENT           reduce using rule 98 (primary -> LBRACKET expr_list_opt RBRACKET .)


state 243

    (101) expr_list -> expr_list COMMA . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 261
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 244

    (108) primary -> NEW qualified_identifier LPAREN . arg_list_opt RPAREN
    (91) arg_list_opt -> . arg_list
    (92) arg_list_opt -> . empty
    (93) arg_list -> . arg_list COMMA argument
    (94) arg_list -> . argument
    (111) empty -> .
    (95) argument -> . IDENT COLON expression
    (96) argument -> . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RPAREN          reduce using rule 111 (empty -> .)
    IDENT           shift and go to state 236
    MINUS           shift and go to state 159
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    arg_list_opt                   shift and go to state 262
    arg_list                       shift and go to state 233
    empty                          shift and go to state 234
    argument                       shift and go to state 235
    expression                     shift and go to state 237
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 245

    (125) qualified_identifier -> IDENT DDCOLON . IDENT

    IDENT           shift and go to state 263


state 246

    (110) primary -> FN LPAREN parameters_opt . RPAREN return_opt block

    RPAREN          shift and go to state 264


state 247

    (68) var_decl -> LET IDENT COLON type_expr . EQUAL expression SEMI
    (69) var_decl -> LET IDENT COLON type_expr . SEMI

    EQUAL           shift and go to state 265
    SEMI            shift and go to state 266


state 248

    (31) field_assign -> IDENT COLON . expression opt_comma
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 267
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 249

    (27) primary -> IDENT LBRACE field_assign_list RBRACE .

    EQUAL           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LPAREN          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DOT             reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DDCOLON         reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    ARROW           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LBRACKET        reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    SEMI            reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    PLUS            reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    MINUS           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    TIMES           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DIVIDE          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    MOD             reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LE              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LT              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    GE              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    GT              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    EQ              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    NE              reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LBRACE          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RPAREN          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    COMMA           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RBRACKET        reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RBRACE          reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    IDENT           reduce using rule 27 (primary -> IDENT LBRACE field_assign_list RBRACE .)


state 250

    (28) field_assign_list -> field_assign_list field_assign .

    RBRACE          reduce using rule 28 (field_assign_list -> field_assign_list field_assign .)
    IDENT           reduce using rule 28 (field_assign_list -> field_assign_list field_assign .)


state 251

    (112) if_statement -> IF expression block elif_clauses . else_clause_opt
    (113) elif_clauses -> elif_clauses . elif_clause
    (117) else_clause_opt -> . ELSE block
    (118) else_clause_opt -> . empty
    (116) elif_clause -> . ELSE IF expression block
    (111) empty -> .

    ELSE            shift and go to state 270
    RBRACE          reduce using rule 111 (empty -> .)
    LET             reduce using rule 111 (empty -> .)
    RETURN          reduce using rule 111 (empty -> .)
    IF              reduce using rule 111 (empty -> .)
    WHILE           reduce using rule 111 (empty -> .)
    FOR             reduce using rule 111 (empty -> .)
    THROW           reduce using rule 111 (empty -> .)
    TRY             reduce using rule 111 (empty -> .)
    MINUS           reduce using rule 111 (empty -> .)
    IDENT           reduce using rule 111 (empty -> .)
    LPAREN          reduce using rule 111 (empty -> .)
    LBRACKET        reduce using rule 111 (empty -> .)
    NUMBER          reduce using rule 111 (empty -> .)
    STRING          reduce using rule 111 (empty -> .)
    TRUE            reduce using rule 111 (empty -> .)
    FALSE           reduce using rule 111 (empty -> .)
    NEW             reduce using rule 111 (empty -> .)
    FN              reduce using rule 111 (empty -> .)

    else_clause_opt                shift and go to state 268
    elif_clause                    shift and go to state 269
    empty                          shift and go to state 271

state 252

    (114) elif_clauses -> elif_clause .

    ELSE            reduce using rule 114 (elif_clauses -> elif_clause .)
    RBRACE          reduce using rule 114 (elif_clauses -> elif_clause .)
    LET             reduce using rule 114 (elif_clauses -> elif_clause .)
    RETURN          reduce using rule 114 (elif_clauses -> elif_clause .)
    IF              reduce using rule 114 (elif_clauses -> elif_clause .)
    WHILE           reduce using rule 114 (elif_clauses -> elif_clause .)
    FOR             reduce using rule 114 (elif_clauses -> elif_clause .)
    THROW           reduce using rule 114 (elif_clauses -> elif_clause .)
    TRY             reduce using rule 114 (elif_clauses -> elif_clause .)
    MINUS           reduce using rule 114 (elif_clauses -> elif_clause .)
    IDENT           reduce using rule 114 (elif_clauses -> elif_clause .)
    LPAREN          reduce using rule 114 (elif_clauses -> elif_clause .)
    LBRACKET        reduce using rule 114 (elif_clauses -> elif_clause .)
    NUMBER          reduce using rule 114 (elif_clauses -> elif_clause .)
    STRING          reduce using rule 114 (elif_clauses -> elif_clause .)
    TRUE            reduce using rule 114 (elif_clauses -> elif_clause .)
    FALSE           reduce using rule 114 (elif_clauses -> elif_clause .)
    NEW             reduce using rule 114 (elif_clauses -> elif_clause .)
    FN              reduce using rule 114 (elif_clauses -> elif_clause .)


state 253

    (115) elif_clauses -> empty .

    ELSE            reduce using rule 115 (elif_clauses -> empty .)
    RBRACE          reduce using rule 115 (elif_clauses -> empty .)
    LET             reduce using rule 115 (elif_clauses -> empty .)
    RETURN          reduce using rule 115 (elif_clauses -> empty .)
    IF              reduce using rule 115 (elif_clauses -> empty .)
    WHILE           reduce using rule 115 (elif_clauses -> empty .)
    FOR             reduce using rule 115 (elif_clauses -> empty .)
    THROW           reduce using rule 115 (elif_clauses -> empty .)
    TRY             reduce using rule 115 (elif_clauses -> empty .)
    MINUS           reduce using rule 115 (elif_clauses -> empty .)
    IDENT           reduce using rule 115 (elif_clauses -> empty .)
    LPAREN          reduce using rule 115 (elif_clauses -> empty .)
    LBRACKET        reduce using rule 115 (elif_clauses -> empty .)
    NUMBER          reduce using rule 115 (elif_clauses -> empty .)
    STRING          reduce using rule 115 (elif_clauses -> empty .)
    TRUE            reduce using rule 115 (elif_clauses -> empty .)
    FALSE           reduce using rule 115 (elif_clauses -> empty .)
    NEW             reduce using rule 115 (elif_clauses -> empty .)
    FN              reduce using rule 115 (elif_clauses -> empty .)


state 254

    (116) elif_clause -> ELSE . IF expression block

    IF              shift and go to state 272


state 255

    (129) for_stmt -> FOR IDENT COLON type_expr . IN expression block

    IN              shift and go to state 273


state 256

    (135) try_catch_statement -> TRY block CATCH LPAREN . IDENT COLON type_expr RPAREN block

    IDENT           shift and go to state 274


state 257

    (86) call_suffix -> LPAREN arg_list_opt RPAREN .

    EQUAL           reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LPAREN          reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DOT             reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DDCOLON         reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    ARROW           reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LBRACKET        reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    SEMI            reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    PLUS            reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    MINUS           reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    TIMES           reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DIVIDE          reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    MOD             reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LE              reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LT              reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    GE              reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    GT              reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    EQ              reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    NE              reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LBRACE          reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RPAREN          reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    COMMA           reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RBRACKET        reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RBRACE          reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    IDENT           reduce using rule 86 (call_suffix -> LPAREN arg_list_opt RPAREN .)


state 258

    (93) arg_list -> arg_list COMMA . argument
    (95) argument -> . IDENT COLON expression
    (96) argument -> . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 236
    MINUS           shift and go to state 159
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    argument                       shift and go to state 275
    expression                     shift and go to state 237
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 259

    (95) argument -> IDENT COLON . expression
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 276
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 260

    (90) call_suffix -> LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    DOT             reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    DDCOLON         reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    MOD             reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    LE              reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    LT              reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    GE              reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    GT              reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    EQ              reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    NE              reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)
    IDENT           reduce using rule 90 (call_suffix -> LBRACKET expression RBRACKET .)


state 261

    (101) expr_list -> expr_list COMMA expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    COMMA           reduce using rule 101 (expr_list -> expr_list COMMA expression .)
    RBRACKET        reduce using rule 101 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 262

    (108) primary -> NEW qualified_identifier LPAREN arg_list_opt . RPAREN

    RPAREN          shift and go to state 277


state 263

    (125) qualified_identifier -> IDENT DDCOLON IDENT .

    LPAREN          reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    EQUAL           reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    DOT             reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    DDCOLON         reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    ARROW           reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    LBRACKET        reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    SEMI            reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    PLUS            reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    MINUS           reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    TIMES           reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    DIVIDE          reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    MOD             reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    LE              reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    LT              reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    GE              reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    GT              reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    EQ              reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    NE              reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    LBRACE          reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    RPAREN          reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    COMMA           reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    RBRACKET        reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    RBRACE          reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)
    IDENT           reduce using rule 125 (qualified_identifier -> IDENT DDCOLON IDENT .)


state 264

    (110) primary -> FN LPAREN parameters_opt RPAREN . return_opt block
    (46) return_opt -> . ARROW type_expr
    (47) return_opt -> . empty
    (111) empty -> .

    ARROW           shift and go to state 100
    LBRACE          reduce using rule 111 (empty -> .)

    return_opt                     shift and go to state 278
    empty                          shift and go to state 101

state 265

    (68) var_decl -> LET IDENT COLON type_expr EQUAL . expression SEMI
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 279
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 266

    (69) var_decl -> LET IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LET             reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    RETURN          reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    IF              reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    WHILE           reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    FOR             reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    THROW           reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    TRY             reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    MINUS           reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    IDENT           reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LPAREN          reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LBRACKET        reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    NUMBER          reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    STRING          reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    TRUE            reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    FALSE           reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    NEW             reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)
    FN              reduce using rule 69 (var_decl -> LET IDENT COLON type_expr SEMI .)


state 267

    (31) field_assign -> IDENT COLON expression . opt_comma
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression
    (32) opt_comma -> . COMMA
    (33) opt_comma -> . empty
    (111) empty -> .

    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182
    COMMA           shift and go to state 112
    RBRACE          reduce using rule 111 (empty -> .)
    IDENT           reduce using rule 111 (empty -> .)

    opt_comma                      shift and go to state 280
    empty                          shift and go to state 113

state 268

    (112) if_statement -> IF expression block elif_clauses else_clause_opt .

    RBRACE          reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    LET             reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    RETURN          reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    IF              reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    WHILE           reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    FOR             reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    THROW           reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    TRY             reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    MINUS           reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    IDENT           reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    LPAREN          reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    LBRACKET        reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    NUMBER          reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    STRING          reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    TRUE            reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    FALSE           reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    NEW             reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)
    FN              reduce using rule 112 (if_statement -> IF expression block elif_clauses else_clause_opt .)


state 269

    (113) elif_clauses -> elif_clauses elif_clause .

    ELSE            reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    RBRACE          reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    LET             reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    RETURN          reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    IF              reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    WHILE           reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    FOR             reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    THROW           reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    TRY             reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    MINUS           reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    IDENT           reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    LPAREN          reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    LBRACKET        reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    NUMBER          reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    STRING          reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    TRUE            reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    FALSE           reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    NEW             reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)
    FN              reduce using rule 113 (elif_clauses -> elif_clauses elif_clause .)


state 270

    (117) else_clause_opt -> ELSE . block
    (116) elif_clause -> ELSE . IF expression block
    (56) block -> . LBRACE statement_list RBRACE

    IF              shift and go to state 272
    LBRACE          shift and go to state 121

    block                          shift and go to state 281

state 271

    (118) else_clause_opt -> empty .

    RBRACE          reduce using rule 118 (else_clause_opt -> empty .)
    LET             reduce using rule 118 (else_clause_opt -> empty .)
    RETURN          reduce using rule 118 (else_clause_opt -> empty .)
    IF              reduce using rule 118 (else_clause_opt -> empty .)
    WHILE           reduce using rule 118 (else_clause_opt -> empty .)
    FOR             reduce using rule 118 (else_clause_opt -> empty .)
    THROW           reduce using rule 118 (else_clause_opt -> empty .)
    TRY             reduce using rule 118 (else_clause_opt -> empty .)
    MINUS           reduce using rule 118 (else_clause_opt -> empty .)
    IDENT           reduce using rule 118 (else_clause_opt -> empty .)
    LPAREN          reduce using rule 118 (else_clause_opt -> empty .)
    LBRACKET        reduce using rule 118 (else_clause_opt -> empty .)
    NUMBER          reduce using rule 118 (else_clause_opt -> empty .)
    STRING          reduce using rule 118 (else_clause_opt -> empty .)
    TRUE            reduce using rule 118 (else_clause_opt -> empty .)
    FALSE           reduce using rule 118 (else_clause_opt -> empty .)
    NEW             reduce using rule 118 (else_clause_opt -> empty .)
    FN              reduce using rule 118 (else_clause_opt -> empty .)


state 272

    (116) elif_clause -> ELSE IF . expression block
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 282
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 273

    (129) for_stmt -> FOR IDENT COLON type_expr IN . expression block
    (72) expression -> . call_expr
    (73) expression -> . expression PLUS expression
    (74) expression -> . expression MINUS expression
    (75) expression -> . expression TIMES expression
    (76) expression -> . expression DIVIDE expression
    (77) expression -> . expression MOD expression
    (78) expression -> . expression LE expression
    (79) expression -> . expression LT expression
    (80) expression -> . expression GE expression
    (81) expression -> . expression GT expression
    (82) expression -> . expression EQ expression
    (83) expression -> . expression NE expression
    (127) expression -> . MINUS expression
    (84) call_expr -> . call_expr call_suffix
    (85) call_expr -> . primary
    (27) primary -> . IDENT LBRACE field_assign_list RBRACE
    (97) primary -> . LPAREN expression RPAREN
    (98) primary -> . LBRACKET expr_list_opt RBRACKET
    (103) primary -> . NUMBER
    (104) primary -> . STRING
    (105) primary -> . IDENT
    (106) primary -> . TRUE
    (107) primary -> . FALSE
    (108) primary -> . NEW qualified_identifier LPAREN arg_list_opt RPAREN
    (109) primary -> . NEW qualified_identifier
    (110) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    MINUS           shift and go to state 159
    IDENT           shift and go to state 148
    LPAREN          shift and go to state 157
    LBRACKET        shift and go to state 161
    NUMBER          shift and go to state 162
    STRING          shift and go to state 163
    TRUE            shift and go to state 164
    FALSE           shift and go to state 165
    NEW             shift and go to state 166
    FN              shift and go to state 167

    expression                     shift and go to state 283
    call_expr                      shift and go to state 185
    primary                        shift and go to state 160

state 274

    (135) try_catch_statement -> TRY block CATCH LPAREN IDENT . COLON type_expr RPAREN block

    COLON           shift and go to state 284


state 275

    (93) arg_list -> arg_list COMMA argument .

    COMMA           reduce using rule 93 (arg_list -> arg_list COMMA argument .)
    RPAREN          reduce using rule 93 (arg_list -> arg_list COMMA argument .)


state 276

    (95) argument -> IDENT COLON expression .
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    COMMA           reduce using rule 95 (argument -> IDENT COLON expression .)
    RPAREN          reduce using rule 95 (argument -> IDENT COLON expression .)
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 277

    (108) primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .

    EQUAL           reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LPAREN          reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    DOT             reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    DDCOLON         reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    ARROW           reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LBRACKET        reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    SEMI            reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    PLUS            reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    MINUS           reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    TIMES           reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    DIVIDE          reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    MOD             reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LE              reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LT              reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    GE              reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    GT              reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    EQ              reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    NE              reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    LBRACE          reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    RPAREN          reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    COMMA           reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    RBRACKET        reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    RBRACE          reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)
    IDENT           reduce using rule 108 (primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN .)


state 278

    (110) primary -> FN LPAREN parameters_opt RPAREN return_opt . block
    (56) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 121

    block                          shift and go to state 285

state 279

    (68) var_decl -> LET IDENT COLON type_expr EQUAL expression . SEMI
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression

    SEMI            shift and go to state 286
    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182


state 280

    (31) field_assign -> IDENT COLON expression opt_comma .

    RBRACE          reduce using rule 31 (field_assign -> IDENT COLON expression opt_comma .)
    IDENT           reduce using rule 31 (field_assign -> IDENT COLON expression opt_comma .)


state 281

    (117) else_clause_opt -> ELSE block .

    RBRACE          reduce using rule 117 (else_clause_opt -> ELSE block .)
    LET             reduce using rule 117 (else_clause_opt -> ELSE block .)
    RETURN          reduce using rule 117 (else_clause_opt -> ELSE block .)
    IF              reduce using rule 117 (else_clause_opt -> ELSE block .)
    WHILE           reduce using rule 117 (else_clause_opt -> ELSE block .)
    FOR             reduce using rule 117 (else_clause_opt -> ELSE block .)
    THROW           reduce using rule 117 (else_clause_opt -> ELSE block .)
    TRY             reduce using rule 117 (else_clause_opt -> ELSE block .)
    MINUS           reduce using rule 117 (else_clause_opt -> ELSE block .)
    IDENT           reduce using rule 117 (else_clause_opt -> ELSE block .)
    LPAREN          reduce using rule 117 (else_clause_opt -> ELSE block .)
    LBRACKET        reduce using rule 117 (else_clause_opt -> ELSE block .)
    NUMBER          reduce using rule 117 (else_clause_opt -> ELSE block .)
    STRING          reduce using rule 117 (else_clause_opt -> ELSE block .)
    TRUE            reduce using rule 117 (else_clause_opt -> ELSE block .)
    FALSE           reduce using rule 117 (else_clause_opt -> ELSE block .)
    NEW             reduce using rule 117 (else_clause_opt -> ELSE block .)
    FN              reduce using rule 117 (else_clause_opt -> ELSE block .)


state 282

    (116) elif_clause -> ELSE IF expression . block
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression
    (56) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182
    LBRACE          shift and go to state 121

    block                          shift and go to state 287

state 283

    (129) for_stmt -> FOR IDENT COLON type_expr IN expression . block
    (73) expression -> expression . PLUS expression
    (74) expression -> expression . MINUS expression
    (75) expression -> expression . TIMES expression
    (76) expression -> expression . DIVIDE expression
    (77) expression -> expression . MOD expression
    (78) expression -> expression . LE expression
    (79) expression -> expression . LT expression
    (80) expression -> expression . GE expression
    (81) expression -> expression . GT expression
    (82) expression -> expression . EQ expression
    (83) expression -> expression . NE expression
    (56) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 172
    MINUS           shift and go to state 173
    TIMES           shift and go to state 174
    DIVIDE          shift and go to state 175
    MOD             shift and go to state 176
    LE              shift and go to state 177
    LT              shift and go to state 178
    GE              shift and go to state 179
    GT              shift and go to state 180
    EQ              shift and go to state 181
    NE              shift and go to state 182
    LBRACE          shift and go to state 121

    block                          shift and go to state 288

state 284

    (135) try_catch_statement -> TRY block CATCH LPAREN IDENT COLON . type_expr RPAREN block
    (48) type_expr -> . simple_type_expr array_spec_opt
    (49) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 91

    type_expr                      shift and go to state 289
    simple_type_expr               shift and go to state 93

state 285

    (110) primary -> FN LPAREN parameters_opt RPAREN return_opt block .

    EQUAL           reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LPAREN          reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DOT             reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DDCOLON         reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    ARROW           reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LBRACKET        reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    SEMI            reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    PLUS            reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    MINUS           reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    TIMES           reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DIVIDE          reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    MOD             reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LE              reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LT              reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    GE              reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    GT              reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    EQ              reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    NE              reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LBRACE          reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RPAREN          reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    COMMA           reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RBRACKET        reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RBRACE          reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    IDENT           reduce using rule 110 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)


state 286

    (68) var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .

    RBRACE          reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LET             reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    RETURN          reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    IF              reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    WHILE           reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    FOR             reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    THROW           reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    TRY             reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    MINUS           reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    IDENT           reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LPAREN          reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LBRACKET        reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    NUMBER          reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    STRING          reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    TRUE            reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    FALSE           reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    NEW             reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    FN              reduce using rule 68 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)


state 287

    (116) elif_clause -> ELSE IF expression block .

    ELSE            reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    RBRACE          reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    LET             reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    RETURN          reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    IF              reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    WHILE           reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    FOR             reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    THROW           reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    TRY             reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    MINUS           reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    IDENT           reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    LPAREN          reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    LBRACKET        reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    NUMBER          reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    STRING          reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    TRUE            reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    FALSE           reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    NEW             reduce using rule 116 (elif_clause -> ELSE IF expression block .)
    FN              reduce using rule 116 (elif_clause -> ELSE IF expression block .)


state 288

    (129) for_stmt -> FOR IDENT COLON type_expr IN expression block .

    RBRACE          reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    LET             reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    RETURN          reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    IF              reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    WHILE           reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    FOR             reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    THROW           reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    TRY             reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    MINUS           reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    IDENT           reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    LPAREN          reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    LBRACKET        reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    NUMBER          reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    STRING          reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    TRUE            reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    FALSE           reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    NEW             reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)
    FN              reduce using rule 129 (for_stmt -> FOR IDENT COLON type_expr IN expression block .)


state 289

    (135) try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr . RPAREN block

    RPAREN          shift and go to state 290


state 290

    (135) try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN . block
    (56) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 121

    block                          shift and go to state 291

state 291

    (135) try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .

    RBRACE          reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    LET             reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    RETURN          reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    IF              reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    WHILE           reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    FOR             reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    THROW           reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    TRY             reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    MINUS           reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    IDENT           reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    LPAREN          reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    LBRACKET        reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    NUMBER          reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    STRING          reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    TRUE            reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    FALSE           reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    NEW             reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)
    FN              reduce using rule 135 (try_catch_statement -> TRY block CATCH LPAREN IDENT COLON type_expr RPAREN block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENT in state 42 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 117 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 148 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 170 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 204 resolved as shift
WARNING: shift/reduce conflict for DDCOLON in state 205 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 225 resolved as shift
