Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> opt_module decl_list
Rule 2     opt_module -> module_decl
Rule 3     opt_module -> empty
Rule 4     decl_list -> decl_list decl
Rule 5     decl_list -> decl
Rule 6     decl -> class_def
Rule 7     decl -> struct_def
Rule 8     decl -> enum_def
Rule 9     decl -> join_def
Rule 10    decl -> implement_decl
Rule 11    decl -> function
Rule 12    decl -> import_decl
Rule 13    module_decl -> MODULE IDENT SEMI
Rule 14    struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE
Rule 15    enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE
Rule 16    join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
Rule 17    field_decl_list -> field_decl_list field_decl
Rule 18    field_decl_list -> field_decl
Rule 19    field_decl_list -> empty
Rule 20    field_decl -> IDENT COLON type_expr opt_comma
Rule 21    enum_variant_list -> enum_variant_list COMMA IDENT
Rule 22    enum_variant_list -> IDENT
Rule 23    enum_variant_list -> empty
Rule 24    primary -> IDENT LBRACE field_assign_list RBRACE
Rule 25    field_assign_list -> field_assign_list field_assign
Rule 26    field_assign_list -> field_assign
Rule 27    field_assign_list -> empty
Rule 28    field_assign -> IDENT COLON expression opt_comma
Rule 29    opt_comma -> COMMA
Rule 30    opt_comma -> empty
Rule 31    class_def -> CLASS IDENT LBRACE class_body RBRACE
Rule 32    class_body -> class_body class_member
Rule 33    class_body -> class_member
Rule 34    class_member -> PUBLIC IDENT COLON type_expr SEMI
Rule 35    class_member -> LET IDENT COLON type_expr SEMI
Rule 36    class_member -> function
Rule 37    function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block
Rule 38    parameters_opt -> parameters
Rule 39    parameters_opt -> empty
Rule 40    parameters -> parameters COMMA parameter
Rule 41    parameters -> parameter
Rule 42    parameter -> IDENT COLON type_expr
Rule 43    return_opt -> ARROW type_expr
Rule 44    return_opt -> empty
Rule 45    type_expr -> simple_type_expr array_spec_opt
Rule 46    simple_type_expr -> IDENT type_access_opt
Rule 47    array_spec_opt -> LBRACKET NUMBER RBRACKET
Rule 48    array_spec_opt -> empty
Rule 49    type_access_opt -> type_access_opt_part
Rule 50    type_access_opt -> empty
Rule 51    type_access_opt_part -> DOT IDENT
Rule 52    type_access_opt_part -> DDCOLON IDENT
Rule 53    block -> LBRACE statement_list RBRACE
Rule 54    statement_list -> statement_list statement
Rule 55    statement_list -> empty
Rule 56    statement -> var_decl
Rule 57    statement -> assignment_statement
Rule 58    statement -> return_statement
Rule 59    statement -> expr_statement
Rule 60    statement -> if_statement
Rule 61    var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI
Rule 62    var_decl -> LET IDENT COLON type_expr SEMI
Rule 63    return_statement -> RETURN expression SEMI
Rule 64    expr_statement -> expression SEMI
Rule 65    expression -> call_expr
Rule 66    expression -> expression PLUS expression
Rule 67    expression -> expression MINUS expression
Rule 68    expression -> expression TIMES expression
Rule 69    expression -> expression DIVIDE expression
Rule 70    expression -> expression MOD expression
Rule 71    expression -> expression LE expression
Rule 72    expression -> expression LT expression
Rule 73    expression -> expression GE expression
Rule 74    expression -> expression GT expression
Rule 75    expression -> expression EQ expression
Rule 76    expression -> expression NE expression
Rule 77    call_expr -> call_expr call_suffix
Rule 78    call_expr -> primary
Rule 79    call_suffix -> LPAREN arg_list_opt RPAREN
Rule 80    call_suffix -> DOT IDENT
Rule 81    call_suffix -> DDCOLON IDENT
Rule 82    call_suffix -> ARROW IDENT
Rule 83    call_suffix -> LBRACKET expression RBRACKET
Rule 84    arg_list_opt -> arg_list
Rule 85    arg_list_opt -> empty
Rule 86    arg_list -> arg_list COMMA argument
Rule 87    arg_list -> argument
Rule 88    argument -> IDENT COLON expression
Rule 89    argument -> expression
Rule 90    primary -> LPAREN expression RPAREN
Rule 91    primary -> LBRACKET expr_list_opt RBRACKET
Rule 92    expr_list_opt -> expr_list
Rule 93    expr_list_opt -> empty
Rule 94    expr_list -> expr_list COMMA expression
Rule 95    expr_list -> expression
Rule 96    primary -> NUMBER
Rule 97    primary -> STRING
Rule 98    primary -> IDENT
Rule 99    primary -> TRUE
Rule 100   primary -> FALSE
Rule 101   primary -> NEW IDENT LPAREN arg_list_opt RPAREN
Rule 102   primary -> NEW IDENT
Rule 103   primary -> FN LPAREN parameters_opt RPAREN return_opt block
Rule 104   empty -> <empty>
Rule 105   if_statement -> IF expression block else_clause_opt
Rule 106   else_clause_opt -> ELSE if_statement
Rule 107   else_clause_opt -> ELSE block
Rule 108   else_clause_opt -> empty
Rule 109   implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
Rule 110   method_list -> method_list function
Rule 111   method_list -> function
Rule 112   assignment_statement -> assignment SEMI
Rule 113   assignment -> call_expr EQUAL expression
Rule 114   import_decl -> IMPORT STRING SEMI

Terminals, with rules where they appear

AND                  : 16
ARROW                : 43 82
AS                   : 16
CLASS                : 31
COLON                : 20 28 34 35 42 61 62 88
COMMA                : 21 29 40 86 94
DDCOLON              : 52 81
DIVIDE               : 69
DOT                  : 51 80
ELSE                 : 106 107
ENUM                 : 15
EQ                   : 75
EQUAL                : 61 113
FALSE                : 100
FN                   : 37 103
GE                   : 73
GT                   : 74
IDENT                : 13 14 15 16 16 16 20 21 22 24 28 31 34 35 37 42 46 51 52 61 62 80 81 82 88 98 101 102 109 109
IF                   : 105
IMPLEMENT            : 109
IMPORT               : 114
JOIN                 : 16
LBRACE               : 14 15 16 24 31 53 109
LBRACKET             : 47 83 91
LE                   : 71
LET                  : 35 61 62
LPAREN               : 37 79 90 101 103
LT                   : 72
MINUS                : 67
MOD                  : 70
MODULE               : 13
NE                   : 76
NEW                  : 101 102
NUMBER               : 47 96
PLUS                 : 66
PUBLIC               : 34
RBRACE               : 14 15 16 24 31 53 109
RBRACKET             : 47 83 91
RETURN               : 63
RPAREN               : 37 79 90 101 103
SEMI                 : 13 34 35 61 62 63 64 112 114
STRING               : 97 114
STRUCT               : 14
TIMES                : 68
TRUE                 : 99
USES                 : 109
error                : 

Nonterminals, with rules where they appear

arg_list             : 84 86
arg_list_opt         : 79 101
argument             : 86 87
array_spec_opt       : 45
assignment           : 112
assignment_statement : 57
block                : 37 103 105 107
call_expr            : 65 77 113
call_suffix          : 77
class_body           : 31 32
class_def            : 6
class_member         : 32 33
decl                 : 4 5
decl_list            : 1 4
else_clause_opt      : 105
empty                : 3 19 23 27 30 39 44 48 50 55 85 93 108
enum_def             : 8
enum_variant_list    : 15 21
expr_list            : 92 94
expr_list_opt        : 91
expr_statement       : 59
expression           : 28 61 63 64 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 83 88 89 90 94 95 105 113
field_assign         : 25 26
field_assign_list    : 24 25
field_decl           : 17 18
field_decl_list      : 14 16 17
function             : 11 36 110 111
if_statement         : 60 106
implement_decl       : 10
import_decl          : 12
join_def             : 9
method_list          : 109 110
module_decl          : 2
opt_comma            : 20 28
opt_module           : 1
parameter            : 40 41
parameters           : 38 40
parameters_opt       : 37 103
primary              : 78
program              : 0
return_opt           : 37 103
return_statement     : 58
simple_type_expr     : 45
statement            : 54
statement_list       : 53 54
struct_def           : 7
type_access_opt      : 46
type_access_opt_part : 49
type_expr            : 20 34 35 42 43 61 62
var_decl             : 56

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . opt_module decl_list
    (2) opt_module -> . module_decl
    (3) opt_module -> . empty
    (13) module_decl -> . MODULE IDENT SEMI
    (104) empty -> .

    MODULE          shift and go to state 5
    CLASS           reduce using rule 104 (empty -> .)
    STRUCT          reduce using rule 104 (empty -> .)
    ENUM            reduce using rule 104 (empty -> .)
    JOIN            reduce using rule 104 (empty -> .)
    IMPLEMENT       reduce using rule 104 (empty -> .)
    FN              reduce using rule 104 (empty -> .)
    IMPORT          reduce using rule 104 (empty -> .)

    program                        shift and go to state 1
    opt_module                     shift and go to state 2
    module_decl                    shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> opt_module . decl_list
    (4) decl_list -> . decl_list decl
    (5) decl_list -> . decl
    (6) decl -> . class_def
    (7) decl -> . struct_def
    (8) decl -> . enum_def
    (9) decl -> . join_def
    (10) decl -> . implement_decl
    (11) decl -> . function
    (12) decl -> . import_decl
    (31) class_def -> . CLASS IDENT LBRACE class_body RBRACE
    (14) struct_def -> . STRUCT IDENT LBRACE field_decl_list RBRACE
    (15) enum_def -> . ENUM IDENT LBRACE enum_variant_list RBRACE
    (16) join_def -> . JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
    (109) implement_decl -> . IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
    (37) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block
    (114) import_decl -> . IMPORT STRING SEMI

    CLASS           shift and go to state 15
    STRUCT          shift and go to state 16
    ENUM            shift and go to state 17
    JOIN            shift and go to state 18
    IMPLEMENT       shift and go to state 19
    FN              shift and go to state 20
    IMPORT          shift and go to state 21

    decl_list                      shift and go to state 6
    decl                           shift and go to state 7
    class_def                      shift and go to state 8
    struct_def                     shift and go to state 9
    enum_def                       shift and go to state 10
    join_def                       shift and go to state 11
    implement_decl                 shift and go to state 12
    function                       shift and go to state 13
    import_decl                    shift and go to state 14

state 3

    (2) opt_module -> module_decl .

    CLASS           reduce using rule 2 (opt_module -> module_decl .)
    STRUCT          reduce using rule 2 (opt_module -> module_decl .)
    ENUM            reduce using rule 2 (opt_module -> module_decl .)
    JOIN            reduce using rule 2 (opt_module -> module_decl .)
    IMPLEMENT       reduce using rule 2 (opt_module -> module_decl .)
    FN              reduce using rule 2 (opt_module -> module_decl .)
    IMPORT          reduce using rule 2 (opt_module -> module_decl .)


state 4

    (3) opt_module -> empty .

    CLASS           reduce using rule 3 (opt_module -> empty .)
    STRUCT          reduce using rule 3 (opt_module -> empty .)
    ENUM            reduce using rule 3 (opt_module -> empty .)
    JOIN            reduce using rule 3 (opt_module -> empty .)
    IMPLEMENT       reduce using rule 3 (opt_module -> empty .)
    FN              reduce using rule 3 (opt_module -> empty .)
    IMPORT          reduce using rule 3 (opt_module -> empty .)


state 5

    (13) module_decl -> MODULE . IDENT SEMI

    IDENT           shift and go to state 22


state 6

    (1) program -> opt_module decl_list .
    (4) decl_list -> decl_list . decl
    (6) decl -> . class_def
    (7) decl -> . struct_def
    (8) decl -> . enum_def
    (9) decl -> . join_def
    (10) decl -> . implement_decl
    (11) decl -> . function
    (12) decl -> . import_decl
    (31) class_def -> . CLASS IDENT LBRACE class_body RBRACE
    (14) struct_def -> . STRUCT IDENT LBRACE field_decl_list RBRACE
    (15) enum_def -> . ENUM IDENT LBRACE enum_variant_list RBRACE
    (16) join_def -> . JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE
    (109) implement_decl -> . IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE
    (37) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block
    (114) import_decl -> . IMPORT STRING SEMI

    $end            reduce using rule 1 (program -> opt_module decl_list .)
    CLASS           shift and go to state 15
    STRUCT          shift and go to state 16
    ENUM            shift and go to state 17
    JOIN            shift and go to state 18
    IMPLEMENT       shift and go to state 19
    FN              shift and go to state 20
    IMPORT          shift and go to state 21

    decl                           shift and go to state 23
    class_def                      shift and go to state 8
    struct_def                     shift and go to state 9
    enum_def                       shift and go to state 10
    join_def                       shift and go to state 11
    implement_decl                 shift and go to state 12
    function                       shift and go to state 13
    import_decl                    shift and go to state 14

state 7

    (5) decl_list -> decl .

    CLASS           reduce using rule 5 (decl_list -> decl .)
    STRUCT          reduce using rule 5 (decl_list -> decl .)
    ENUM            reduce using rule 5 (decl_list -> decl .)
    JOIN            reduce using rule 5 (decl_list -> decl .)
    IMPLEMENT       reduce using rule 5 (decl_list -> decl .)
    FN              reduce using rule 5 (decl_list -> decl .)
    IMPORT          reduce using rule 5 (decl_list -> decl .)
    $end            reduce using rule 5 (decl_list -> decl .)


state 8

    (6) decl -> class_def .

    CLASS           reduce using rule 6 (decl -> class_def .)
    STRUCT          reduce using rule 6 (decl -> class_def .)
    ENUM            reduce using rule 6 (decl -> class_def .)
    JOIN            reduce using rule 6 (decl -> class_def .)
    IMPLEMENT       reduce using rule 6 (decl -> class_def .)
    FN              reduce using rule 6 (decl -> class_def .)
    IMPORT          reduce using rule 6 (decl -> class_def .)
    $end            reduce using rule 6 (decl -> class_def .)


state 9

    (7) decl -> struct_def .

    CLASS           reduce using rule 7 (decl -> struct_def .)
    STRUCT          reduce using rule 7 (decl -> struct_def .)
    ENUM            reduce using rule 7 (decl -> struct_def .)
    JOIN            reduce using rule 7 (decl -> struct_def .)
    IMPLEMENT       reduce using rule 7 (decl -> struct_def .)
    FN              reduce using rule 7 (decl -> struct_def .)
    IMPORT          reduce using rule 7 (decl -> struct_def .)
    $end            reduce using rule 7 (decl -> struct_def .)


state 10

    (8) decl -> enum_def .

    CLASS           reduce using rule 8 (decl -> enum_def .)
    STRUCT          reduce using rule 8 (decl -> enum_def .)
    ENUM            reduce using rule 8 (decl -> enum_def .)
    JOIN            reduce using rule 8 (decl -> enum_def .)
    IMPLEMENT       reduce using rule 8 (decl -> enum_def .)
    FN              reduce using rule 8 (decl -> enum_def .)
    IMPORT          reduce using rule 8 (decl -> enum_def .)
    $end            reduce using rule 8 (decl -> enum_def .)


state 11

    (9) decl -> join_def .

    CLASS           reduce using rule 9 (decl -> join_def .)
    STRUCT          reduce using rule 9 (decl -> join_def .)
    ENUM            reduce using rule 9 (decl -> join_def .)
    JOIN            reduce using rule 9 (decl -> join_def .)
    IMPLEMENT       reduce using rule 9 (decl -> join_def .)
    FN              reduce using rule 9 (decl -> join_def .)
    IMPORT          reduce using rule 9 (decl -> join_def .)
    $end            reduce using rule 9 (decl -> join_def .)


state 12

    (10) decl -> implement_decl .

    CLASS           reduce using rule 10 (decl -> implement_decl .)
    STRUCT          reduce using rule 10 (decl -> implement_decl .)
    ENUM            reduce using rule 10 (decl -> implement_decl .)
    JOIN            reduce using rule 10 (decl -> implement_decl .)
    IMPLEMENT       reduce using rule 10 (decl -> implement_decl .)
    FN              reduce using rule 10 (decl -> implement_decl .)
    IMPORT          reduce using rule 10 (decl -> implement_decl .)
    $end            reduce using rule 10 (decl -> implement_decl .)


state 13

    (11) decl -> function .

    CLASS           reduce using rule 11 (decl -> function .)
    STRUCT          reduce using rule 11 (decl -> function .)
    ENUM            reduce using rule 11 (decl -> function .)
    JOIN            reduce using rule 11 (decl -> function .)
    IMPLEMENT       reduce using rule 11 (decl -> function .)
    FN              reduce using rule 11 (decl -> function .)
    IMPORT          reduce using rule 11 (decl -> function .)
    $end            reduce using rule 11 (decl -> function .)


state 14

    (12) decl -> import_decl .

    CLASS           reduce using rule 12 (decl -> import_decl .)
    STRUCT          reduce using rule 12 (decl -> import_decl .)
    ENUM            reduce using rule 12 (decl -> import_decl .)
    JOIN            reduce using rule 12 (decl -> import_decl .)
    IMPLEMENT       reduce using rule 12 (decl -> import_decl .)
    FN              reduce using rule 12 (decl -> import_decl .)
    IMPORT          reduce using rule 12 (decl -> import_decl .)
    $end            reduce using rule 12 (decl -> import_decl .)


state 15

    (31) class_def -> CLASS . IDENT LBRACE class_body RBRACE

    IDENT           shift and go to state 24


state 16

    (14) struct_def -> STRUCT . IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 25


state 17

    (15) enum_def -> ENUM . IDENT LBRACE enum_variant_list RBRACE

    IDENT           shift and go to state 26


state 18

    (16) join_def -> JOIN . IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 27


state 19

    (109) implement_decl -> IMPLEMENT . IDENT USES IDENT LBRACE method_list RBRACE

    IDENT           shift and go to state 28


state 20

    (37) function -> FN . IDENT LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 29


state 21

    (114) import_decl -> IMPORT . STRING SEMI

    STRING          shift and go to state 30


state 22

    (13) module_decl -> MODULE IDENT . SEMI

    SEMI            shift and go to state 31


state 23

    (4) decl_list -> decl_list decl .

    CLASS           reduce using rule 4 (decl_list -> decl_list decl .)
    STRUCT          reduce using rule 4 (decl_list -> decl_list decl .)
    ENUM            reduce using rule 4 (decl_list -> decl_list decl .)
    JOIN            reduce using rule 4 (decl_list -> decl_list decl .)
    IMPLEMENT       reduce using rule 4 (decl_list -> decl_list decl .)
    FN              reduce using rule 4 (decl_list -> decl_list decl .)
    IMPORT          reduce using rule 4 (decl_list -> decl_list decl .)
    $end            reduce using rule 4 (decl_list -> decl_list decl .)


state 24

    (31) class_def -> CLASS IDENT . LBRACE class_body RBRACE

    LBRACE          shift and go to state 32


state 25

    (14) struct_def -> STRUCT IDENT . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 33


state 26

    (15) enum_def -> ENUM IDENT . LBRACE enum_variant_list RBRACE

    LBRACE          shift and go to state 34


state 27

    (16) join_def -> JOIN IDENT . AND IDENT AS IDENT LBRACE field_decl_list RBRACE

    AND             shift and go to state 35


state 28

    (109) implement_decl -> IMPLEMENT IDENT . USES IDENT LBRACE method_list RBRACE

    USES            shift and go to state 36


state 29

    (37) function -> FN IDENT . LPAREN parameters_opt RPAREN return_opt block

    LPAREN          shift and go to state 37


state 30

    (114) import_decl -> IMPORT STRING . SEMI

    SEMI            shift and go to state 38


state 31

    (13) module_decl -> MODULE IDENT SEMI .

    CLASS           reduce using rule 13 (module_decl -> MODULE IDENT SEMI .)
    STRUCT          reduce using rule 13 (module_decl -> MODULE IDENT SEMI .)
    ENUM            reduce using rule 13 (module_decl -> MODULE IDENT SEMI .)
    JOIN            reduce using rule 13 (module_decl -> MODULE IDENT SEMI .)
    IMPLEMENT       reduce using rule 13 (module_decl -> MODULE IDENT SEMI .)
    FN              reduce using rule 13 (module_decl -> MODULE IDENT SEMI .)
    IMPORT          reduce using rule 13 (module_decl -> MODULE IDENT SEMI .)


state 32

    (31) class_def -> CLASS IDENT LBRACE . class_body RBRACE
    (32) class_body -> . class_body class_member
    (33) class_body -> . class_member
    (34) class_member -> . PUBLIC IDENT COLON type_expr SEMI
    (35) class_member -> . LET IDENT COLON type_expr SEMI
    (36) class_member -> . function
    (37) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    PUBLIC          shift and go to state 41
    LET             shift and go to state 42
    FN              shift and go to state 20

    class_body                     shift and go to state 39
    class_member                   shift and go to state 40
    function                       shift and go to state 43

state 33

    (14) struct_def -> STRUCT IDENT LBRACE . field_decl_list RBRACE
    (17) field_decl_list -> . field_decl_list field_decl
    (18) field_decl_list -> . field_decl
    (19) field_decl_list -> . empty
    (20) field_decl -> . IDENT COLON type_expr opt_comma
    (104) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 44
    RBRACE          reduce using rule 104 (empty -> .)

  ! IDENT           [ reduce using rule 104 (empty -> .) ]

    field_decl_list                shift and go to state 45
    field_decl                     shift and go to state 46
    empty                          shift and go to state 47

state 34

    (15) enum_def -> ENUM IDENT LBRACE . enum_variant_list RBRACE
    (21) enum_variant_list -> . enum_variant_list COMMA IDENT
    (22) enum_variant_list -> . IDENT
    (23) enum_variant_list -> . empty
    (104) empty -> .

    IDENT           shift and go to state 48
    RBRACE          reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)

    enum_variant_list              shift and go to state 49
    empty                          shift and go to state 50

state 35

    (16) join_def -> JOIN IDENT AND . IDENT AS IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 51


state 36

    (109) implement_decl -> IMPLEMENT IDENT USES . IDENT LBRACE method_list RBRACE

    IDENT           shift and go to state 52


state 37

    (37) function -> FN IDENT LPAREN . parameters_opt RPAREN return_opt block
    (38) parameters_opt -> . parameters
    (39) parameters_opt -> . empty
    (40) parameters -> . parameters COMMA parameter
    (41) parameters -> . parameter
    (104) empty -> .
    (42) parameter -> . IDENT COLON type_expr

    RPAREN          reduce using rule 104 (empty -> .)
    IDENT           shift and go to state 53

    parameters_opt                 shift and go to state 54
    parameters                     shift and go to state 55
    empty                          shift and go to state 56
    parameter                      shift and go to state 57

state 38

    (114) import_decl -> IMPORT STRING SEMI .

    CLASS           reduce using rule 114 (import_decl -> IMPORT STRING SEMI .)
    STRUCT          reduce using rule 114 (import_decl -> IMPORT STRING SEMI .)
    ENUM            reduce using rule 114 (import_decl -> IMPORT STRING SEMI .)
    JOIN            reduce using rule 114 (import_decl -> IMPORT STRING SEMI .)
    IMPLEMENT       reduce using rule 114 (import_decl -> IMPORT STRING SEMI .)
    FN              reduce using rule 114 (import_decl -> IMPORT STRING SEMI .)
    IMPORT          reduce using rule 114 (import_decl -> IMPORT STRING SEMI .)
    $end            reduce using rule 114 (import_decl -> IMPORT STRING SEMI .)


state 39

    (31) class_def -> CLASS IDENT LBRACE class_body . RBRACE
    (32) class_body -> class_body . class_member
    (34) class_member -> . PUBLIC IDENT COLON type_expr SEMI
    (35) class_member -> . LET IDENT COLON type_expr SEMI
    (36) class_member -> . function
    (37) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 58
    PUBLIC          shift and go to state 41
    LET             shift and go to state 42
    FN              shift and go to state 20

    class_member                   shift and go to state 59
    function                       shift and go to state 43

state 40

    (33) class_body -> class_member .

    RBRACE          reduce using rule 33 (class_body -> class_member .)
    PUBLIC          reduce using rule 33 (class_body -> class_member .)
    LET             reduce using rule 33 (class_body -> class_member .)
    FN              reduce using rule 33 (class_body -> class_member .)


state 41

    (34) class_member -> PUBLIC . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 60


state 42

    (35) class_member -> LET . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 61


state 43

    (36) class_member -> function .

    RBRACE          reduce using rule 36 (class_member -> function .)
    PUBLIC          reduce using rule 36 (class_member -> function .)
    LET             reduce using rule 36 (class_member -> function .)
    FN              reduce using rule 36 (class_member -> function .)


state 44

    (20) field_decl -> IDENT . COLON type_expr opt_comma

    COLON           shift and go to state 62


state 45

    (14) struct_def -> STRUCT IDENT LBRACE field_decl_list . RBRACE
    (17) field_decl_list -> field_decl_list . field_decl
    (20) field_decl -> . IDENT COLON type_expr opt_comma

    RBRACE          shift and go to state 63
    IDENT           shift and go to state 44

    field_decl                     shift and go to state 64

state 46

    (18) field_decl_list -> field_decl .

    RBRACE          reduce using rule 18 (field_decl_list -> field_decl .)
    IDENT           reduce using rule 18 (field_decl_list -> field_decl .)


state 47

    (19) field_decl_list -> empty .

    RBRACE          reduce using rule 19 (field_decl_list -> empty .)
    IDENT           reduce using rule 19 (field_decl_list -> empty .)


state 48

    (22) enum_variant_list -> IDENT .

    RBRACE          reduce using rule 22 (enum_variant_list -> IDENT .)
    COMMA           reduce using rule 22 (enum_variant_list -> IDENT .)


state 49

    (15) enum_def -> ENUM IDENT LBRACE enum_variant_list . RBRACE
    (21) enum_variant_list -> enum_variant_list . COMMA IDENT

    RBRACE          shift and go to state 65
    COMMA           shift and go to state 66


state 50

    (23) enum_variant_list -> empty .

    RBRACE          reduce using rule 23 (enum_variant_list -> empty .)
    COMMA           reduce using rule 23 (enum_variant_list -> empty .)


state 51

    (16) join_def -> JOIN IDENT AND IDENT . AS IDENT LBRACE field_decl_list RBRACE

    AS              shift and go to state 67


state 52

    (109) implement_decl -> IMPLEMENT IDENT USES IDENT . LBRACE method_list RBRACE

    LBRACE          shift and go to state 68


state 53

    (42) parameter -> IDENT . COLON type_expr

    COLON           shift and go to state 69


state 54

    (37) function -> FN IDENT LPAREN parameters_opt . RPAREN return_opt block

    RPAREN          shift and go to state 70


state 55

    (38) parameters_opt -> parameters .
    (40) parameters -> parameters . COMMA parameter

    RPAREN          reduce using rule 38 (parameters_opt -> parameters .)
    COMMA           shift and go to state 71


state 56

    (39) parameters_opt -> empty .

    RPAREN          reduce using rule 39 (parameters_opt -> empty .)


state 57

    (41) parameters -> parameter .

    COMMA           reduce using rule 41 (parameters -> parameter .)
    RPAREN          reduce using rule 41 (parameters -> parameter .)


state 58

    (31) class_def -> CLASS IDENT LBRACE class_body RBRACE .

    CLASS           reduce using rule 31 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    STRUCT          reduce using rule 31 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    ENUM            reduce using rule 31 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    JOIN            reduce using rule 31 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    IMPLEMENT       reduce using rule 31 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    FN              reduce using rule 31 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    IMPORT          reduce using rule 31 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)
    $end            reduce using rule 31 (class_def -> CLASS IDENT LBRACE class_body RBRACE .)


state 59

    (32) class_body -> class_body class_member .

    RBRACE          reduce using rule 32 (class_body -> class_body class_member .)
    PUBLIC          reduce using rule 32 (class_body -> class_body class_member .)
    LET             reduce using rule 32 (class_body -> class_body class_member .)
    FN              reduce using rule 32 (class_body -> class_body class_member .)


state 60

    (34) class_member -> PUBLIC IDENT . COLON type_expr SEMI

    COLON           shift and go to state 72


state 61

    (35) class_member -> LET IDENT . COLON type_expr SEMI

    COLON           shift and go to state 73


state 62

    (20) field_decl -> IDENT COLON . type_expr opt_comma
    (45) type_expr -> . simple_type_expr array_spec_opt
    (46) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 74

    type_expr                      shift and go to state 75
    simple_type_expr               shift and go to state 76

state 63

    (14) struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .

    CLASS           reduce using rule 14 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    STRUCT          reduce using rule 14 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    ENUM            reduce using rule 14 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    JOIN            reduce using rule 14 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    IMPLEMENT       reduce using rule 14 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    FN              reduce using rule 14 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    IMPORT          reduce using rule 14 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)
    $end            reduce using rule 14 (struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE .)


state 64

    (17) field_decl_list -> field_decl_list field_decl .

    RBRACE          reduce using rule 17 (field_decl_list -> field_decl_list field_decl .)
    IDENT           reduce using rule 17 (field_decl_list -> field_decl_list field_decl .)


state 65

    (15) enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .

    CLASS           reduce using rule 15 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    STRUCT          reduce using rule 15 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    ENUM            reduce using rule 15 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    JOIN            reduce using rule 15 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    IMPLEMENT       reduce using rule 15 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    FN              reduce using rule 15 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    IMPORT          reduce using rule 15 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)
    $end            reduce using rule 15 (enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE .)


state 66

    (21) enum_variant_list -> enum_variant_list COMMA . IDENT

    IDENT           shift and go to state 77


state 67

    (16) join_def -> JOIN IDENT AND IDENT AS . IDENT LBRACE field_decl_list RBRACE

    IDENT           shift and go to state 78


state 68

    (109) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE . method_list RBRACE
    (110) method_list -> . method_list function
    (111) method_list -> . function
    (37) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    FN              shift and go to state 20

    method_list                    shift and go to state 79
    function                       shift and go to state 80

state 69

    (42) parameter -> IDENT COLON . type_expr
    (45) type_expr -> . simple_type_expr array_spec_opt
    (46) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 74

    type_expr                      shift and go to state 81
    simple_type_expr               shift and go to state 76

state 70

    (37) function -> FN IDENT LPAREN parameters_opt RPAREN . return_opt block
    (43) return_opt -> . ARROW type_expr
    (44) return_opt -> . empty
    (104) empty -> .

    ARROW           shift and go to state 83
    LBRACE          reduce using rule 104 (empty -> .)

    return_opt                     shift and go to state 82
    empty                          shift and go to state 84

state 71

    (40) parameters -> parameters COMMA . parameter
    (42) parameter -> . IDENT COLON type_expr

    IDENT           shift and go to state 53

    parameter                      shift and go to state 85

state 72

    (34) class_member -> PUBLIC IDENT COLON . type_expr SEMI
    (45) type_expr -> . simple_type_expr array_spec_opt
    (46) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 74

    type_expr                      shift and go to state 86
    simple_type_expr               shift and go to state 76

state 73

    (35) class_member -> LET IDENT COLON . type_expr SEMI
    (45) type_expr -> . simple_type_expr array_spec_opt
    (46) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 74

    type_expr                      shift and go to state 87
    simple_type_expr               shift and go to state 76

state 74

    (46) simple_type_expr -> IDENT . type_access_opt
    (49) type_access_opt -> . type_access_opt_part
    (50) type_access_opt -> . empty
    (51) type_access_opt_part -> . DOT IDENT
    (52) type_access_opt_part -> . DDCOLON IDENT
    (104) empty -> .

    DOT             shift and go to state 91
    DDCOLON         shift and go to state 92
    LBRACKET        reduce using rule 104 (empty -> .)
    COMMA           reduce using rule 104 (empty -> .)
    RBRACE          reduce using rule 104 (empty -> .)
    IDENT           reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    SEMI            reduce using rule 104 (empty -> .)
    LBRACE          reduce using rule 104 (empty -> .)
    EQUAL           reduce using rule 104 (empty -> .)

    type_access_opt                shift and go to state 88
    type_access_opt_part           shift and go to state 89
    empty                          shift and go to state 90

state 75

    (20) field_decl -> IDENT COLON type_expr . opt_comma
    (29) opt_comma -> . COMMA
    (30) opt_comma -> . empty
    (104) empty -> .

    COMMA           shift and go to state 94
    RBRACE          reduce using rule 104 (empty -> .)
    IDENT           reduce using rule 104 (empty -> .)

    opt_comma                      shift and go to state 93
    empty                          shift and go to state 95

state 76

    (45) type_expr -> simple_type_expr . array_spec_opt
    (47) array_spec_opt -> . LBRACKET NUMBER RBRACKET
    (48) array_spec_opt -> . empty
    (104) empty -> .

    LBRACKET        shift and go to state 97
    COMMA           reduce using rule 104 (empty -> .)
    RBRACE          reduce using rule 104 (empty -> .)
    IDENT           reduce using rule 104 (empty -> .)
    RPAREN          reduce using rule 104 (empty -> .)
    SEMI            reduce using rule 104 (empty -> .)
    LBRACE          reduce using rule 104 (empty -> .)
    EQUAL           reduce using rule 104 (empty -> .)

    array_spec_opt                 shift and go to state 96
    empty                          shift and go to state 98

state 77

    (21) enum_variant_list -> enum_variant_list COMMA IDENT .

    RBRACE          reduce using rule 21 (enum_variant_list -> enum_variant_list COMMA IDENT .)
    COMMA           reduce using rule 21 (enum_variant_list -> enum_variant_list COMMA IDENT .)


state 78

    (16) join_def -> JOIN IDENT AND IDENT AS IDENT . LBRACE field_decl_list RBRACE

    LBRACE          shift and go to state 99


state 79

    (109) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list . RBRACE
    (110) method_list -> method_list . function
    (37) function -> . FN IDENT LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 100
    FN              shift and go to state 20

    function                       shift and go to state 101

state 80

    (111) method_list -> function .

    RBRACE          reduce using rule 111 (method_list -> function .)
    FN              reduce using rule 111 (method_list -> function .)


state 81

    (42) parameter -> IDENT COLON type_expr .

    COMMA           reduce using rule 42 (parameter -> IDENT COLON type_expr .)
    RPAREN          reduce using rule 42 (parameter -> IDENT COLON type_expr .)


state 82

    (37) function -> FN IDENT LPAREN parameters_opt RPAREN return_opt . block
    (53) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 103

    block                          shift and go to state 102

state 83

    (43) return_opt -> ARROW . type_expr
    (45) type_expr -> . simple_type_expr array_spec_opt
    (46) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 74

    type_expr                      shift and go to state 104
    simple_type_expr               shift and go to state 76

state 84

    (44) return_opt -> empty .

    LBRACE          reduce using rule 44 (return_opt -> empty .)


state 85

    (40) parameters -> parameters COMMA parameter .

    COMMA           reduce using rule 40 (parameters -> parameters COMMA parameter .)
    RPAREN          reduce using rule 40 (parameters -> parameters COMMA parameter .)


state 86

    (34) class_member -> PUBLIC IDENT COLON type_expr . SEMI

    SEMI            shift and go to state 105


state 87

    (35) class_member -> LET IDENT COLON type_expr . SEMI

    SEMI            shift and go to state 106


state 88

    (46) simple_type_expr -> IDENT type_access_opt .

    LBRACKET        reduce using rule 46 (simple_type_expr -> IDENT type_access_opt .)
    COMMA           reduce using rule 46 (simple_type_expr -> IDENT type_access_opt .)
    RBRACE          reduce using rule 46 (simple_type_expr -> IDENT type_access_opt .)
    IDENT           reduce using rule 46 (simple_type_expr -> IDENT type_access_opt .)
    RPAREN          reduce using rule 46 (simple_type_expr -> IDENT type_access_opt .)
    SEMI            reduce using rule 46 (simple_type_expr -> IDENT type_access_opt .)
    LBRACE          reduce using rule 46 (simple_type_expr -> IDENT type_access_opt .)
    EQUAL           reduce using rule 46 (simple_type_expr -> IDENT type_access_opt .)


state 89

    (49) type_access_opt -> type_access_opt_part .

    LBRACKET        reduce using rule 49 (type_access_opt -> type_access_opt_part .)
    COMMA           reduce using rule 49 (type_access_opt -> type_access_opt_part .)
    RBRACE          reduce using rule 49 (type_access_opt -> type_access_opt_part .)
    IDENT           reduce using rule 49 (type_access_opt -> type_access_opt_part .)
    RPAREN          reduce using rule 49 (type_access_opt -> type_access_opt_part .)
    SEMI            reduce using rule 49 (type_access_opt -> type_access_opt_part .)
    LBRACE          reduce using rule 49 (type_access_opt -> type_access_opt_part .)
    EQUAL           reduce using rule 49 (type_access_opt -> type_access_opt_part .)


state 90

    (50) type_access_opt -> empty .

    LBRACKET        reduce using rule 50 (type_access_opt -> empty .)
    COMMA           reduce using rule 50 (type_access_opt -> empty .)
    RBRACE          reduce using rule 50 (type_access_opt -> empty .)
    IDENT           reduce using rule 50 (type_access_opt -> empty .)
    RPAREN          reduce using rule 50 (type_access_opt -> empty .)
    SEMI            reduce using rule 50 (type_access_opt -> empty .)
    LBRACE          reduce using rule 50 (type_access_opt -> empty .)
    EQUAL           reduce using rule 50 (type_access_opt -> empty .)


state 91

    (51) type_access_opt_part -> DOT . IDENT

    IDENT           shift and go to state 107


state 92

    (52) type_access_opt_part -> DDCOLON . IDENT

    IDENT           shift and go to state 108


state 93

    (20) field_decl -> IDENT COLON type_expr opt_comma .

    RBRACE          reduce using rule 20 (field_decl -> IDENT COLON type_expr opt_comma .)
    IDENT           reduce using rule 20 (field_decl -> IDENT COLON type_expr opt_comma .)


state 94

    (29) opt_comma -> COMMA .

    RBRACE          reduce using rule 29 (opt_comma -> COMMA .)
    IDENT           reduce using rule 29 (opt_comma -> COMMA .)


state 95

    (30) opt_comma -> empty .

    RBRACE          reduce using rule 30 (opt_comma -> empty .)
    IDENT           reduce using rule 30 (opt_comma -> empty .)


state 96

    (45) type_expr -> simple_type_expr array_spec_opt .

    COMMA           reduce using rule 45 (type_expr -> simple_type_expr array_spec_opt .)
    RBRACE          reduce using rule 45 (type_expr -> simple_type_expr array_spec_opt .)
    IDENT           reduce using rule 45 (type_expr -> simple_type_expr array_spec_opt .)
    RPAREN          reduce using rule 45 (type_expr -> simple_type_expr array_spec_opt .)
    SEMI            reduce using rule 45 (type_expr -> simple_type_expr array_spec_opt .)
    LBRACE          reduce using rule 45 (type_expr -> simple_type_expr array_spec_opt .)
    EQUAL           reduce using rule 45 (type_expr -> simple_type_expr array_spec_opt .)


state 97

    (47) array_spec_opt -> LBRACKET . NUMBER RBRACKET

    NUMBER          shift and go to state 109


state 98

    (48) array_spec_opt -> empty .

    COMMA           reduce using rule 48 (array_spec_opt -> empty .)
    RBRACE          reduce using rule 48 (array_spec_opt -> empty .)
    IDENT           reduce using rule 48 (array_spec_opt -> empty .)
    RPAREN          reduce using rule 48 (array_spec_opt -> empty .)
    SEMI            reduce using rule 48 (array_spec_opt -> empty .)
    LBRACE          reduce using rule 48 (array_spec_opt -> empty .)
    EQUAL           reduce using rule 48 (array_spec_opt -> empty .)


state 99

    (16) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE . field_decl_list RBRACE
    (17) field_decl_list -> . field_decl_list field_decl
    (18) field_decl_list -> . field_decl
    (19) field_decl_list -> . empty
    (20) field_decl -> . IDENT COLON type_expr opt_comma
    (104) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 44
    RBRACE          reduce using rule 104 (empty -> .)

  ! IDENT           [ reduce using rule 104 (empty -> .) ]

    field_decl_list                shift and go to state 110
    field_decl                     shift and go to state 46
    empty                          shift and go to state 47

state 100

    (109) implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .

    CLASS           reduce using rule 109 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    STRUCT          reduce using rule 109 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    ENUM            reduce using rule 109 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    JOIN            reduce using rule 109 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    IMPLEMENT       reduce using rule 109 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    FN              reduce using rule 109 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    IMPORT          reduce using rule 109 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)
    $end            reduce using rule 109 (implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE .)


state 101

    (110) method_list -> method_list function .

    RBRACE          reduce using rule 110 (method_list -> method_list function .)
    FN              reduce using rule 110 (method_list -> method_list function .)


state 102

    (37) function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .

    CLASS           reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    STRUCT          reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    ENUM            reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    JOIN            reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    IMPLEMENT       reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    FN              reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    IMPORT          reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    $end            reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    RBRACE          reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    PUBLIC          reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)
    LET             reduce using rule 37 (function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block .)


state 103

    (53) block -> LBRACE . statement_list RBRACE
    (54) statement_list -> . statement_list statement
    (55) statement_list -> . empty
    (104) empty -> .

    RBRACE          reduce using rule 104 (empty -> .)
    LET             reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    IF              reduce using rule 104 (empty -> .)
    IDENT           reduce using rule 104 (empty -> .)
    LPAREN          reduce using rule 104 (empty -> .)
    LBRACKET        reduce using rule 104 (empty -> .)
    NUMBER          reduce using rule 104 (empty -> .)
    STRING          reduce using rule 104 (empty -> .)
    TRUE            reduce using rule 104 (empty -> .)
    FALSE           reduce using rule 104 (empty -> .)
    NEW             reduce using rule 104 (empty -> .)
    FN              reduce using rule 104 (empty -> .)

    statement_list                 shift and go to state 111
    empty                          shift and go to state 112

state 104

    (43) return_opt -> ARROW type_expr .

    LBRACE          reduce using rule 43 (return_opt -> ARROW type_expr .)


state 105

    (34) class_member -> PUBLIC IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 34 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    PUBLIC          reduce using rule 34 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    LET             reduce using rule 34 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)
    FN              reduce using rule 34 (class_member -> PUBLIC IDENT COLON type_expr SEMI .)


state 106

    (35) class_member -> LET IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 35 (class_member -> LET IDENT COLON type_expr SEMI .)
    PUBLIC          reduce using rule 35 (class_member -> LET IDENT COLON type_expr SEMI .)
    LET             reduce using rule 35 (class_member -> LET IDENT COLON type_expr SEMI .)
    FN              reduce using rule 35 (class_member -> LET IDENT COLON type_expr SEMI .)


state 107

    (51) type_access_opt_part -> DOT IDENT .

    LBRACKET        reduce using rule 51 (type_access_opt_part -> DOT IDENT .)
    COMMA           reduce using rule 51 (type_access_opt_part -> DOT IDENT .)
    RBRACE          reduce using rule 51 (type_access_opt_part -> DOT IDENT .)
    IDENT           reduce using rule 51 (type_access_opt_part -> DOT IDENT .)
    RPAREN          reduce using rule 51 (type_access_opt_part -> DOT IDENT .)
    SEMI            reduce using rule 51 (type_access_opt_part -> DOT IDENT .)
    LBRACE          reduce using rule 51 (type_access_opt_part -> DOT IDENT .)
    EQUAL           reduce using rule 51 (type_access_opt_part -> DOT IDENT .)


state 108

    (52) type_access_opt_part -> DDCOLON IDENT .

    LBRACKET        reduce using rule 52 (type_access_opt_part -> DDCOLON IDENT .)
    COMMA           reduce using rule 52 (type_access_opt_part -> DDCOLON IDENT .)
    RBRACE          reduce using rule 52 (type_access_opt_part -> DDCOLON IDENT .)
    IDENT           reduce using rule 52 (type_access_opt_part -> DDCOLON IDENT .)
    RPAREN          reduce using rule 52 (type_access_opt_part -> DDCOLON IDENT .)
    SEMI            reduce using rule 52 (type_access_opt_part -> DDCOLON IDENT .)
    LBRACE          reduce using rule 52 (type_access_opt_part -> DDCOLON IDENT .)
    EQUAL           reduce using rule 52 (type_access_opt_part -> DDCOLON IDENT .)


state 109

    (47) array_spec_opt -> LBRACKET NUMBER . RBRACKET

    RBRACKET        shift and go to state 113


state 110

    (16) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list . RBRACE
    (17) field_decl_list -> field_decl_list . field_decl
    (20) field_decl -> . IDENT COLON type_expr opt_comma

    RBRACE          shift and go to state 114
    IDENT           shift and go to state 44

    field_decl                     shift and go to state 64

state 111

    (53) block -> LBRACE statement_list . RBRACE
    (54) statement_list -> statement_list . statement
    (56) statement -> . var_decl
    (57) statement -> . assignment_statement
    (58) statement -> . return_statement
    (59) statement -> . expr_statement
    (60) statement -> . if_statement
    (61) var_decl -> . LET IDENT COLON type_expr EQUAL expression SEMI
    (62) var_decl -> . LET IDENT COLON type_expr SEMI
    (112) assignment_statement -> . assignment SEMI
    (63) return_statement -> . RETURN expression SEMI
    (64) expr_statement -> . expression SEMI
    (105) if_statement -> . IF expression block else_clause_opt
    (113) assignment -> . call_expr EQUAL expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RBRACE          shift and go to state 115
    LET             shift and go to state 122
    RETURN          shift and go to state 126
    IF              shift and go to state 127
    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    statement                      shift and go to state 116
    var_decl                       shift and go to state 117
    assignment_statement           shift and go to state 118
    return_statement               shift and go to state 119
    expr_statement                 shift and go to state 120
    if_statement                   shift and go to state 121
    expression                     shift and go to state 124
    assignment                     shift and go to state 125
    call_expr                      shift and go to state 128
    primary                        shift and go to state 129

state 112

    (55) statement_list -> empty .

    RBRACE          reduce using rule 55 (statement_list -> empty .)
    LET             reduce using rule 55 (statement_list -> empty .)
    RETURN          reduce using rule 55 (statement_list -> empty .)
    IF              reduce using rule 55 (statement_list -> empty .)
    IDENT           reduce using rule 55 (statement_list -> empty .)
    LPAREN          reduce using rule 55 (statement_list -> empty .)
    LBRACKET        reduce using rule 55 (statement_list -> empty .)
    NUMBER          reduce using rule 55 (statement_list -> empty .)
    STRING          reduce using rule 55 (statement_list -> empty .)
    TRUE            reduce using rule 55 (statement_list -> empty .)
    FALSE           reduce using rule 55 (statement_list -> empty .)
    NEW             reduce using rule 55 (statement_list -> empty .)
    FN              reduce using rule 55 (statement_list -> empty .)


state 113

    (47) array_spec_opt -> LBRACKET NUMBER RBRACKET .

    COMMA           reduce using rule 47 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    RBRACE          reduce using rule 47 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    IDENT           reduce using rule 47 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    RPAREN          reduce using rule 47 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    SEMI            reduce using rule 47 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    LBRACE          reduce using rule 47 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)
    EQUAL           reduce using rule 47 (array_spec_opt -> LBRACKET NUMBER RBRACKET .)


state 114

    (16) join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .

    CLASS           reduce using rule 16 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    STRUCT          reduce using rule 16 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    ENUM            reduce using rule 16 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    JOIN            reduce using rule 16 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    IMPLEMENT       reduce using rule 16 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    FN              reduce using rule 16 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    IMPORT          reduce using rule 16 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)
    $end            reduce using rule 16 (join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE .)


state 115

    (53) block -> LBRACE statement_list RBRACE .

    CLASS           reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    STRUCT          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    ENUM            reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    JOIN            reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    IMPLEMENT       reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    FN              reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    IMPORT          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    PUBLIC          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    LET             reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    RETURN          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    IDENT           reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    LBRACKET        reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    TRUE            reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    FALSE           reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    NEW             reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    EQUAL           reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    DOT             reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    DDCOLON         reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    ARROW           reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    DIVIDE          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    MOD             reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    LE              reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    LT              reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    GE              reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    GT              reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    EQ              reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    NE              reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    RPAREN          reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    COMMA           reduce using rule 53 (block -> LBRACE statement_list RBRACE .)
    RBRACKET        reduce using rule 53 (block -> LBRACE statement_list RBRACE .)


state 116

    (54) statement_list -> statement_list statement .

    RBRACE          reduce using rule 54 (statement_list -> statement_list statement .)
    LET             reduce using rule 54 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 54 (statement_list -> statement_list statement .)
    IF              reduce using rule 54 (statement_list -> statement_list statement .)
    IDENT           reduce using rule 54 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 54 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 54 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 54 (statement_list -> statement_list statement .)
    STRING          reduce using rule 54 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 54 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 54 (statement_list -> statement_list statement .)
    NEW             reduce using rule 54 (statement_list -> statement_list statement .)
    FN              reduce using rule 54 (statement_list -> statement_list statement .)


state 117

    (56) statement -> var_decl .

    RBRACE          reduce using rule 56 (statement -> var_decl .)
    LET             reduce using rule 56 (statement -> var_decl .)
    RETURN          reduce using rule 56 (statement -> var_decl .)
    IF              reduce using rule 56 (statement -> var_decl .)
    IDENT           reduce using rule 56 (statement -> var_decl .)
    LPAREN          reduce using rule 56 (statement -> var_decl .)
    LBRACKET        reduce using rule 56 (statement -> var_decl .)
    NUMBER          reduce using rule 56 (statement -> var_decl .)
    STRING          reduce using rule 56 (statement -> var_decl .)
    TRUE            reduce using rule 56 (statement -> var_decl .)
    FALSE           reduce using rule 56 (statement -> var_decl .)
    NEW             reduce using rule 56 (statement -> var_decl .)
    FN              reduce using rule 56 (statement -> var_decl .)


state 118

    (57) statement -> assignment_statement .

    RBRACE          reduce using rule 57 (statement -> assignment_statement .)
    LET             reduce using rule 57 (statement -> assignment_statement .)
    RETURN          reduce using rule 57 (statement -> assignment_statement .)
    IF              reduce using rule 57 (statement -> assignment_statement .)
    IDENT           reduce using rule 57 (statement -> assignment_statement .)
    LPAREN          reduce using rule 57 (statement -> assignment_statement .)
    LBRACKET        reduce using rule 57 (statement -> assignment_statement .)
    NUMBER          reduce using rule 57 (statement -> assignment_statement .)
    STRING          reduce using rule 57 (statement -> assignment_statement .)
    TRUE            reduce using rule 57 (statement -> assignment_statement .)
    FALSE           reduce using rule 57 (statement -> assignment_statement .)
    NEW             reduce using rule 57 (statement -> assignment_statement .)
    FN              reduce using rule 57 (statement -> assignment_statement .)


state 119

    (58) statement -> return_statement .

    RBRACE          reduce using rule 58 (statement -> return_statement .)
    LET             reduce using rule 58 (statement -> return_statement .)
    RETURN          reduce using rule 58 (statement -> return_statement .)
    IF              reduce using rule 58 (statement -> return_statement .)
    IDENT           reduce using rule 58 (statement -> return_statement .)
    LPAREN          reduce using rule 58 (statement -> return_statement .)
    LBRACKET        reduce using rule 58 (statement -> return_statement .)
    NUMBER          reduce using rule 58 (statement -> return_statement .)
    STRING          reduce using rule 58 (statement -> return_statement .)
    TRUE            reduce using rule 58 (statement -> return_statement .)
    FALSE           reduce using rule 58 (statement -> return_statement .)
    NEW             reduce using rule 58 (statement -> return_statement .)
    FN              reduce using rule 58 (statement -> return_statement .)


state 120

    (59) statement -> expr_statement .

    RBRACE          reduce using rule 59 (statement -> expr_statement .)
    LET             reduce using rule 59 (statement -> expr_statement .)
    RETURN          reduce using rule 59 (statement -> expr_statement .)
    IF              reduce using rule 59 (statement -> expr_statement .)
    IDENT           reduce using rule 59 (statement -> expr_statement .)
    LPAREN          reduce using rule 59 (statement -> expr_statement .)
    LBRACKET        reduce using rule 59 (statement -> expr_statement .)
    NUMBER          reduce using rule 59 (statement -> expr_statement .)
    STRING          reduce using rule 59 (statement -> expr_statement .)
    TRUE            reduce using rule 59 (statement -> expr_statement .)
    FALSE           reduce using rule 59 (statement -> expr_statement .)
    NEW             reduce using rule 59 (statement -> expr_statement .)
    FN              reduce using rule 59 (statement -> expr_statement .)


state 121

    (60) statement -> if_statement .

    RBRACE          reduce using rule 60 (statement -> if_statement .)
    LET             reduce using rule 60 (statement -> if_statement .)
    RETURN          reduce using rule 60 (statement -> if_statement .)
    IF              reduce using rule 60 (statement -> if_statement .)
    IDENT           reduce using rule 60 (statement -> if_statement .)
    LPAREN          reduce using rule 60 (statement -> if_statement .)
    LBRACKET        reduce using rule 60 (statement -> if_statement .)
    NUMBER          reduce using rule 60 (statement -> if_statement .)
    STRING          reduce using rule 60 (statement -> if_statement .)
    TRUE            reduce using rule 60 (statement -> if_statement .)
    FALSE           reduce using rule 60 (statement -> if_statement .)
    NEW             reduce using rule 60 (statement -> if_statement .)
    FN              reduce using rule 60 (statement -> if_statement .)


state 122

    (61) var_decl -> LET . IDENT COLON type_expr EQUAL expression SEMI
    (62) var_decl -> LET . IDENT COLON type_expr SEMI

    IDENT           shift and go to state 138


state 123

    (24) primary -> IDENT . LBRACE field_assign_list RBRACE
    (98) primary -> IDENT .

  ! shift/reduce conflict for LBRACE resolved as shift
    LBRACE          shift and go to state 139
    EQUAL           reduce using rule 98 (primary -> IDENT .)
    LPAREN          reduce using rule 98 (primary -> IDENT .)
    DOT             reduce using rule 98 (primary -> IDENT .)
    DDCOLON         reduce using rule 98 (primary -> IDENT .)
    ARROW           reduce using rule 98 (primary -> IDENT .)
    LBRACKET        reduce using rule 98 (primary -> IDENT .)
    SEMI            reduce using rule 98 (primary -> IDENT .)
    PLUS            reduce using rule 98 (primary -> IDENT .)
    MINUS           reduce using rule 98 (primary -> IDENT .)
    TIMES           reduce using rule 98 (primary -> IDENT .)
    DIVIDE          reduce using rule 98 (primary -> IDENT .)
    MOD             reduce using rule 98 (primary -> IDENT .)
    LE              reduce using rule 98 (primary -> IDENT .)
    LT              reduce using rule 98 (primary -> IDENT .)
    GE              reduce using rule 98 (primary -> IDENT .)
    GT              reduce using rule 98 (primary -> IDENT .)
    EQ              reduce using rule 98 (primary -> IDENT .)
    NE              reduce using rule 98 (primary -> IDENT .)
    RPAREN          reduce using rule 98 (primary -> IDENT .)
    COMMA           reduce using rule 98 (primary -> IDENT .)
    RBRACKET        reduce using rule 98 (primary -> IDENT .)
    RBRACE          reduce using rule 98 (primary -> IDENT .)
    IDENT           reduce using rule 98 (primary -> IDENT .)

  ! LBRACE          [ reduce using rule 98 (primary -> IDENT .) ]


state 124

    (64) expr_statement -> expression . SEMI
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            shift and go to state 140
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 125

    (112) assignment_statement -> assignment . SEMI

    SEMI            shift and go to state 152


state 126

    (63) return_statement -> RETURN . expression SEMI
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 153
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 127

    (105) if_statement -> IF . expression block else_clause_opt
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 155
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 128

    (113) assignment -> call_expr . EQUAL expression
    (65) expression -> call_expr .
    (77) call_expr -> call_expr . call_suffix
    (79) call_suffix -> . LPAREN arg_list_opt RPAREN
    (80) call_suffix -> . DOT IDENT
    (81) call_suffix -> . DDCOLON IDENT
    (82) call_suffix -> . ARROW IDENT
    (83) call_suffix -> . LBRACKET expression RBRACKET

    EQUAL           shift and go to state 156
    SEMI            reduce using rule 65 (expression -> call_expr .)
    PLUS            reduce using rule 65 (expression -> call_expr .)
    MINUS           reduce using rule 65 (expression -> call_expr .)
    TIMES           reduce using rule 65 (expression -> call_expr .)
    DIVIDE          reduce using rule 65 (expression -> call_expr .)
    MOD             reduce using rule 65 (expression -> call_expr .)
    LE              reduce using rule 65 (expression -> call_expr .)
    LT              reduce using rule 65 (expression -> call_expr .)
    GE              reduce using rule 65 (expression -> call_expr .)
    GT              reduce using rule 65 (expression -> call_expr .)
    EQ              reduce using rule 65 (expression -> call_expr .)
    NE              reduce using rule 65 (expression -> call_expr .)
    LPAREN          shift and go to state 158
    DOT             shift and go to state 159
    DDCOLON         shift and go to state 160
    ARROW           shift and go to state 161
    LBRACKET        shift and go to state 162

    call_suffix                    shift and go to state 157

state 129

    (78) call_expr -> primary .

    EQUAL           reduce using rule 78 (call_expr -> primary .)
    LPAREN          reduce using rule 78 (call_expr -> primary .)
    DOT             reduce using rule 78 (call_expr -> primary .)
    DDCOLON         reduce using rule 78 (call_expr -> primary .)
    ARROW           reduce using rule 78 (call_expr -> primary .)
    LBRACKET        reduce using rule 78 (call_expr -> primary .)
    SEMI            reduce using rule 78 (call_expr -> primary .)
    PLUS            reduce using rule 78 (call_expr -> primary .)
    MINUS           reduce using rule 78 (call_expr -> primary .)
    TIMES           reduce using rule 78 (call_expr -> primary .)
    DIVIDE          reduce using rule 78 (call_expr -> primary .)
    MOD             reduce using rule 78 (call_expr -> primary .)
    LE              reduce using rule 78 (call_expr -> primary .)
    LT              reduce using rule 78 (call_expr -> primary .)
    GE              reduce using rule 78 (call_expr -> primary .)
    GT              reduce using rule 78 (call_expr -> primary .)
    EQ              reduce using rule 78 (call_expr -> primary .)
    NE              reduce using rule 78 (call_expr -> primary .)
    LBRACE          reduce using rule 78 (call_expr -> primary .)
    RPAREN          reduce using rule 78 (call_expr -> primary .)
    COMMA           reduce using rule 78 (call_expr -> primary .)
    RBRACKET        reduce using rule 78 (call_expr -> primary .)
    RBRACE          reduce using rule 78 (call_expr -> primary .)
    IDENT           reduce using rule 78 (call_expr -> primary .)


state 130

    (90) primary -> LPAREN . expression RPAREN
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 163
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 131

    (91) primary -> LBRACKET . expr_list_opt RBRACKET
    (92) expr_list_opt -> . expr_list
    (93) expr_list_opt -> . empty
    (94) expr_list -> . expr_list COMMA expression
    (95) expr_list -> . expression
    (104) empty -> .
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RBRACKET        reduce using rule 104 (empty -> .)
    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expr_list_opt                  shift and go to state 164
    expr_list                      shift and go to state 165
    empty                          shift and go to state 166
    expression                     shift and go to state 167
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 132

    (96) primary -> NUMBER .

    EQUAL           reduce using rule 96 (primary -> NUMBER .)
    LPAREN          reduce using rule 96 (primary -> NUMBER .)
    DOT             reduce using rule 96 (primary -> NUMBER .)
    DDCOLON         reduce using rule 96 (primary -> NUMBER .)
    ARROW           reduce using rule 96 (primary -> NUMBER .)
    LBRACKET        reduce using rule 96 (primary -> NUMBER .)
    SEMI            reduce using rule 96 (primary -> NUMBER .)
    PLUS            reduce using rule 96 (primary -> NUMBER .)
    MINUS           reduce using rule 96 (primary -> NUMBER .)
    TIMES           reduce using rule 96 (primary -> NUMBER .)
    DIVIDE          reduce using rule 96 (primary -> NUMBER .)
    MOD             reduce using rule 96 (primary -> NUMBER .)
    LE              reduce using rule 96 (primary -> NUMBER .)
    LT              reduce using rule 96 (primary -> NUMBER .)
    GE              reduce using rule 96 (primary -> NUMBER .)
    GT              reduce using rule 96 (primary -> NUMBER .)
    EQ              reduce using rule 96 (primary -> NUMBER .)
    NE              reduce using rule 96 (primary -> NUMBER .)
    LBRACE          reduce using rule 96 (primary -> NUMBER .)
    RPAREN          reduce using rule 96 (primary -> NUMBER .)
    COMMA           reduce using rule 96 (primary -> NUMBER .)
    RBRACKET        reduce using rule 96 (primary -> NUMBER .)
    RBRACE          reduce using rule 96 (primary -> NUMBER .)
    IDENT           reduce using rule 96 (primary -> NUMBER .)


state 133

    (97) primary -> STRING .

    EQUAL           reduce using rule 97 (primary -> STRING .)
    LPAREN          reduce using rule 97 (primary -> STRING .)
    DOT             reduce using rule 97 (primary -> STRING .)
    DDCOLON         reduce using rule 97 (primary -> STRING .)
    ARROW           reduce using rule 97 (primary -> STRING .)
    LBRACKET        reduce using rule 97 (primary -> STRING .)
    SEMI            reduce using rule 97 (primary -> STRING .)
    PLUS            reduce using rule 97 (primary -> STRING .)
    MINUS           reduce using rule 97 (primary -> STRING .)
    TIMES           reduce using rule 97 (primary -> STRING .)
    DIVIDE          reduce using rule 97 (primary -> STRING .)
    MOD             reduce using rule 97 (primary -> STRING .)
    LE              reduce using rule 97 (primary -> STRING .)
    LT              reduce using rule 97 (primary -> STRING .)
    GE              reduce using rule 97 (primary -> STRING .)
    GT              reduce using rule 97 (primary -> STRING .)
    EQ              reduce using rule 97 (primary -> STRING .)
    NE              reduce using rule 97 (primary -> STRING .)
    LBRACE          reduce using rule 97 (primary -> STRING .)
    RPAREN          reduce using rule 97 (primary -> STRING .)
    COMMA           reduce using rule 97 (primary -> STRING .)
    RBRACKET        reduce using rule 97 (primary -> STRING .)
    RBRACE          reduce using rule 97 (primary -> STRING .)
    IDENT           reduce using rule 97 (primary -> STRING .)


state 134

    (99) primary -> TRUE .

    EQUAL           reduce using rule 99 (primary -> TRUE .)
    LPAREN          reduce using rule 99 (primary -> TRUE .)
    DOT             reduce using rule 99 (primary -> TRUE .)
    DDCOLON         reduce using rule 99 (primary -> TRUE .)
    ARROW           reduce using rule 99 (primary -> TRUE .)
    LBRACKET        reduce using rule 99 (primary -> TRUE .)
    SEMI            reduce using rule 99 (primary -> TRUE .)
    PLUS            reduce using rule 99 (primary -> TRUE .)
    MINUS           reduce using rule 99 (primary -> TRUE .)
    TIMES           reduce using rule 99 (primary -> TRUE .)
    DIVIDE          reduce using rule 99 (primary -> TRUE .)
    MOD             reduce using rule 99 (primary -> TRUE .)
    LE              reduce using rule 99 (primary -> TRUE .)
    LT              reduce using rule 99 (primary -> TRUE .)
    GE              reduce using rule 99 (primary -> TRUE .)
    GT              reduce using rule 99 (primary -> TRUE .)
    EQ              reduce using rule 99 (primary -> TRUE .)
    NE              reduce using rule 99 (primary -> TRUE .)
    LBRACE          reduce using rule 99 (primary -> TRUE .)
    RPAREN          reduce using rule 99 (primary -> TRUE .)
    COMMA           reduce using rule 99 (primary -> TRUE .)
    RBRACKET        reduce using rule 99 (primary -> TRUE .)
    RBRACE          reduce using rule 99 (primary -> TRUE .)
    IDENT           reduce using rule 99 (primary -> TRUE .)


state 135

    (100) primary -> FALSE .

    EQUAL           reduce using rule 100 (primary -> FALSE .)
    LPAREN          reduce using rule 100 (primary -> FALSE .)
    DOT             reduce using rule 100 (primary -> FALSE .)
    DDCOLON         reduce using rule 100 (primary -> FALSE .)
    ARROW           reduce using rule 100 (primary -> FALSE .)
    LBRACKET        reduce using rule 100 (primary -> FALSE .)
    SEMI            reduce using rule 100 (primary -> FALSE .)
    PLUS            reduce using rule 100 (primary -> FALSE .)
    MINUS           reduce using rule 100 (primary -> FALSE .)
    TIMES           reduce using rule 100 (primary -> FALSE .)
    DIVIDE          reduce using rule 100 (primary -> FALSE .)
    MOD             reduce using rule 100 (primary -> FALSE .)
    LE              reduce using rule 100 (primary -> FALSE .)
    LT              reduce using rule 100 (primary -> FALSE .)
    GE              reduce using rule 100 (primary -> FALSE .)
    GT              reduce using rule 100 (primary -> FALSE .)
    EQ              reduce using rule 100 (primary -> FALSE .)
    NE              reduce using rule 100 (primary -> FALSE .)
    LBRACE          reduce using rule 100 (primary -> FALSE .)
    RPAREN          reduce using rule 100 (primary -> FALSE .)
    COMMA           reduce using rule 100 (primary -> FALSE .)
    RBRACKET        reduce using rule 100 (primary -> FALSE .)
    RBRACE          reduce using rule 100 (primary -> FALSE .)
    IDENT           reduce using rule 100 (primary -> FALSE .)


state 136

    (101) primary -> NEW . IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> NEW . IDENT

    IDENT           shift and go to state 168


state 137

    (103) primary -> FN . LPAREN parameters_opt RPAREN return_opt block

    LPAREN          shift and go to state 169


state 138

    (61) var_decl -> LET IDENT . COLON type_expr EQUAL expression SEMI
    (62) var_decl -> LET IDENT . COLON type_expr SEMI

    COLON           shift and go to state 170


state 139

    (24) primary -> IDENT LBRACE . field_assign_list RBRACE
    (25) field_assign_list -> . field_assign_list field_assign
    (26) field_assign_list -> . field_assign
    (27) field_assign_list -> . empty
    (28) field_assign -> . IDENT COLON expression opt_comma
    (104) empty -> .

  ! shift/reduce conflict for IDENT resolved as shift
    IDENT           shift and go to state 171
    RBRACE          reduce using rule 104 (empty -> .)

  ! IDENT           [ reduce using rule 104 (empty -> .) ]

    field_assign_list              shift and go to state 172
    field_assign                   shift and go to state 173
    empty                          shift and go to state 174

state 140

    (64) expr_statement -> expression SEMI .

    RBRACE          reduce using rule 64 (expr_statement -> expression SEMI .)
    LET             reduce using rule 64 (expr_statement -> expression SEMI .)
    RETURN          reduce using rule 64 (expr_statement -> expression SEMI .)
    IF              reduce using rule 64 (expr_statement -> expression SEMI .)
    IDENT           reduce using rule 64 (expr_statement -> expression SEMI .)
    LPAREN          reduce using rule 64 (expr_statement -> expression SEMI .)
    LBRACKET        reduce using rule 64 (expr_statement -> expression SEMI .)
    NUMBER          reduce using rule 64 (expr_statement -> expression SEMI .)
    STRING          reduce using rule 64 (expr_statement -> expression SEMI .)
    TRUE            reduce using rule 64 (expr_statement -> expression SEMI .)
    FALSE           reduce using rule 64 (expr_statement -> expression SEMI .)
    NEW             reduce using rule 64 (expr_statement -> expression SEMI .)
    FN              reduce using rule 64 (expr_statement -> expression SEMI .)


state 141

    (66) expression -> expression PLUS . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 175
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 142

    (67) expression -> expression MINUS . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 176
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 143

    (68) expression -> expression TIMES . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 177
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 144

    (69) expression -> expression DIVIDE . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 178
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 145

    (70) expression -> expression MOD . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 179
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 146

    (71) expression -> expression LE . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 180
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 147

    (72) expression -> expression LT . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 181
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 148

    (73) expression -> expression GE . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 182
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 149

    (74) expression -> expression GT . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 183
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 150

    (75) expression -> expression EQ . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 184
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 151

    (76) expression -> expression NE . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 185
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 152

    (112) assignment_statement -> assignment SEMI .

    RBRACE          reduce using rule 112 (assignment_statement -> assignment SEMI .)
    LET             reduce using rule 112 (assignment_statement -> assignment SEMI .)
    RETURN          reduce using rule 112 (assignment_statement -> assignment SEMI .)
    IF              reduce using rule 112 (assignment_statement -> assignment SEMI .)
    IDENT           reduce using rule 112 (assignment_statement -> assignment SEMI .)
    LPAREN          reduce using rule 112 (assignment_statement -> assignment SEMI .)
    LBRACKET        reduce using rule 112 (assignment_statement -> assignment SEMI .)
    NUMBER          reduce using rule 112 (assignment_statement -> assignment SEMI .)
    STRING          reduce using rule 112 (assignment_statement -> assignment SEMI .)
    TRUE            reduce using rule 112 (assignment_statement -> assignment SEMI .)
    FALSE           reduce using rule 112 (assignment_statement -> assignment SEMI .)
    NEW             reduce using rule 112 (assignment_statement -> assignment SEMI .)
    FN              reduce using rule 112 (assignment_statement -> assignment SEMI .)


state 153

    (63) return_statement -> RETURN expression . SEMI
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            shift and go to state 186
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 154

    (65) expression -> call_expr .
    (77) call_expr -> call_expr . call_suffix
    (79) call_suffix -> . LPAREN arg_list_opt RPAREN
    (80) call_suffix -> . DOT IDENT
    (81) call_suffix -> . DDCOLON IDENT
    (82) call_suffix -> . ARROW IDENT
    (83) call_suffix -> . LBRACKET expression RBRACKET

    SEMI            reduce using rule 65 (expression -> call_expr .)
    PLUS            reduce using rule 65 (expression -> call_expr .)
    MINUS           reduce using rule 65 (expression -> call_expr .)
    TIMES           reduce using rule 65 (expression -> call_expr .)
    DIVIDE          reduce using rule 65 (expression -> call_expr .)
    MOD             reduce using rule 65 (expression -> call_expr .)
    LE              reduce using rule 65 (expression -> call_expr .)
    LT              reduce using rule 65 (expression -> call_expr .)
    GE              reduce using rule 65 (expression -> call_expr .)
    GT              reduce using rule 65 (expression -> call_expr .)
    EQ              reduce using rule 65 (expression -> call_expr .)
    NE              reduce using rule 65 (expression -> call_expr .)
    LBRACE          reduce using rule 65 (expression -> call_expr .)
    RPAREN          reduce using rule 65 (expression -> call_expr .)
    COMMA           reduce using rule 65 (expression -> call_expr .)
    RBRACKET        reduce using rule 65 (expression -> call_expr .)
    RBRACE          reduce using rule 65 (expression -> call_expr .)
    IDENT           reduce using rule 65 (expression -> call_expr .)
    LPAREN          shift and go to state 158
    DOT             shift and go to state 159
    DDCOLON         shift and go to state 160
    ARROW           shift and go to state 161
    LBRACKET        shift and go to state 162

    call_suffix                    shift and go to state 157

state 155

    (105) if_statement -> IF expression . block else_clause_opt
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression
    (53) block -> . LBRACE statement_list RBRACE

    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151
    LBRACE          shift and go to state 103

    block                          shift and go to state 187

state 156

    (113) assignment -> call_expr EQUAL . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    call_expr                      shift and go to state 154
    expression                     shift and go to state 188
    primary                        shift and go to state 129

state 157

    (77) call_expr -> call_expr call_suffix .

    EQUAL           reduce using rule 77 (call_expr -> call_expr call_suffix .)
    LPAREN          reduce using rule 77 (call_expr -> call_expr call_suffix .)
    DOT             reduce using rule 77 (call_expr -> call_expr call_suffix .)
    DDCOLON         reduce using rule 77 (call_expr -> call_expr call_suffix .)
    ARROW           reduce using rule 77 (call_expr -> call_expr call_suffix .)
    LBRACKET        reduce using rule 77 (call_expr -> call_expr call_suffix .)
    SEMI            reduce using rule 77 (call_expr -> call_expr call_suffix .)
    PLUS            reduce using rule 77 (call_expr -> call_expr call_suffix .)
    MINUS           reduce using rule 77 (call_expr -> call_expr call_suffix .)
    TIMES           reduce using rule 77 (call_expr -> call_expr call_suffix .)
    DIVIDE          reduce using rule 77 (call_expr -> call_expr call_suffix .)
    MOD             reduce using rule 77 (call_expr -> call_expr call_suffix .)
    LE              reduce using rule 77 (call_expr -> call_expr call_suffix .)
    LT              reduce using rule 77 (call_expr -> call_expr call_suffix .)
    GE              reduce using rule 77 (call_expr -> call_expr call_suffix .)
    GT              reduce using rule 77 (call_expr -> call_expr call_suffix .)
    EQ              reduce using rule 77 (call_expr -> call_expr call_suffix .)
    NE              reduce using rule 77 (call_expr -> call_expr call_suffix .)
    LBRACE          reduce using rule 77 (call_expr -> call_expr call_suffix .)
    RPAREN          reduce using rule 77 (call_expr -> call_expr call_suffix .)
    COMMA           reduce using rule 77 (call_expr -> call_expr call_suffix .)
    RBRACKET        reduce using rule 77 (call_expr -> call_expr call_suffix .)
    RBRACE          reduce using rule 77 (call_expr -> call_expr call_suffix .)
    IDENT           reduce using rule 77 (call_expr -> call_expr call_suffix .)


state 158

    (79) call_suffix -> LPAREN . arg_list_opt RPAREN
    (84) arg_list_opt -> . arg_list
    (85) arg_list_opt -> . empty
    (86) arg_list -> . arg_list COMMA argument
    (87) arg_list -> . argument
    (104) empty -> .
    (88) argument -> . IDENT COLON expression
    (89) argument -> . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RPAREN          reduce using rule 104 (empty -> .)
    IDENT           shift and go to state 193
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    arg_list_opt                   shift and go to state 189
    arg_list                       shift and go to state 190
    empty                          shift and go to state 191
    argument                       shift and go to state 192
    expression                     shift and go to state 194
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 159

    (80) call_suffix -> DOT . IDENT

    IDENT           shift and go to state 195


state 160

    (81) call_suffix -> DDCOLON . IDENT

    IDENT           shift and go to state 196


state 161

    (82) call_suffix -> ARROW . IDENT

    IDENT           shift and go to state 197


state 162

    (83) call_suffix -> LBRACKET . expression RBRACKET
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 198
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 163

    (90) primary -> LPAREN expression . RPAREN
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    RPAREN          shift and go to state 199
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 164

    (91) primary -> LBRACKET expr_list_opt . RBRACKET

    RBRACKET        shift and go to state 200


state 165

    (92) expr_list_opt -> expr_list .
    (94) expr_list -> expr_list . COMMA expression

    RBRACKET        reduce using rule 92 (expr_list_opt -> expr_list .)
    COMMA           shift and go to state 201


state 166

    (93) expr_list_opt -> empty .

    RBRACKET        reduce using rule 93 (expr_list_opt -> empty .)


state 167

    (95) expr_list -> expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    COMMA           reduce using rule 95 (expr_list -> expression .)
    RBRACKET        reduce using rule 95 (expr_list -> expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 168

    (101) primary -> NEW IDENT . LPAREN arg_list_opt RPAREN
    (102) primary -> NEW IDENT .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 202
    EQUAL           reduce using rule 102 (primary -> NEW IDENT .)
    DOT             reduce using rule 102 (primary -> NEW IDENT .)
    DDCOLON         reduce using rule 102 (primary -> NEW IDENT .)
    ARROW           reduce using rule 102 (primary -> NEW IDENT .)
    LBRACKET        reduce using rule 102 (primary -> NEW IDENT .)
    SEMI            reduce using rule 102 (primary -> NEW IDENT .)
    PLUS            reduce using rule 102 (primary -> NEW IDENT .)
    MINUS           reduce using rule 102 (primary -> NEW IDENT .)
    TIMES           reduce using rule 102 (primary -> NEW IDENT .)
    DIVIDE          reduce using rule 102 (primary -> NEW IDENT .)
    MOD             reduce using rule 102 (primary -> NEW IDENT .)
    LE              reduce using rule 102 (primary -> NEW IDENT .)
    LT              reduce using rule 102 (primary -> NEW IDENT .)
    GE              reduce using rule 102 (primary -> NEW IDENT .)
    GT              reduce using rule 102 (primary -> NEW IDENT .)
    EQ              reduce using rule 102 (primary -> NEW IDENT .)
    NE              reduce using rule 102 (primary -> NEW IDENT .)
    LBRACE          reduce using rule 102 (primary -> NEW IDENT .)
    RPAREN          reduce using rule 102 (primary -> NEW IDENT .)
    COMMA           reduce using rule 102 (primary -> NEW IDENT .)
    RBRACKET        reduce using rule 102 (primary -> NEW IDENT .)
    RBRACE          reduce using rule 102 (primary -> NEW IDENT .)
    IDENT           reduce using rule 102 (primary -> NEW IDENT .)

  ! LPAREN          [ reduce using rule 102 (primary -> NEW IDENT .) ]


state 169

    (103) primary -> FN LPAREN . parameters_opt RPAREN return_opt block
    (38) parameters_opt -> . parameters
    (39) parameters_opt -> . empty
    (40) parameters -> . parameters COMMA parameter
    (41) parameters -> . parameter
    (104) empty -> .
    (42) parameter -> . IDENT COLON type_expr

    RPAREN          reduce using rule 104 (empty -> .)
    IDENT           shift and go to state 53

    parameters_opt                 shift and go to state 203
    parameters                     shift and go to state 55
    empty                          shift and go to state 56
    parameter                      shift and go to state 57

state 170

    (61) var_decl -> LET IDENT COLON . type_expr EQUAL expression SEMI
    (62) var_decl -> LET IDENT COLON . type_expr SEMI
    (45) type_expr -> . simple_type_expr array_spec_opt
    (46) simple_type_expr -> . IDENT type_access_opt

    IDENT           shift and go to state 74

    type_expr                      shift and go to state 204
    simple_type_expr               shift and go to state 76

state 171

    (28) field_assign -> IDENT . COLON expression opt_comma

    COLON           shift and go to state 205


state 172

    (24) primary -> IDENT LBRACE field_assign_list . RBRACE
    (25) field_assign_list -> field_assign_list . field_assign
    (28) field_assign -> . IDENT COLON expression opt_comma

    RBRACE          shift and go to state 206
    IDENT           shift and go to state 171

    field_assign                   shift and go to state 207

state 173

    (26) field_assign_list -> field_assign .

    RBRACE          reduce using rule 26 (field_assign_list -> field_assign .)
    IDENT           reduce using rule 26 (field_assign_list -> field_assign .)


state 174

    (27) field_assign_list -> empty .

    RBRACE          reduce using rule 27 (field_assign_list -> empty .)
    IDENT           reduce using rule 27 (field_assign_list -> empty .)


state 175

    (66) expression -> expression PLUS expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 66 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 66 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 66 (expression -> expression PLUS expression .)
    LE              reduce using rule 66 (expression -> expression PLUS expression .)
    LT              reduce using rule 66 (expression -> expression PLUS expression .)
    GE              reduce using rule 66 (expression -> expression PLUS expression .)
    GT              reduce using rule 66 (expression -> expression PLUS expression .)
    EQ              reduce using rule 66 (expression -> expression PLUS expression .)
    NE              reduce using rule 66 (expression -> expression PLUS expression .)
    LBRACE          reduce using rule 66 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 66 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 66 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 66 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 66 (expression -> expression PLUS expression .)
    IDENT           reduce using rule 66 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145

  ! TIMES           [ reduce using rule 66 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression PLUS expression .) ]
  ! MOD             [ reduce using rule 66 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 142 ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 176

    (67) expression -> expression MINUS expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 67 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 67 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 67 (expression -> expression MINUS expression .)
    LE              reduce using rule 67 (expression -> expression MINUS expression .)
    LT              reduce using rule 67 (expression -> expression MINUS expression .)
    GE              reduce using rule 67 (expression -> expression MINUS expression .)
    GT              reduce using rule 67 (expression -> expression MINUS expression .)
    EQ              reduce using rule 67 (expression -> expression MINUS expression .)
    NE              reduce using rule 67 (expression -> expression MINUS expression .)
    LBRACE          reduce using rule 67 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 67 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 67 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 67 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 67 (expression -> expression MINUS expression .)
    IDENT           reduce using rule 67 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145

  ! TIMES           [ reduce using rule 67 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression MINUS expression .) ]
  ! MOD             [ reduce using rule 67 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 142 ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 177

    (68) expression -> expression TIMES expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 68 (expression -> expression TIMES expression .)
    PLUS            reduce using rule 68 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 68 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 68 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 68 (expression -> expression TIMES expression .)
    MOD             reduce using rule 68 (expression -> expression TIMES expression .)
    LE              reduce using rule 68 (expression -> expression TIMES expression .)
    LT              reduce using rule 68 (expression -> expression TIMES expression .)
    GE              reduce using rule 68 (expression -> expression TIMES expression .)
    GT              reduce using rule 68 (expression -> expression TIMES expression .)
    EQ              reduce using rule 68 (expression -> expression TIMES expression .)
    NE              reduce using rule 68 (expression -> expression TIMES expression .)
    LBRACE          reduce using rule 68 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 68 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 68 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 68 (expression -> expression TIMES expression .)
    RBRACE          reduce using rule 68 (expression -> expression TIMES expression .)
    IDENT           reduce using rule 68 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 142 ]
  ! TIMES           [ shift and go to state 143 ]
  ! DIVIDE          [ shift and go to state 144 ]
  ! MOD             [ shift and go to state 145 ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 178

    (69) expression -> expression DIVIDE expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 69 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 69 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 69 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 69 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 69 (expression -> expression DIVIDE expression .)
    MOD             reduce using rule 69 (expression -> expression DIVIDE expression .)
    LE              reduce using rule 69 (expression -> expression DIVIDE expression .)
    LT              reduce using rule 69 (expression -> expression DIVIDE expression .)
    GE              reduce using rule 69 (expression -> expression DIVIDE expression .)
    GT              reduce using rule 69 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 69 (expression -> expression DIVIDE expression .)
    NE              reduce using rule 69 (expression -> expression DIVIDE expression .)
    LBRACE          reduce using rule 69 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 69 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 69 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 69 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 69 (expression -> expression DIVIDE expression .)
    IDENT           reduce using rule 69 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 142 ]
  ! TIMES           [ shift and go to state 143 ]
  ! DIVIDE          [ shift and go to state 144 ]
  ! MOD             [ shift and go to state 145 ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 179

    (70) expression -> expression MOD expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 70 (expression -> expression MOD expression .)
    PLUS            reduce using rule 70 (expression -> expression MOD expression .)
    MINUS           reduce using rule 70 (expression -> expression MOD expression .)
    TIMES           reduce using rule 70 (expression -> expression MOD expression .)
    DIVIDE          reduce using rule 70 (expression -> expression MOD expression .)
    MOD             reduce using rule 70 (expression -> expression MOD expression .)
    LE              reduce using rule 70 (expression -> expression MOD expression .)
    LT              reduce using rule 70 (expression -> expression MOD expression .)
    GE              reduce using rule 70 (expression -> expression MOD expression .)
    GT              reduce using rule 70 (expression -> expression MOD expression .)
    EQ              reduce using rule 70 (expression -> expression MOD expression .)
    NE              reduce using rule 70 (expression -> expression MOD expression .)
    LBRACE          reduce using rule 70 (expression -> expression MOD expression .)
    RPAREN          reduce using rule 70 (expression -> expression MOD expression .)
    COMMA           reduce using rule 70 (expression -> expression MOD expression .)
    RBRACKET        reduce using rule 70 (expression -> expression MOD expression .)
    RBRACE          reduce using rule 70 (expression -> expression MOD expression .)
    IDENT           reduce using rule 70 (expression -> expression MOD expression .)

  ! PLUS            [ shift and go to state 141 ]
  ! MINUS           [ shift and go to state 142 ]
  ! TIMES           [ shift and go to state 143 ]
  ! DIVIDE          [ shift and go to state 144 ]
  ! MOD             [ shift and go to state 145 ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 180

    (71) expression -> expression LE expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 71 (expression -> expression LE expression .)
    LE              reduce using rule 71 (expression -> expression LE expression .)
    LT              reduce using rule 71 (expression -> expression LE expression .)
    GE              reduce using rule 71 (expression -> expression LE expression .)
    GT              reduce using rule 71 (expression -> expression LE expression .)
    EQ              reduce using rule 71 (expression -> expression LE expression .)
    NE              reduce using rule 71 (expression -> expression LE expression .)
    LBRACE          reduce using rule 71 (expression -> expression LE expression .)
    RPAREN          reduce using rule 71 (expression -> expression LE expression .)
    COMMA           reduce using rule 71 (expression -> expression LE expression .)
    RBRACKET        reduce using rule 71 (expression -> expression LE expression .)
    RBRACE          reduce using rule 71 (expression -> expression LE expression .)
    IDENT           reduce using rule 71 (expression -> expression LE expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145

  ! PLUS            [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! MOD             [ reduce using rule 71 (expression -> expression LE expression .) ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 181

    (72) expression -> expression LT expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 72 (expression -> expression LT expression .)
    LE              reduce using rule 72 (expression -> expression LT expression .)
    LT              reduce using rule 72 (expression -> expression LT expression .)
    GE              reduce using rule 72 (expression -> expression LT expression .)
    GT              reduce using rule 72 (expression -> expression LT expression .)
    EQ              reduce using rule 72 (expression -> expression LT expression .)
    NE              reduce using rule 72 (expression -> expression LT expression .)
    LBRACE          reduce using rule 72 (expression -> expression LT expression .)
    RPAREN          reduce using rule 72 (expression -> expression LT expression .)
    COMMA           reduce using rule 72 (expression -> expression LT expression .)
    RBRACKET        reduce using rule 72 (expression -> expression LT expression .)
    RBRACE          reduce using rule 72 (expression -> expression LT expression .)
    IDENT           reduce using rule 72 (expression -> expression LT expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145

  ! PLUS            [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! MOD             [ reduce using rule 72 (expression -> expression LT expression .) ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 182

    (73) expression -> expression GE expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 73 (expression -> expression GE expression .)
    LE              reduce using rule 73 (expression -> expression GE expression .)
    LT              reduce using rule 73 (expression -> expression GE expression .)
    GE              reduce using rule 73 (expression -> expression GE expression .)
    GT              reduce using rule 73 (expression -> expression GE expression .)
    EQ              reduce using rule 73 (expression -> expression GE expression .)
    NE              reduce using rule 73 (expression -> expression GE expression .)
    LBRACE          reduce using rule 73 (expression -> expression GE expression .)
    RPAREN          reduce using rule 73 (expression -> expression GE expression .)
    COMMA           reduce using rule 73 (expression -> expression GE expression .)
    RBRACKET        reduce using rule 73 (expression -> expression GE expression .)
    RBRACE          reduce using rule 73 (expression -> expression GE expression .)
    IDENT           reduce using rule 73 (expression -> expression GE expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145

  ! PLUS            [ reduce using rule 73 (expression -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 73 (expression -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression GE expression .) ]
  ! MOD             [ reduce using rule 73 (expression -> expression GE expression .) ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 183

    (74) expression -> expression GT expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 74 (expression -> expression GT expression .)
    LE              reduce using rule 74 (expression -> expression GT expression .)
    LT              reduce using rule 74 (expression -> expression GT expression .)
    GE              reduce using rule 74 (expression -> expression GT expression .)
    GT              reduce using rule 74 (expression -> expression GT expression .)
    EQ              reduce using rule 74 (expression -> expression GT expression .)
    NE              reduce using rule 74 (expression -> expression GT expression .)
    LBRACE          reduce using rule 74 (expression -> expression GT expression .)
    RPAREN          reduce using rule 74 (expression -> expression GT expression .)
    COMMA           reduce using rule 74 (expression -> expression GT expression .)
    RBRACKET        reduce using rule 74 (expression -> expression GT expression .)
    RBRACE          reduce using rule 74 (expression -> expression GT expression .)
    IDENT           reduce using rule 74 (expression -> expression GT expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145

  ! PLUS            [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! MOD             [ reduce using rule 74 (expression -> expression GT expression .) ]
  ! LE              [ shift and go to state 146 ]
  ! LT              [ shift and go to state 147 ]
  ! GE              [ shift and go to state 148 ]
  ! GT              [ shift and go to state 149 ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 184

    (75) expression -> expression EQ expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 75 (expression -> expression EQ expression .)
    EQ              reduce using rule 75 (expression -> expression EQ expression .)
    NE              reduce using rule 75 (expression -> expression EQ expression .)
    LBRACE          reduce using rule 75 (expression -> expression EQ expression .)
    RPAREN          reduce using rule 75 (expression -> expression EQ expression .)
    COMMA           reduce using rule 75 (expression -> expression EQ expression .)
    RBRACKET        reduce using rule 75 (expression -> expression EQ expression .)
    RBRACE          reduce using rule 75 (expression -> expression EQ expression .)
    IDENT           reduce using rule 75 (expression -> expression EQ expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149

  ! PLUS            [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! MOD             [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! GT              [ reduce using rule 75 (expression -> expression EQ expression .) ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 185

    (76) expression -> expression NE expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 76 (expression -> expression NE expression .)
    EQ              reduce using rule 76 (expression -> expression NE expression .)
    NE              reduce using rule 76 (expression -> expression NE expression .)
    LBRACE          reduce using rule 76 (expression -> expression NE expression .)
    RPAREN          reduce using rule 76 (expression -> expression NE expression .)
    COMMA           reduce using rule 76 (expression -> expression NE expression .)
    RBRACKET        reduce using rule 76 (expression -> expression NE expression .)
    RBRACE          reduce using rule 76 (expression -> expression NE expression .)
    IDENT           reduce using rule 76 (expression -> expression NE expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149

  ! PLUS            [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! MOD             [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! GT              [ reduce using rule 76 (expression -> expression NE expression .) ]
  ! EQ              [ shift and go to state 150 ]
  ! NE              [ shift and go to state 151 ]


state 186

    (63) return_statement -> RETURN expression SEMI .

    RBRACE          reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    LET             reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    IF              reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    IDENT           reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    LBRACKET        reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    TRUE            reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    FALSE           reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    NEW             reduce using rule 63 (return_statement -> RETURN expression SEMI .)
    FN              reduce using rule 63 (return_statement -> RETURN expression SEMI .)


state 187

    (105) if_statement -> IF expression block . else_clause_opt
    (106) else_clause_opt -> . ELSE if_statement
    (107) else_clause_opt -> . ELSE block
    (108) else_clause_opt -> . empty
    (104) empty -> .

    ELSE            shift and go to state 209
    RBRACE          reduce using rule 104 (empty -> .)
    LET             reduce using rule 104 (empty -> .)
    RETURN          reduce using rule 104 (empty -> .)
    IF              reduce using rule 104 (empty -> .)
    IDENT           reduce using rule 104 (empty -> .)
    LPAREN          reduce using rule 104 (empty -> .)
    LBRACKET        reduce using rule 104 (empty -> .)
    NUMBER          reduce using rule 104 (empty -> .)
    STRING          reduce using rule 104 (empty -> .)
    TRUE            reduce using rule 104 (empty -> .)
    FALSE           reduce using rule 104 (empty -> .)
    NEW             reduce using rule 104 (empty -> .)
    FN              reduce using rule 104 (empty -> .)

    else_clause_opt                shift and go to state 208
    empty                          shift and go to state 210

state 188

    (113) assignment -> call_expr EQUAL expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            reduce using rule 113 (assignment -> call_expr EQUAL expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 189

    (79) call_suffix -> LPAREN arg_list_opt . RPAREN

    RPAREN          shift and go to state 211


state 190

    (84) arg_list_opt -> arg_list .
    (86) arg_list -> arg_list . COMMA argument

    RPAREN          reduce using rule 84 (arg_list_opt -> arg_list .)
    COMMA           shift and go to state 212


state 191

    (85) arg_list_opt -> empty .

    RPAREN          reduce using rule 85 (arg_list_opt -> empty .)


state 192

    (87) arg_list -> argument .

    COMMA           reduce using rule 87 (arg_list -> argument .)
    RPAREN          reduce using rule 87 (arg_list -> argument .)


state 193

    (88) argument -> IDENT . COLON expression
    (24) primary -> IDENT . LBRACE field_assign_list RBRACE
    (98) primary -> IDENT .

    COLON           shift and go to state 213
    LBRACE          shift and go to state 139
    LPAREN          reduce using rule 98 (primary -> IDENT .)
    DOT             reduce using rule 98 (primary -> IDENT .)
    DDCOLON         reduce using rule 98 (primary -> IDENT .)
    ARROW           reduce using rule 98 (primary -> IDENT .)
    LBRACKET        reduce using rule 98 (primary -> IDENT .)
    PLUS            reduce using rule 98 (primary -> IDENT .)
    MINUS           reduce using rule 98 (primary -> IDENT .)
    TIMES           reduce using rule 98 (primary -> IDENT .)
    DIVIDE          reduce using rule 98 (primary -> IDENT .)
    MOD             reduce using rule 98 (primary -> IDENT .)
    LE              reduce using rule 98 (primary -> IDENT .)
    LT              reduce using rule 98 (primary -> IDENT .)
    GE              reduce using rule 98 (primary -> IDENT .)
    GT              reduce using rule 98 (primary -> IDENT .)
    EQ              reduce using rule 98 (primary -> IDENT .)
    NE              reduce using rule 98 (primary -> IDENT .)
    COMMA           reduce using rule 98 (primary -> IDENT .)
    RPAREN          reduce using rule 98 (primary -> IDENT .)


state 194

    (89) argument -> expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    COMMA           reduce using rule 89 (argument -> expression .)
    RPAREN          reduce using rule 89 (argument -> expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 195

    (80) call_suffix -> DOT IDENT .

    EQUAL           reduce using rule 80 (call_suffix -> DOT IDENT .)
    LPAREN          reduce using rule 80 (call_suffix -> DOT IDENT .)
    DOT             reduce using rule 80 (call_suffix -> DOT IDENT .)
    DDCOLON         reduce using rule 80 (call_suffix -> DOT IDENT .)
    ARROW           reduce using rule 80 (call_suffix -> DOT IDENT .)
    LBRACKET        reduce using rule 80 (call_suffix -> DOT IDENT .)
    SEMI            reduce using rule 80 (call_suffix -> DOT IDENT .)
    PLUS            reduce using rule 80 (call_suffix -> DOT IDENT .)
    MINUS           reduce using rule 80 (call_suffix -> DOT IDENT .)
    TIMES           reduce using rule 80 (call_suffix -> DOT IDENT .)
    DIVIDE          reduce using rule 80 (call_suffix -> DOT IDENT .)
    MOD             reduce using rule 80 (call_suffix -> DOT IDENT .)
    LE              reduce using rule 80 (call_suffix -> DOT IDENT .)
    LT              reduce using rule 80 (call_suffix -> DOT IDENT .)
    GE              reduce using rule 80 (call_suffix -> DOT IDENT .)
    GT              reduce using rule 80 (call_suffix -> DOT IDENT .)
    EQ              reduce using rule 80 (call_suffix -> DOT IDENT .)
    NE              reduce using rule 80 (call_suffix -> DOT IDENT .)
    LBRACE          reduce using rule 80 (call_suffix -> DOT IDENT .)
    RPAREN          reduce using rule 80 (call_suffix -> DOT IDENT .)
    COMMA           reduce using rule 80 (call_suffix -> DOT IDENT .)
    RBRACKET        reduce using rule 80 (call_suffix -> DOT IDENT .)
    RBRACE          reduce using rule 80 (call_suffix -> DOT IDENT .)
    IDENT           reduce using rule 80 (call_suffix -> DOT IDENT .)


state 196

    (81) call_suffix -> DDCOLON IDENT .

    EQUAL           reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    LPAREN          reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    DOT             reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    DDCOLON         reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    ARROW           reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    LBRACKET        reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    SEMI            reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    PLUS            reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    MINUS           reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    TIMES           reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    DIVIDE          reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    MOD             reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    LE              reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    LT              reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    GE              reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    GT              reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    EQ              reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    NE              reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    LBRACE          reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    RPAREN          reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    COMMA           reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    RBRACKET        reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    RBRACE          reduce using rule 81 (call_suffix -> DDCOLON IDENT .)
    IDENT           reduce using rule 81 (call_suffix -> DDCOLON IDENT .)


state 197

    (82) call_suffix -> ARROW IDENT .

    EQUAL           reduce using rule 82 (call_suffix -> ARROW IDENT .)
    LPAREN          reduce using rule 82 (call_suffix -> ARROW IDENT .)
    DOT             reduce using rule 82 (call_suffix -> ARROW IDENT .)
    DDCOLON         reduce using rule 82 (call_suffix -> ARROW IDENT .)
    ARROW           reduce using rule 82 (call_suffix -> ARROW IDENT .)
    LBRACKET        reduce using rule 82 (call_suffix -> ARROW IDENT .)
    SEMI            reduce using rule 82 (call_suffix -> ARROW IDENT .)
    PLUS            reduce using rule 82 (call_suffix -> ARROW IDENT .)
    MINUS           reduce using rule 82 (call_suffix -> ARROW IDENT .)
    TIMES           reduce using rule 82 (call_suffix -> ARROW IDENT .)
    DIVIDE          reduce using rule 82 (call_suffix -> ARROW IDENT .)
    MOD             reduce using rule 82 (call_suffix -> ARROW IDENT .)
    LE              reduce using rule 82 (call_suffix -> ARROW IDENT .)
    LT              reduce using rule 82 (call_suffix -> ARROW IDENT .)
    GE              reduce using rule 82 (call_suffix -> ARROW IDENT .)
    GT              reduce using rule 82 (call_suffix -> ARROW IDENT .)
    EQ              reduce using rule 82 (call_suffix -> ARROW IDENT .)
    NE              reduce using rule 82 (call_suffix -> ARROW IDENT .)
    LBRACE          reduce using rule 82 (call_suffix -> ARROW IDENT .)
    RPAREN          reduce using rule 82 (call_suffix -> ARROW IDENT .)
    COMMA           reduce using rule 82 (call_suffix -> ARROW IDENT .)
    RBRACKET        reduce using rule 82 (call_suffix -> ARROW IDENT .)
    RBRACE          reduce using rule 82 (call_suffix -> ARROW IDENT .)
    IDENT           reduce using rule 82 (call_suffix -> ARROW IDENT .)


state 198

    (83) call_suffix -> LBRACKET expression . RBRACKET
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    RBRACKET        shift and go to state 214
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 199

    (90) primary -> LPAREN expression RPAREN .

    EQUAL           reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    DOT             reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    DDCOLON         reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    ARROW           reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    MOD             reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    LE              reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    LT              reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    GE              reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    GT              reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    EQ              reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    NE              reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    LBRACE          reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 90 (primary -> LPAREN expression RPAREN .)
    IDENT           reduce using rule 90 (primary -> LPAREN expression RPAREN .)


state 200

    (91) primary -> LBRACKET expr_list_opt RBRACKET .

    EQUAL           reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LPAREN          reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DOT             reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DDCOLON         reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    ARROW           reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LBRACKET        reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    SEMI            reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    PLUS            reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    MINUS           reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    TIMES           reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    DIVIDE          reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    MOD             reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LE              reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LT              reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    GE              reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    GT              reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    EQ              reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    NE              reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    LBRACE          reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RPAREN          reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    COMMA           reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RBRACKET        reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    RBRACE          reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)
    IDENT           reduce using rule 91 (primary -> LBRACKET expr_list_opt RBRACKET .)


state 201

    (94) expr_list -> expr_list COMMA . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 215
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 202

    (101) primary -> NEW IDENT LPAREN . arg_list_opt RPAREN
    (84) arg_list_opt -> . arg_list
    (85) arg_list_opt -> . empty
    (86) arg_list -> . arg_list COMMA argument
    (87) arg_list -> . argument
    (104) empty -> .
    (88) argument -> . IDENT COLON expression
    (89) argument -> . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    RPAREN          reduce using rule 104 (empty -> .)
    IDENT           shift and go to state 193
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    arg_list_opt                   shift and go to state 216
    arg_list                       shift and go to state 190
    empty                          shift and go to state 191
    argument                       shift and go to state 192
    expression                     shift and go to state 194
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 203

    (103) primary -> FN LPAREN parameters_opt . RPAREN return_opt block

    RPAREN          shift and go to state 217


state 204

    (61) var_decl -> LET IDENT COLON type_expr . EQUAL expression SEMI
    (62) var_decl -> LET IDENT COLON type_expr . SEMI

    EQUAL           shift and go to state 218
    SEMI            shift and go to state 219


state 205

    (28) field_assign -> IDENT COLON . expression opt_comma
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 220
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 206

    (24) primary -> IDENT LBRACE field_assign_list RBRACE .

    EQUAL           reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LPAREN          reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DOT             reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DDCOLON         reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    ARROW           reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LBRACKET        reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    SEMI            reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    PLUS            reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    MINUS           reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    TIMES           reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    DIVIDE          reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    MOD             reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LE              reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LT              reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    GE              reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    GT              reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    EQ              reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    NE              reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    LBRACE          reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RPAREN          reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    COMMA           reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RBRACKET        reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    RBRACE          reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)
    IDENT           reduce using rule 24 (primary -> IDENT LBRACE field_assign_list RBRACE .)


state 207

    (25) field_assign_list -> field_assign_list field_assign .

    RBRACE          reduce using rule 25 (field_assign_list -> field_assign_list field_assign .)
    IDENT           reduce using rule 25 (field_assign_list -> field_assign_list field_assign .)


state 208

    (105) if_statement -> IF expression block else_clause_opt .

    RBRACE          reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    LET             reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    RETURN          reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    IF              reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    IDENT           reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    LPAREN          reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    LBRACKET        reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    NUMBER          reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    STRING          reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    TRUE            reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    FALSE           reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    NEW             reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)
    FN              reduce using rule 105 (if_statement -> IF expression block else_clause_opt .)


state 209

    (106) else_clause_opt -> ELSE . if_statement
    (107) else_clause_opt -> ELSE . block
    (105) if_statement -> . IF expression block else_clause_opt
    (53) block -> . LBRACE statement_list RBRACE

    IF              shift and go to state 127
    LBRACE          shift and go to state 103

    if_statement                   shift and go to state 221
    block                          shift and go to state 222

state 210

    (108) else_clause_opt -> empty .

    RBRACE          reduce using rule 108 (else_clause_opt -> empty .)
    LET             reduce using rule 108 (else_clause_opt -> empty .)
    RETURN          reduce using rule 108 (else_clause_opt -> empty .)
    IF              reduce using rule 108 (else_clause_opt -> empty .)
    IDENT           reduce using rule 108 (else_clause_opt -> empty .)
    LPAREN          reduce using rule 108 (else_clause_opt -> empty .)
    LBRACKET        reduce using rule 108 (else_clause_opt -> empty .)
    NUMBER          reduce using rule 108 (else_clause_opt -> empty .)
    STRING          reduce using rule 108 (else_clause_opt -> empty .)
    TRUE            reduce using rule 108 (else_clause_opt -> empty .)
    FALSE           reduce using rule 108 (else_clause_opt -> empty .)
    NEW             reduce using rule 108 (else_clause_opt -> empty .)
    FN              reduce using rule 108 (else_clause_opt -> empty .)


state 211

    (79) call_suffix -> LPAREN arg_list_opt RPAREN .

    EQUAL           reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LPAREN          reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DOT             reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DDCOLON         reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    ARROW           reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LBRACKET        reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    SEMI            reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    PLUS            reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    MINUS           reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    TIMES           reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    DIVIDE          reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    MOD             reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LE              reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LT              reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    GE              reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    GT              reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    EQ              reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    NE              reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    LBRACE          reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RPAREN          reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    COMMA           reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RBRACKET        reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    RBRACE          reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)
    IDENT           reduce using rule 79 (call_suffix -> LPAREN arg_list_opt RPAREN .)


state 212

    (86) arg_list -> arg_list COMMA . argument
    (88) argument -> . IDENT COLON expression
    (89) argument -> . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 193
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    argument                       shift and go to state 223
    expression                     shift and go to state 194
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 213

    (88) argument -> IDENT COLON . expression
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 224
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 214

    (83) call_suffix -> LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    DOT             reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    DDCOLON         reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    ARROW           reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    MOD             reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    LE              reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    LT              reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    GE              reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    GT              reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    EQ              reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    NE              reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    LBRACE          reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)
    IDENT           reduce using rule 83 (call_suffix -> LBRACKET expression RBRACKET .)


state 215

    (94) expr_list -> expr_list COMMA expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    COMMA           reduce using rule 94 (expr_list -> expr_list COMMA expression .)
    RBRACKET        reduce using rule 94 (expr_list -> expr_list COMMA expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 216

    (101) primary -> NEW IDENT LPAREN arg_list_opt . RPAREN

    RPAREN          shift and go to state 225


state 217

    (103) primary -> FN LPAREN parameters_opt RPAREN . return_opt block
    (43) return_opt -> . ARROW type_expr
    (44) return_opt -> . empty
    (104) empty -> .

    ARROW           shift and go to state 83
    LBRACE          reduce using rule 104 (empty -> .)

    return_opt                     shift and go to state 226
    empty                          shift and go to state 84

state 218

    (61) var_decl -> LET IDENT COLON type_expr EQUAL . expression SEMI
    (65) expression -> . call_expr
    (66) expression -> . expression PLUS expression
    (67) expression -> . expression MINUS expression
    (68) expression -> . expression TIMES expression
    (69) expression -> . expression DIVIDE expression
    (70) expression -> . expression MOD expression
    (71) expression -> . expression LE expression
    (72) expression -> . expression LT expression
    (73) expression -> . expression GE expression
    (74) expression -> . expression GT expression
    (75) expression -> . expression EQ expression
    (76) expression -> . expression NE expression
    (77) call_expr -> . call_expr call_suffix
    (78) call_expr -> . primary
    (24) primary -> . IDENT LBRACE field_assign_list RBRACE
    (90) primary -> . LPAREN expression RPAREN
    (91) primary -> . LBRACKET expr_list_opt RBRACKET
    (96) primary -> . NUMBER
    (97) primary -> . STRING
    (98) primary -> . IDENT
    (99) primary -> . TRUE
    (100) primary -> . FALSE
    (101) primary -> . NEW IDENT LPAREN arg_list_opt RPAREN
    (102) primary -> . NEW IDENT
    (103) primary -> . FN LPAREN parameters_opt RPAREN return_opt block

    IDENT           shift and go to state 123
    LPAREN          shift and go to state 130
    LBRACKET        shift and go to state 131
    NUMBER          shift and go to state 132
    STRING          shift and go to state 133
    TRUE            shift and go to state 134
    FALSE           shift and go to state 135
    NEW             shift and go to state 136
    FN              shift and go to state 137

    expression                     shift and go to state 227
    call_expr                      shift and go to state 154
    primary                        shift and go to state 129

state 219

    (62) var_decl -> LET IDENT COLON type_expr SEMI .

    RBRACE          reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LET             reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    RETURN          reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    IF              reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    IDENT           reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LPAREN          reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    LBRACKET        reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    NUMBER          reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    STRING          reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    TRUE            reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    FALSE           reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    NEW             reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)
    FN              reduce using rule 62 (var_decl -> LET IDENT COLON type_expr SEMI .)


state 220

    (28) field_assign -> IDENT COLON expression . opt_comma
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression
    (29) opt_comma -> . COMMA
    (30) opt_comma -> . empty
    (104) empty -> .

    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151
    COMMA           shift and go to state 94
    RBRACE          reduce using rule 104 (empty -> .)
    IDENT           reduce using rule 104 (empty -> .)

    opt_comma                      shift and go to state 228
    empty                          shift and go to state 95

state 221

    (106) else_clause_opt -> ELSE if_statement .

    RBRACE          reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    LET             reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    RETURN          reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    IF              reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    IDENT           reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    LPAREN          reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    LBRACKET        reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    NUMBER          reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    STRING          reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    TRUE            reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    FALSE           reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    NEW             reduce using rule 106 (else_clause_opt -> ELSE if_statement .)
    FN              reduce using rule 106 (else_clause_opt -> ELSE if_statement .)


state 222

    (107) else_clause_opt -> ELSE block .

    RBRACE          reduce using rule 107 (else_clause_opt -> ELSE block .)
    LET             reduce using rule 107 (else_clause_opt -> ELSE block .)
    RETURN          reduce using rule 107 (else_clause_opt -> ELSE block .)
    IF              reduce using rule 107 (else_clause_opt -> ELSE block .)
    IDENT           reduce using rule 107 (else_clause_opt -> ELSE block .)
    LPAREN          reduce using rule 107 (else_clause_opt -> ELSE block .)
    LBRACKET        reduce using rule 107 (else_clause_opt -> ELSE block .)
    NUMBER          reduce using rule 107 (else_clause_opt -> ELSE block .)
    STRING          reduce using rule 107 (else_clause_opt -> ELSE block .)
    TRUE            reduce using rule 107 (else_clause_opt -> ELSE block .)
    FALSE           reduce using rule 107 (else_clause_opt -> ELSE block .)
    NEW             reduce using rule 107 (else_clause_opt -> ELSE block .)
    FN              reduce using rule 107 (else_clause_opt -> ELSE block .)


state 223

    (86) arg_list -> arg_list COMMA argument .

    COMMA           reduce using rule 86 (arg_list -> arg_list COMMA argument .)
    RPAREN          reduce using rule 86 (arg_list -> arg_list COMMA argument .)


state 224

    (88) argument -> IDENT COLON expression .
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    COMMA           reduce using rule 88 (argument -> IDENT COLON expression .)
    RPAREN          reduce using rule 88 (argument -> IDENT COLON expression .)
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 225

    (101) primary -> NEW IDENT LPAREN arg_list_opt RPAREN .

    EQUAL           reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    LPAREN          reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    DOT             reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    DDCOLON         reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    ARROW           reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    LBRACKET        reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    SEMI            reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    PLUS            reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    MINUS           reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    TIMES           reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    DIVIDE          reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    MOD             reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    LE              reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    LT              reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    GE              reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    GT              reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    EQ              reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    NE              reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    LBRACE          reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    RPAREN          reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    COMMA           reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    RBRACKET        reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    RBRACE          reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)
    IDENT           reduce using rule 101 (primary -> NEW IDENT LPAREN arg_list_opt RPAREN .)


state 226

    (103) primary -> FN LPAREN parameters_opt RPAREN return_opt . block
    (53) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 103

    block                          shift and go to state 229

state 227

    (61) var_decl -> LET IDENT COLON type_expr EQUAL expression . SEMI
    (66) expression -> expression . PLUS expression
    (67) expression -> expression . MINUS expression
    (68) expression -> expression . TIMES expression
    (69) expression -> expression . DIVIDE expression
    (70) expression -> expression . MOD expression
    (71) expression -> expression . LE expression
    (72) expression -> expression . LT expression
    (73) expression -> expression . GE expression
    (74) expression -> expression . GT expression
    (75) expression -> expression . EQ expression
    (76) expression -> expression . NE expression

    SEMI            shift and go to state 230
    PLUS            shift and go to state 141
    MINUS           shift and go to state 142
    TIMES           shift and go to state 143
    DIVIDE          shift and go to state 144
    MOD             shift and go to state 145
    LE              shift and go to state 146
    LT              shift and go to state 147
    GE              shift and go to state 148
    GT              shift and go to state 149
    EQ              shift and go to state 150
    NE              shift and go to state 151


state 228

    (28) field_assign -> IDENT COLON expression opt_comma .

    RBRACE          reduce using rule 28 (field_assign -> IDENT COLON expression opt_comma .)
    IDENT           reduce using rule 28 (field_assign -> IDENT COLON expression opt_comma .)


state 229

    (103) primary -> FN LPAREN parameters_opt RPAREN return_opt block .

    EQUAL           reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LPAREN          reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DOT             reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DDCOLON         reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    ARROW           reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LBRACKET        reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    SEMI            reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    PLUS            reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    MINUS           reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    TIMES           reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    DIVIDE          reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    MOD             reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LE              reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LT              reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    GE              reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    GT              reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    EQ              reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    NE              reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    LBRACE          reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RPAREN          reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    COMMA           reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RBRACKET        reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    RBRACE          reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)
    IDENT           reduce using rule 103 (primary -> FN LPAREN parameters_opt RPAREN return_opt block .)


state 230

    (61) var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .

    RBRACE          reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LET             reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    RETURN          reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    IF              reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    IDENT           reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LPAREN          reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    LBRACKET        reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    NUMBER          reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    STRING          reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    TRUE            reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    FALSE           reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    NEW             reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)
    FN              reduce using rule 61 (var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IDENT in state 33 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 99 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 123 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 139 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 168 resolved as shift
