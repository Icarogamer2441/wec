module main;

class NeuralNetwork {
    let layers: i32;
    let neurons: i32;
    let weights: i32Matrix;
    let biases: i32Matrix;
    
    fn constructor(layers: i32, neurons: i32) -> void {
        this.layers = layers;
        this.neurons = neurons;
        this.weights = i32Matrix.random(layers, neurons);
        this.biases = i32Matrix.random(layers, 1);
    }
    
    fn feedforward(inputs: i32Matrix) -> i32Matrix {
        let z: i32Matrix = this.weights.dot(inputs) + this.biases;
        return z;
    }

    fn sigmoid(x: i32) -> i32 {
        return 1 / (1 + wec.exp(-x));
    }
    
    fn sigmoid_derivative(x: i32) -> i32 {
        let sigmoid_x: i32 = this.sigmoid(x);
        return sigmoid_x * (1 - sigmoid_x);
    }

    fn backpropagate(inputs: i32Matrix, outputs: i32Matrix) -> void {
        let z: i32Matrix = this.feedforward(inputs);
        let a: i32Matrix = this.sigmoid(z);
        let delta: i32Matrix = a - outputs;
        let d_weights: i32Matrix = delta.dot(inputs.transpose());
        let d_biases: i32Matrix = delta;
        this.weights = this.weights - d_weights;
        this.biases = this.biases - d_biases;
    }
}

fn main() -> i32 {
    let nn: NeuralNetwork = new NeuralNetwork(2, 1);
    let inputs: i32Matrix;
    let outputs: i32Matrix;
    inputs.to(1);
    outputs.to(1);
    inputs.append([1, 2]);
    outputs.append([0]);
    nn.backpropagate(inputs, outputs);
    let result: i32Matrix = nn.feedforward(inputs);
    wec.print(result[0][0].to_int());
    return 0;
}