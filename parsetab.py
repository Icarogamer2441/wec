
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXrightUMINUSleftEQNEleftLTLEGTGEleftPLUSMINUSleftTIMESDIVIDEMODAND ARROW AS CLASS CODE_STRING COLON COMMA DDCOLON DIVIDE DOT ELSE ENUM EQ EQUAL FALSE FN FOR GE GT IDENT IF IMPLEMENT IMPORT IN JOIN LBRACE LBRACKET LE LET LPAREN LT MINUS MOD MODULE NE NEW NUMBER PLUS PUBLIC PYFN PYTHON PYTYPE RBRACE RBRACKET RETURN RPAREN SEMI STRING STRUCT TIMES TRUE USES WHILEprogram : opt_module decl_listopt_module : module_decl\n                  | emptydecl_list : decl_list decl\n                 | decldecl : class_def\n             | struct_def\n             | enum_def\n             | join_def\n             | implement_decl\n             | function\n             | import_decl\n             | python_import\n             | pyfn_decl\n             | pytype_declmodule_decl : MODULE IDENT SEMIstruct_def : STRUCT IDENT LBRACE field_decl_list RBRACEenum_def : ENUM IDENT LBRACE enum_variant_list RBRACEjoin_def : JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACEfield_decl_list : field_decl_list field_decl\n                        | field_decl\n                        | emptyfield_decl : IDENT COLON type_expr opt_commaenum_variant_list : enum_variant_list COMMA IDENT\n                         | IDENT\n                         | emptyprimary : IDENT LBRACE field_assign_list RBRACEfield_assign_list : field_assign_list field_assign\n                         | field_assign\n                         | emptyfield_assign : IDENT COLON expression opt_commaopt_comma : COMMA\n                 | emptyclass_def : CLASS IDENT LBRACE class_body RBRACEclass_body : class_body class_member\n                  | class_memberclass_member : PUBLIC IDENT COLON type_expr SEMI\n                    | LET IDENT COLON type_expr SEMIclass_member : functionfunction : FN IDENT LPAREN parameters_opt RPAREN return_opt blockparameters_opt : parameters\n                      | emptyparameters : parameters COMMA parameter\n                  | parameterparameter : IDENT COLON type_exprreturn_opt : ARROW type_expr\n                  | emptytype_expr : simple_type_expr array_spec_optsimple_type_expr : IDENT type_access_optarray_spec_opt : LBRACKET NUMBER RBRACKET\n                      | emptytype_access_opt : type_access_opt_part\n                       | emptytype_access_opt_part : DOT IDENT\n                            | DDCOLON IDENTblock : LBRACE statement_list RBRACEstatement_list : statement_list statement\n                      | emptystatement : var_decl\n                 | assignment_statement\n                 | return_statement\n                 | expr_statement\n                 | if_statement\n                 | while_stmt\n                 | for_stmtvar_decl : LET IDENT COLON type_expr EQUAL expression SEMI\n                | LET IDENT COLON type_expr SEMIreturn_statement : RETURN expression SEMIexpr_statement : expression SEMIexpression : call_expr\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression LE expression\n                  | expression LT expression\n                  | expression GE expression\n                  | expression GT expression\n                  | expression EQ expression\n                  | expression NE expressioncall_expr : call_expr call_suffixcall_expr : primarycall_suffix : LPAREN arg_list_opt RPARENcall_suffix : DOT IDENTcall_suffix : DDCOLON IDENTcall_suffix : ARROW IDENTcall_suffix : LBRACKET expression RBRACKETarg_list_opt : arg_list\n                    | emptyarg_list : arg_list COMMA argument\n                | argumentargument : IDENT COLON expression\n                | expressionprimary : LPAREN expression RPARENprimary : LBRACKET expr_list_opt RBRACKETexpr_list_opt : expr_list\n                     | emptyexpr_list : expr_list COMMA expression\n                 | expressionprimary : NUMBERprimary : STRINGprimary : IDENTprimary : TRUE\n               | FALSEprimary : NEW qualified_identifier LPAREN arg_list_opt RPAREN\n                | NEW qualified_identifierprimary : FN LPAREN parameters_opt RPAREN return_opt blockempty :if_statement : IF expression block else_clause_opt %prec IFXelse_clause_opt : ELSE if_statement\n                        | ELSE block\n                        | emptyimplement_decl : IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACEmethod_list : method_list function\n                   | functionassignment_statement : assignment SEMIassignment : call_expr EQUAL expressionimport_decl : IMPORT STRING SEMIqualified_identifier : IDENT DDCOLON IDENT\n                            | IDENTexpression : MINUS expression %prec UMINUSwhile_stmt : WHILE expression blockfor_stmt : FOR IDENT COLON type_expr IN expression blockpython_import : PYTHON IMPORT IDENT SEMIpyfn_decl : PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_blockcode_block : LBRACE CODE_STRING RBRACEpytype_decl : PYTYPE IDENT EQUAL CODE_STRING SEMI'
    
_lr_action_items = {'MODULE':([0,],[5,]),'CLASS':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,18,-2,-3,18,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'STRUCT':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,19,-2,-3,19,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'ENUM':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,20,-2,-3,20,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'JOIN':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,21,-2,-3,21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'IMPLEMENT':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,22,-2,-3,22,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'FN':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,41,47,51,52,55,70,73,74,78,80,83,88,96,97,118,119,120,121,124,125,130,131,132,135,136,137,138,139,140,141,142,143,144,149,150,151,154,156,157,167,168,169,170,171,172,173,174,175,176,177,178,179,185,187,191,201,218,219,220,235,236,240,243,245,248,249,255,256,258,259,260,269,270,],[-109,23,-2,-3,23,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,23,-119,23,-36,-39,-125,-34,-35,-17,-18,23,-128,23,-116,-114,-115,-40,-109,-37,-38,163,-58,-126,-19,-56,-57,-59,-60,-61,-62,-63,-64,-65,163,163,163,163,163,163,-69,163,163,163,163,163,163,163,163,163,163,163,-117,163,163,163,-127,-68,-109,-123,163,163,163,-110,-113,163,163,163,-67,-111,-112,163,-66,-124,]),'IMPORT':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,25,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,24,-2,-3,24,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,37,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'PYTHON':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,25,-2,-3,25,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'PYFN':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,26,-2,-3,26,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'PYTYPE':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,29,40,47,70,73,78,80,88,118,120,132,135,136,201,],[-109,27,-2,-3,27,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-16,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'$end':([1,6,7,8,9,10,11,12,13,14,15,16,17,29,47,70,73,78,80,88,118,120,132,135,136,201,],[0,-1,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-119,-125,-34,-17,-18,-128,-114,-40,-126,-19,-56,-127,]),'IDENT':([5,18,19,20,21,22,23,26,27,37,42,43,44,45,46,49,53,54,57,58,59,77,79,81,82,84,86,89,90,91,92,93,100,103,106,107,108,109,110,111,112,113,114,116,117,121,126,127,129,130,131,134,136,137,138,139,140,141,142,143,144,145,146,149,150,151,152,154,155,156,157,158,159,160,161,162,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,185,186,187,188,189,190,191,192,198,199,200,202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,229,230,231,233,234,235,236,237,240,241,242,243,245,247,248,249,250,253,255,256,257,258,259,260,263,266,268,269,270,],[28,30,31,32,33,34,35,38,39,48,56,60,63,64,65,65,75,76,56,-21,-22,91,-20,94,95,91,65,91,91,-109,-109,-109,91,91,-49,-52,-53,126,127,-23,-32,-33,-48,-51,56,-109,-54,-55,56,146,-58,-50,-56,-57,-59,-60,-61,-62,-63,-64,-65,165,-103,146,146,146,184,146,-83,146,146,-101,-102,-104,-105,199,203,-69,146,146,146,146,146,146,146,146,146,146,146,-117,-70,146,-82,227,229,230,231,146,-122,-107,-121,65,91,203,-29,-30,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-68,-109,-123,91,-85,-86,-87,-95,-96,146,227,253,146,-27,-28,-110,-113,-84,227,146,-88,-120,146,-67,-109,-111,-112,146,-106,-31,-108,-66,-124,]),'STRING':([24,121,130,131,136,137,138,139,140,141,142,143,144,149,150,151,154,156,157,167,168,169,170,171,172,173,174,175,176,177,178,179,185,187,191,218,219,220,235,236,240,243,245,248,249,255,256,258,259,260,269,270,],[36,-109,159,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,159,159,159,159,159,159,-69,159,159,159,159,159,159,159,159,159,159,159,-117,159,159,159,-68,-109,-123,159,159,159,-110,-113,159,159,159,-67,-111,-112,159,-66,-124,]),'SEMI':([28,36,48,72,91,93,104,105,106,107,108,114,116,126,127,134,136,146,147,148,153,155,158,159,160,161,180,181,186,192,198,199,207,208,209,210,211,212,213,214,215,216,217,222,229,230,231,233,234,239,241,247,250,253,263,265,268,],[40,47,70,88,-109,-109,124,125,-49,-52,-53,-48,-51,-54,-55,-50,-56,-103,167,179,-70,-83,-101,-102,-104,-105,218,-70,-82,-122,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-118,-85,-86,-87,-95,-96,256,-27,-84,-88,-120,-106,269,-108,]),'LBRACE':([30,31,32,64,85,91,93,95,99,101,106,107,108,114,116,122,123,126,127,134,136,146,155,158,159,160,161,181,182,183,186,192,198,199,207,208,209,210,211,212,213,214,215,216,217,227,229,230,231,233,234,241,244,247,250,253,254,263,264,267,268,],[41,42,43,83,-109,-109,-109,117,121,-47,-49,-52,-53,-48,-51,-46,133,-54,-55,-50,-56,166,-83,-101,-102,-104,-105,-70,121,121,-82,-122,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,166,-85,-86,-87,-95,-96,-27,121,-84,-88,-120,-109,-106,121,121,-108,]),'AND':([33,],[44,]),'USES':([34,],[45,]),'LPAREN':([35,38,121,130,131,136,137,138,139,140,141,142,143,144,146,149,150,151,153,154,155,156,157,158,159,160,161,163,167,168,169,170,171,172,173,174,175,176,177,178,179,181,185,186,187,191,198,199,218,219,220,227,229,230,231,233,234,235,236,240,241,243,245,247,248,249,250,253,255,256,258,259,260,263,268,269,270,],[46,49,-109,156,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,-103,156,156,156,187,156,-83,156,156,-101,-102,-104,-105,200,-69,156,156,156,156,156,156,156,156,156,156,156,-117,187,156,-82,156,156,236,-121,-68,-109,-123,-103,-85,-86,-87,-95,-96,156,156,156,-27,-110,-113,-84,156,156,-88,-120,156,-67,-111,-112,156,-106,-108,-66,-124,]),'EQUAL':([39,91,93,106,107,108,114,116,126,127,134,136,146,153,155,158,159,160,161,186,198,199,229,230,231,233,234,239,241,247,250,253,263,268,],[50,-109,-109,-49,-52,-53,-48,-51,-54,-55,-50,-56,-103,185,-83,-101,-102,-104,-105,-82,-107,-121,-85,-86,-87,-95,-96,255,-27,-84,-88,-120,-106,-108,]),'PUBLIC':([41,51,52,55,74,120,124,125,136,],[53,53,-36,-39,-35,-40,-37,-38,-56,]),'LET':([41,51,52,55,74,120,121,124,125,130,131,136,137,138,139,140,141,142,143,144,167,179,218,219,220,243,245,256,258,259,269,270,],[54,54,-36,-39,-35,-40,-109,-37,-38,145,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,-69,-117,-68,-109,-123,-110,-113,-67,-111,-112,-66,-124,]),'RBRACE':([42,43,51,52,55,57,58,59,60,61,62,74,79,91,92,93,94,96,97,106,107,108,111,112,113,114,116,117,119,120,121,124,125,126,127,129,130,131,134,136,137,138,139,140,141,142,143,144,146,155,158,159,160,161,164,166,167,179,181,186,192,198,199,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,229,230,231,233,234,241,242,243,245,247,250,253,256,257,258,259,263,266,268,269,270,],[-109,-109,73,-36,-39,78,-21,-22,-25,80,-26,-35,-20,-109,-109,-109,-24,118,-116,-49,-52,-53,-23,-32,-33,-48,-51,-109,-115,-40,-109,-37,-38,-54,-55,135,136,-58,-50,-56,-57,-59,-60,-61,-62,-63,-64,-65,-103,-83,-101,-102,-104,-105,201,-109,-69,-117,-70,-82,-122,-107,-121,241,-29,-30,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-68,-109,-123,-85,-86,-87,-95,-96,-27,-28,-110,-113,-84,-88,-120,-67,-109,-111,-112,-106,-31,-108,-66,-124,]),'COMMA':([43,60,61,62,67,69,91,92,93,94,98,102,106,107,108,114,116,126,127,134,136,146,155,158,159,160,161,181,186,192,195,197,198,199,207,208,209,210,211,212,213,214,215,216,217,224,226,227,228,229,230,231,233,234,241,247,250,251,253,257,261,262,263,268,],[-109,-25,81,-26,86,-44,-109,112,-109,-24,-45,-43,-49,-52,-53,-48,-51,-54,-55,-50,-56,-103,-83,-101,-102,-104,-105,-70,-82,-122,235,-100,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,248,-92,-103,-94,-85,-86,-87,-95,-96,-27,-84,-88,-99,-120,112,-91,-93,-106,-108,]),'RPAREN':([46,49,66,67,68,69,71,91,93,98,102,106,107,108,114,116,126,127,134,136,146,155,158,159,160,161,181,186,187,192,193,198,199,200,207,208,209,210,211,212,213,214,215,216,217,223,224,225,226,227,228,229,230,231,233,234,236,238,241,247,250,252,253,261,262,263,268,],[-109,-109,85,-41,-42,-44,87,-109,-109,-45,-43,-49,-52,-53,-48,-51,-54,-55,-50,-56,-103,-83,-101,-102,-104,-105,-70,-82,-109,-122,233,-107,-121,-109,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,247,-89,-90,-92,-103,-94,-85,-86,-87,-95,-96,-109,254,-27,-84,-88,263,-120,-91,-93,-106,-108,]),'CODE_STRING':([50,133,],[72,164,]),'COLON':([56,65,75,76,165,184,203,227,],[77,84,89,90,202,221,240,249,]),'AS':([63,],[82,]),'ARROW':([85,87,136,146,153,155,158,159,160,161,181,186,198,199,227,229,230,231,233,234,241,247,250,253,254,263,268,],[100,103,-56,-103,190,-83,-101,-102,-104,-105,190,-82,-107,-121,-103,-85,-86,-87,-95,-96,-27,-84,-88,-120,100,-106,-108,]),'DOT':([91,136,146,153,155,158,159,160,161,181,186,198,199,227,229,230,231,233,234,241,247,250,253,263,268,],[109,-56,-103,188,-83,-101,-102,-104,-105,188,-82,-107,-121,-103,-85,-86,-87,-95,-96,-27,-84,-88,-120,-106,-108,]),'DDCOLON':([91,136,146,153,155,158,159,160,161,181,186,198,199,227,229,230,231,233,234,241,247,250,253,263,268,],[110,-56,-103,189,-83,-101,-102,-104,-105,189,-82,-107,237,-103,-85,-86,-87,-95,-96,-27,-84,-88,-120,-106,-108,]),'LBRACKET':([91,93,106,107,108,121,126,127,130,131,136,137,138,139,140,141,142,143,144,146,149,150,151,153,154,155,156,157,158,159,160,161,167,168,169,170,171,172,173,174,175,176,177,178,179,181,185,186,187,191,198,199,218,219,220,227,229,230,231,233,234,235,236,240,241,243,245,247,248,249,250,253,255,256,258,259,260,263,268,269,270,],[-109,115,-49,-52,-53,-109,-54,-55,157,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,-103,157,157,157,191,157,-83,157,157,-101,-102,-104,-105,-69,157,157,157,157,157,157,157,157,157,157,157,-117,191,157,-82,157,157,-107,-121,-68,-109,-123,-103,-85,-86,-87,-95,-96,157,157,157,-27,-110,-113,-84,157,157,-88,-120,157,-67,-111,-112,157,-106,-108,-66,-124,]),'IN':([91,93,106,107,108,114,116,126,127,134,246,],[-109,-109,-49,-52,-53,-48,-51,-54,-55,-50,260,]),'NUMBER':([115,121,130,131,136,137,138,139,140,141,142,143,144,149,150,151,154,156,157,167,168,169,170,171,172,173,174,175,176,177,178,179,185,187,191,218,219,220,235,236,240,243,245,248,249,255,256,258,259,260,269,270,],[128,-109,158,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,158,158,158,158,158,158,-69,158,158,158,158,158,158,158,158,158,158,158,-117,158,158,158,-68,-109,-123,158,158,158,-110,-113,158,158,158,-67,-111,-112,158,-66,-124,]),'RETURN':([121,130,131,136,137,138,139,140,141,142,143,144,167,179,218,219,220,243,245,256,258,259,269,270,],[-109,149,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,-69,-117,-68,-109,-123,-110,-113,-67,-111,-112,-66,-124,]),'IF':([121,130,131,136,137,138,139,140,141,142,143,144,167,179,218,219,220,243,244,245,256,258,259,269,270,],[-109,150,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,-69,-117,-68,-109,-123,-110,150,-113,-67,-111,-112,-66,-124,]),'WHILE':([121,130,131,136,137,138,139,140,141,142,143,144,167,179,218,219,220,243,245,256,258,259,269,270,],[-109,151,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,-69,-117,-68,-109,-123,-110,-113,-67,-111,-112,-66,-124,]),'FOR':([121,130,131,136,137,138,139,140,141,142,143,144,167,179,218,219,220,243,245,256,258,259,269,270,],[-109,152,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,-69,-117,-68,-109,-123,-110,-113,-67,-111,-112,-66,-124,]),'MINUS':([121,130,131,136,137,138,139,140,141,142,143,144,146,147,149,150,151,153,154,155,156,157,158,159,160,161,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,187,191,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,218,219,220,222,227,228,229,230,231,232,233,234,235,236,240,241,243,245,247,248,249,250,251,253,255,256,257,258,259,260,262,263,265,267,268,269,270,],[-109,154,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,-103,169,154,154,154,-70,154,-83,154,154,-101,-102,-104,-105,-69,154,154,154,154,154,154,154,154,154,154,154,-117,169,-70,169,169,154,-82,154,154,169,169,169,-107,-121,-71,-72,-73,-74,-75,169,169,169,169,169,169,-68,-109,-123,169,-103,169,-85,-86,-87,169,-95,-96,154,154,154,-27,-110,-113,-84,154,154,-88,169,-120,154,-67,169,-111,-112,154,169,-106,169,169,-108,-66,-124,]),'TRUE':([121,130,131,136,137,138,139,140,141,142,143,144,149,150,151,154,156,157,167,168,169,170,171,172,173,174,175,176,177,178,179,185,187,191,218,219,220,235,236,240,243,245,248,249,255,256,258,259,260,269,270,],[-109,160,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,160,160,160,160,160,160,-69,160,160,160,160,160,160,160,160,160,160,160,-117,160,160,160,-68,-109,-123,160,160,160,-110,-113,160,160,160,-67,-111,-112,160,-66,-124,]),'FALSE':([121,130,131,136,137,138,139,140,141,142,143,144,149,150,151,154,156,157,167,168,169,170,171,172,173,174,175,176,177,178,179,185,187,191,218,219,220,235,236,240,243,245,248,249,255,256,258,259,260,269,270,],[-109,161,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,161,161,161,161,161,161,-69,161,161,161,161,161,161,161,161,161,161,161,-117,161,161,161,-68,-109,-123,161,161,161,-110,-113,161,161,161,-67,-111,-112,161,-66,-124,]),'NEW':([121,130,131,136,137,138,139,140,141,142,143,144,149,150,151,154,156,157,167,168,169,170,171,172,173,174,175,176,177,178,179,185,187,191,218,219,220,235,236,240,243,245,248,249,255,256,258,259,260,269,270,],[-109,162,-58,-56,-57,-59,-60,-61,-62,-63,-64,-65,162,162,162,162,162,162,-69,162,162,162,162,162,162,162,162,162,162,162,-117,162,162,162,-68,-109,-123,162,162,162,-110,-113,162,162,162,-67,-111,-112,162,-66,-124,]),'RBRACKET':([128,136,146,155,157,158,159,160,161,181,186,192,194,195,196,197,198,199,207,208,209,210,211,212,213,214,215,216,217,229,230,231,232,233,234,241,247,250,251,253,263,268,],[134,-56,-103,-83,-109,-101,-102,-104,-105,-70,-82,-122,234,-97,-98,-100,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-85,-86,-87,250,-95,-96,-27,-84,-88,-99,-120,-106,-108,]),'ELSE':([136,219,],[-56,244,]),'PLUS':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,168,-70,-83,-101,-102,-104,-105,168,-70,168,168,-82,168,168,168,-107,-121,-71,-72,-73,-74,-75,168,168,168,168,168,168,168,-103,168,-85,-86,-87,168,-95,-96,-27,-84,-88,168,-120,168,168,-106,168,168,-108,]),'TIMES':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,170,-70,-83,-101,-102,-104,-105,170,-70,170,170,-82,170,170,170,-107,-121,170,170,-73,-74,-75,170,170,170,170,170,170,170,-103,170,-85,-86,-87,170,-95,-96,-27,-84,-88,170,-120,170,170,-106,170,170,-108,]),'DIVIDE':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,171,-70,-83,-101,-102,-104,-105,171,-70,171,171,-82,171,171,171,-107,-121,171,171,-73,-74,-75,171,171,171,171,171,171,171,-103,171,-85,-86,-87,171,-95,-96,-27,-84,-88,171,-120,171,171,-106,171,171,-108,]),'MOD':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,172,-70,-83,-101,-102,-104,-105,172,-70,172,172,-82,172,172,172,-107,-121,172,172,-73,-74,-75,172,172,172,172,172,172,172,-103,172,-85,-86,-87,172,-95,-96,-27,-84,-88,172,-120,172,172,-106,172,172,-108,]),'LE':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,173,-70,-83,-101,-102,-104,-105,173,-70,173,173,-82,173,173,173,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,173,173,173,-103,173,-85,-86,-87,173,-95,-96,-27,-84,-88,173,-120,173,173,-106,173,173,-108,]),'LT':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,174,-70,-83,-101,-102,-104,-105,174,-70,174,174,-82,174,174,174,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,174,174,174,-103,174,-85,-86,-87,174,-95,-96,-27,-84,-88,174,-120,174,174,-106,174,174,-108,]),'GE':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,175,-70,-83,-101,-102,-104,-105,175,-70,175,175,-82,175,175,175,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,175,175,175,-103,175,-85,-86,-87,175,-95,-96,-27,-84,-88,175,-120,175,175,-106,175,175,-108,]),'GT':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,176,-70,-83,-101,-102,-104,-105,176,-70,176,176,-82,176,176,176,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,176,176,176,-103,176,-85,-86,-87,176,-95,-96,-27,-84,-88,176,-120,176,176,-106,176,176,-108,]),'EQ':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,177,-70,-83,-101,-102,-104,-105,177,-70,177,177,-82,177,177,177,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,177,-103,177,-85,-86,-87,177,-95,-96,-27,-84,-88,177,-120,177,177,-106,177,177,-108,]),'NE':([136,146,147,153,155,158,159,160,161,180,181,182,183,186,192,193,197,198,199,207,208,209,210,211,212,213,214,215,216,217,222,227,228,229,230,231,232,233,234,241,247,250,251,253,257,262,263,265,267,268,],[-56,-103,178,-70,-83,-101,-102,-104,-105,178,-70,178,178,-82,178,178,178,-107,-121,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,178,-103,178,-85,-86,-87,178,-95,-96,-27,-84,-88,178,-120,178,178,-106,178,178,-108,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'opt_module':([0,],[2,]),'module_decl':([0,],[3,]),'empty':([0,42,43,46,49,85,91,92,93,117,121,157,166,187,200,219,236,254,257,],[4,59,62,68,68,101,108,113,116,59,131,196,206,225,68,245,225,101,113,]),'decl_list':([2,],[6,]),'decl':([2,6,],[7,29,]),'class_def':([2,6,],[8,8,]),'struct_def':([2,6,],[9,9,]),'enum_def':([2,6,],[10,10,]),'join_def':([2,6,],[11,11,]),'implement_decl':([2,6,],[12,12,]),'function':([2,6,41,51,83,96,],[13,13,55,55,97,119,]),'import_decl':([2,6,],[14,14,]),'python_import':([2,6,],[15,15,]),'pyfn_decl':([2,6,],[16,16,]),'pytype_decl':([2,6,],[17,17,]),'class_body':([41,],[51,]),'class_member':([41,51,],[52,74,]),'field_decl_list':([42,117,],[57,129,]),'field_decl':([42,57,117,129,],[58,79,58,79,]),'enum_variant_list':([43,],[61,]),'parameters_opt':([46,49,200,],[66,71,238,]),'parameters':([46,49,200,],[67,67,67,]),'parameter':([46,49,86,200,],[69,69,102,69,]),'type_expr':([77,84,89,90,100,103,202,221,],[92,98,104,105,122,123,239,246,]),'simple_type_expr':([77,84,89,90,100,103,202,221,],[93,93,93,93,93,93,93,93,]),'method_list':([83,],[96,]),'return_opt':([85,254,],[99,264,]),'type_access_opt':([91,],[106,]),'type_access_opt_part':([91,],[107,]),'opt_comma':([92,257,],[111,266,]),'array_spec_opt':([93,],[114,]),'block':([99,182,183,244,264,267,],[120,219,220,259,268,270,]),'statement_list':([121,],[130,]),'code_block':([123,],[132,]),'statement':([130,],[137,]),'var_decl':([130,],[138,]),'assignment_statement':([130,],[139,]),'return_statement':([130,],[140,]),'expr_statement':([130,],[141,]),'if_statement':([130,244,],[142,258,]),'while_stmt':([130,],[143,]),'for_stmt':([130,],[144,]),'expression':([130,149,150,151,154,156,157,168,169,170,171,172,173,174,175,176,177,178,185,187,191,235,236,240,248,249,255,260,],[147,180,182,183,192,193,197,207,208,209,210,211,212,213,214,215,216,217,222,228,232,251,228,257,228,262,265,267,]),'assignment':([130,],[148,]),'call_expr':([130,149,150,151,154,156,157,168,169,170,171,172,173,174,175,176,177,178,185,187,191,235,236,240,248,249,255,260,],[153,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,]),'primary':([130,149,150,151,154,156,157,168,169,170,171,172,173,174,175,176,177,178,185,187,191,235,236,240,248,249,255,260,],[155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,]),'call_suffix':([153,181,],[186,186,]),'expr_list_opt':([157,],[194,]),'expr_list':([157,],[195,]),'qualified_identifier':([162,],[198,]),'field_assign_list':([166,],[204,]),'field_assign':([166,204,],[205,242,]),'arg_list_opt':([187,236,],[223,252,]),'arg_list':([187,236,],[224,224,]),'argument':([187,236,248,],[226,226,261,]),'else_clause_opt':([219,],[243,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> opt_module decl_list','program',2,'p_program','parser_lexer.py',264),
  ('opt_module -> module_decl','opt_module',1,'p_opt_module','parser_lexer.py',280),
  ('opt_module -> empty','opt_module',1,'p_opt_module','parser_lexer.py',281),
  ('decl_list -> decl_list decl','decl_list',2,'p_decl_list','parser_lexer.py',285),
  ('decl_list -> decl','decl_list',1,'p_decl_list','parser_lexer.py',286),
  ('decl -> class_def','decl',1,'p_decl','parser_lexer.py',293),
  ('decl -> struct_def','decl',1,'p_decl','parser_lexer.py',294),
  ('decl -> enum_def','decl',1,'p_decl','parser_lexer.py',295),
  ('decl -> join_def','decl',1,'p_decl','parser_lexer.py',296),
  ('decl -> implement_decl','decl',1,'p_decl','parser_lexer.py',297),
  ('decl -> function','decl',1,'p_decl','parser_lexer.py',298),
  ('decl -> import_decl','decl',1,'p_decl','parser_lexer.py',299),
  ('decl -> python_import','decl',1,'p_decl','parser_lexer.py',300),
  ('decl -> pyfn_decl','decl',1,'p_decl','parser_lexer.py',301),
  ('decl -> pytype_decl','decl',1,'p_decl','parser_lexer.py',302),
  ('module_decl -> MODULE IDENT SEMI','module_decl',3,'p_module_decl','parser_lexer.py',306),
  ('struct_def -> STRUCT IDENT LBRACE field_decl_list RBRACE','struct_def',5,'p_struct_def','parser_lexer.py',310),
  ('enum_def -> ENUM IDENT LBRACE enum_variant_list RBRACE','enum_def',5,'p_enum_def','parser_lexer.py',314),
  ('join_def -> JOIN IDENT AND IDENT AS IDENT LBRACE field_decl_list RBRACE','join_def',9,'p_join_def','parser_lexer.py',318),
  ('field_decl_list -> field_decl_list field_decl','field_decl_list',2,'p_field_decl_list','parser_lexer.py',322),
  ('field_decl_list -> field_decl','field_decl_list',1,'p_field_decl_list','parser_lexer.py',323),
  ('field_decl_list -> empty','field_decl_list',1,'p_field_decl_list','parser_lexer.py',324),
  ('field_decl -> IDENT COLON type_expr opt_comma','field_decl',4,'p_field_decl','parser_lexer.py',331),
  ('enum_variant_list -> enum_variant_list COMMA IDENT','enum_variant_list',3,'p_enum_variant_list','parser_lexer.py',335),
  ('enum_variant_list -> IDENT','enum_variant_list',1,'p_enum_variant_list','parser_lexer.py',336),
  ('enum_variant_list -> empty','enum_variant_list',1,'p_enum_variant_list','parser_lexer.py',337),
  ('primary -> IDENT LBRACE field_assign_list RBRACE','primary',4,'p_record_literal','parser_lexer.py',344),
  ('field_assign_list -> field_assign_list field_assign','field_assign_list',2,'p_field_assign_list','parser_lexer.py',348),
  ('field_assign_list -> field_assign','field_assign_list',1,'p_field_assign_list','parser_lexer.py',349),
  ('field_assign_list -> empty','field_assign_list',1,'p_field_assign_list','parser_lexer.py',350),
  ('field_assign -> IDENT COLON expression opt_comma','field_assign',4,'p_field_assign','parser_lexer.py',359),
  ('opt_comma -> COMMA','opt_comma',1,'p_opt_comma','parser_lexer.py',363),
  ('opt_comma -> empty','opt_comma',1,'p_opt_comma','parser_lexer.py',364),
  ('class_def -> CLASS IDENT LBRACE class_body RBRACE','class_def',5,'p_class_def','parser_lexer.py',368),
  ('class_body -> class_body class_member','class_body',2,'p_class_body','parser_lexer.py',372),
  ('class_body -> class_member','class_body',1,'p_class_body','parser_lexer.py',373),
  ('class_member -> PUBLIC IDENT COLON type_expr SEMI','class_member',5,'p_class_member_field','parser_lexer.py',380),
  ('class_member -> LET IDENT COLON type_expr SEMI','class_member',5,'p_class_member_field','parser_lexer.py',381),
  ('class_member -> function','class_member',1,'p_class_member_function','parser_lexer.py',385),
  ('function -> FN IDENT LPAREN parameters_opt RPAREN return_opt block','function',7,'p_function','parser_lexer.py',424),
  ('parameters_opt -> parameters','parameters_opt',1,'p_parameters_opt','parser_lexer.py',428),
  ('parameters_opt -> empty','parameters_opt',1,'p_parameters_opt','parser_lexer.py',429),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','parser_lexer.py',433),
  ('parameters -> parameter','parameters',1,'p_parameters','parser_lexer.py',434),
  ('parameter -> IDENT COLON type_expr','parameter',3,'p_parameter','parser_lexer.py',441),
  ('return_opt -> ARROW type_expr','return_opt',2,'p_return_opt','parser_lexer.py',445),
  ('return_opt -> empty','return_opt',1,'p_return_opt','parser_lexer.py',446),
  ('type_expr -> simple_type_expr array_spec_opt','type_expr',2,'p_type_expr','parser_lexer.py',450),
  ('simple_type_expr -> IDENT type_access_opt','simple_type_expr',2,'p_simple_type_expr','parser_lexer.py',454),
  ('array_spec_opt -> LBRACKET NUMBER RBRACKET','array_spec_opt',3,'p_array_spec_opt','parser_lexer.py',458),
  ('array_spec_opt -> empty','array_spec_opt',1,'p_array_spec_opt','parser_lexer.py',459),
  ('type_access_opt -> type_access_opt_part','type_access_opt',1,'p_type_access_opt','parser_lexer.py',466),
  ('type_access_opt -> empty','type_access_opt',1,'p_type_access_opt','parser_lexer.py',467),
  ('type_access_opt_part -> DOT IDENT','type_access_opt_part',2,'p_type_access_opt_part','parser_lexer.py',471),
  ('type_access_opt_part -> DDCOLON IDENT','type_access_opt_part',2,'p_type_access_opt_part','parser_lexer.py',472),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser_lexer.py',476),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser_lexer.py',480),
  ('statement_list -> empty','statement_list',1,'p_statement_list','parser_lexer.py',481),
  ('statement -> var_decl','statement',1,'p_statement','parser_lexer.py',488),
  ('statement -> assignment_statement','statement',1,'p_statement','parser_lexer.py',489),
  ('statement -> return_statement','statement',1,'p_statement','parser_lexer.py',490),
  ('statement -> expr_statement','statement',1,'p_statement','parser_lexer.py',491),
  ('statement -> if_statement','statement',1,'p_statement','parser_lexer.py',492),
  ('statement -> while_stmt','statement',1,'p_statement','parser_lexer.py',493),
  ('statement -> for_stmt','statement',1,'p_statement','parser_lexer.py',494),
  ('var_decl -> LET IDENT COLON type_expr EQUAL expression SEMI','var_decl',7,'p_var_decl','parser_lexer.py',498),
  ('var_decl -> LET IDENT COLON type_expr SEMI','var_decl',5,'p_var_decl','parser_lexer.py',499),
  ('return_statement -> RETURN expression SEMI','return_statement',3,'p_return_statement','parser_lexer.py',506),
  ('expr_statement -> expression SEMI','expr_statement',2,'p_expr_statement','parser_lexer.py',510),
  ('expression -> call_expr','expression',1,'p_expression','parser_lexer.py',514),
  ('expression -> expression PLUS expression','expression',3,'p_expression','parser_lexer.py',515),
  ('expression -> expression MINUS expression','expression',3,'p_expression','parser_lexer.py',516),
  ('expression -> expression TIMES expression','expression',3,'p_expression','parser_lexer.py',517),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','parser_lexer.py',518),
  ('expression -> expression MOD expression','expression',3,'p_expression','parser_lexer.py',519),
  ('expression -> expression LE expression','expression',3,'p_expression','parser_lexer.py',520),
  ('expression -> expression LT expression','expression',3,'p_expression','parser_lexer.py',521),
  ('expression -> expression GE expression','expression',3,'p_expression','parser_lexer.py',522),
  ('expression -> expression GT expression','expression',3,'p_expression','parser_lexer.py',523),
  ('expression -> expression EQ expression','expression',3,'p_expression','parser_lexer.py',524),
  ('expression -> expression NE expression','expression',3,'p_expression','parser_lexer.py',525),
  ('call_expr -> call_expr call_suffix','call_expr',2,'p_call_expr','parser_lexer.py',532),
  ('call_expr -> primary','call_expr',1,'p_call_expr_base','parser_lexer.py',547),
  ('call_suffix -> LPAREN arg_list_opt RPAREN','call_suffix',3,'p_call_suffix_call','parser_lexer.py',551),
  ('call_suffix -> DOT IDENT','call_suffix',2,'p_call_suffix_dot','parser_lexer.py',555),
  ('call_suffix -> DDCOLON IDENT','call_suffix',2,'p_call_suffix_ddcolon','parser_lexer.py',559),
  ('call_suffix -> ARROW IDENT','call_suffix',2,'p_call_suffix_arrow','parser_lexer.py',563),
  ('call_suffix -> LBRACKET expression RBRACKET','call_suffix',3,'p_call_suffix_index','parser_lexer.py',567),
  ('arg_list_opt -> arg_list','arg_list_opt',1,'p_arg_list_opt','parser_lexer.py',571),
  ('arg_list_opt -> empty','arg_list_opt',1,'p_arg_list_opt','parser_lexer.py',572),
  ('arg_list -> arg_list COMMA argument','arg_list',3,'p_arg_list','parser_lexer.py',576),
  ('arg_list -> argument','arg_list',1,'p_arg_list','parser_lexer.py',577),
  ('argument -> IDENT COLON expression','argument',3,'p_argument','parser_lexer.py',584),
  ('argument -> expression','argument',1,'p_argument','parser_lexer.py',585),
  ('primary -> LPAREN expression RPAREN','primary',3,'p_primary_paren','parser_lexer.py',592),
  ('primary -> LBRACKET expr_list_opt RBRACKET','primary',3,'p_primary_list','parser_lexer.py',596),
  ('expr_list_opt -> expr_list','expr_list_opt',1,'p_expr_list_opt','parser_lexer.py',600),
  ('expr_list_opt -> empty','expr_list_opt',1,'p_expr_list_opt','parser_lexer.py',601),
  ('expr_list -> expr_list COMMA expression','expr_list',3,'p_expr_list','parser_lexer.py',605),
  ('expr_list -> expression','expr_list',1,'p_expr_list','parser_lexer.py',606),
  ('primary -> NUMBER','primary',1,'p_primary_literal_number','parser_lexer.py',613),
  ('primary -> STRING','primary',1,'p_primary_literal_string','parser_lexer.py',617),
  ('primary -> IDENT','primary',1,'p_primary_identifier','parser_lexer.py',621),
  ('primary -> TRUE','primary',1,'p_primary_boolean','parser_lexer.py',625),
  ('primary -> FALSE','primary',1,'p_primary_boolean','parser_lexer.py',626),
  ('primary -> NEW qualified_identifier LPAREN arg_list_opt RPAREN','primary',5,'p_primary_new','parser_lexer.py',631),
  ('primary -> NEW qualified_identifier','primary',2,'p_primary_new','parser_lexer.py',632),
  ('primary -> FN LPAREN parameters_opt RPAREN return_opt block','primary',6,'p_primary_lambda','parser_lexer.py',639),
  ('empty -> <empty>','empty',0,'p_empty','parser_lexer.py',643),
  ('if_statement -> IF expression block else_clause_opt','if_statement',4,'p_if_statement','parser_lexer.py',647),
  ('else_clause_opt -> ELSE if_statement','else_clause_opt',2,'p_else_clause_opt','parser_lexer.py',654),
  ('else_clause_opt -> ELSE block','else_clause_opt',2,'p_else_clause_opt','parser_lexer.py',655),
  ('else_clause_opt -> empty','else_clause_opt',1,'p_else_clause_opt','parser_lexer.py',656),
  ('implement_decl -> IMPLEMENT IDENT USES IDENT LBRACE method_list RBRACE','implement_decl',7,'p_implement_decl','parser_lexer.py',663),
  ('method_list -> method_list function','method_list',2,'p_method_list','parser_lexer.py',667),
  ('method_list -> function','method_list',1,'p_method_list','parser_lexer.py',668),
  ('assignment_statement -> assignment SEMI','assignment_statement',2,'p_assignment_statement','parser_lexer.py',675),
  ('assignment -> call_expr EQUAL expression','assignment',3,'p_assignment','parser_lexer.py',679),
  ('import_decl -> IMPORT STRING SEMI','import_decl',3,'p_import_decl','parser_lexer.py',683),
  ('qualified_identifier -> IDENT DDCOLON IDENT','qualified_identifier',3,'p_qualified_identifier','parser_lexer.py',693),
  ('qualified_identifier -> IDENT','qualified_identifier',1,'p_qualified_identifier','parser_lexer.py',694),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser_lexer.py',701),
  ('while_stmt -> WHILE expression block','while_stmt',3,'p_while_stmt','parser_lexer.py',705),
  ('for_stmt -> FOR IDENT COLON type_expr IN expression block','for_stmt',7,'p_for_stmt','parser_lexer.py',709),
  ('python_import -> PYTHON IMPORT IDENT SEMI','python_import',4,'p_python_import','parser_lexer.py',713),
  ('pyfn_decl -> PYFN IDENT LPAREN parameters_opt RPAREN ARROW type_expr code_block','pyfn_decl',8,'p_pyfn_decl','parser_lexer.py',717),
  ('code_block -> LBRACE CODE_STRING RBRACE','code_block',3,'p_code_block','parser_lexer.py',726),
  ('pytype_decl -> PYTYPE IDENT EQUAL CODE_STRING SEMI','pytype_decl',5,'p_pytype_decl','parser_lexer.py',747),
]
